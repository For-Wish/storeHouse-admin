/*
 Navicat Premium Data Transfer

 Source Server         : 本地
 Source Server Type    : MySQL
 Source Server Version : 50726
 Source Host           : localhost:3306
 Source Schema         : storehouse

 Target Server Type    : MySQL
 Target Server Version : 50726
 File Encoding         : 65001

 Date: 07/08/2022 13:57:34
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `category_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '板块 id',
  `category_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '板块标题',
  `topic_count` int(10) NULL DEFAULT NULL COMMENT '板块话题数',
  `comment_count` int(10) NULL DEFAULT NULL COMMENT '板块评论数',
  `description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '板块描述内容',
  `category_logo` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '板块图标',
  PRIMARY KEY (`category_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, 'Java', 1, 1, 'Java 是一门面向对象程序设计的通用语言。广泛应用于企业级 Web 应用开发和移动应用开发。', 'https://a.ideaopen.cn/Mercury/m6edIG21.png');
INSERT INTO `category` VALUES (2, 'MySQL', 1, 1, '这里是高品质的 MySQL 爱好者社区，致力于为 MySQL 开发者提供一个分享创造、结识伙伴、协同互助的平台。在这里你可以讨论和分享 MySQL 相关知识。', 'https://a.ideaopen.cn/Mercury/xt6g4QQA.png');
INSERT INTO `category` VALUES (3, 'Vue.js', 1, 1, 'Vue.js（/vjuː/，简称 Vue）是一个用于创建用户界面或者单页面应用的开源 JavaScript 框架。 2016 年 Vue 有着 89% 的 JS 开发者满意度。为 GitHub 有史以来星标数第 3 多的项目。', 'https://a.ideaopen.cn/Mercury/Ih9xZ1iV.png');
INSERT INTO `category` VALUES (4, 'LaraVel', 1, 1, 'Laravel 是优雅的 PHP Web 开发框架。具有高效、简洁、富于表达力等优点。采用 MVC 设计，是崇尚开发效率的全栈框架。是最受关注的 PHP 框架。', 'https://a.ideaopen.cn/Mercury/35x2tMKV.png');
INSERT INTO `category` VALUES (5, 'Python', NULL, NULL, '我们是高品质的 Python 中文社区，致力于为 Python 工程师提供一个知识共享，协同互助的平台。我们将会是国内最靠谱的 Python 论坛。', 'https://a.ideaopen.cn/Mercury/uRGNfbA5.png');
INSERT INTO `category` VALUES (6, 'PHP', NULL, NULL, 'PHP 是开源的服务器端脚本语言，主要适用于 Web 开发领域。有简单易学、跨平台性强、部署方便等优点。长期占据服务端开发语言市场的大份额。', 'https://a.ideaopen.cn/Mercury/F6EMEbdI.png');
INSERT INTO `category` VALUES (7, 'Go', NULL, NULL, 'Go（又称 Golang）是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。Go 被誉为是未来的服务器端编程语言。', 'https://a.ideaopen.cn/Mercury/unWVb3PI.png');
INSERT INTO `category` VALUES (8, 'Rust', NULL, NULL, 'Rust 是由 Mozilla 主导开发的通用、编译型编程语言。最近的一项 Stack Overflow 调查发现，近 80% 的受访者都喜欢或希望使用 Rust 语言进行开发。', 'https://a.ideaopen.cn/Mercury/CAUOZTaK.png');
INSERT INTO `category` VALUES (9, 'Server', NULL, NULL, '这里是运维社区，讨论话题包括 Linux（CentOS, Ubuntu）、容器（Docker, Kubernetes）、自动部署（Ansible、Puppet）、LAMP、云平台使用（阿里云等）、IaaS、PaaS、持续集成、日志监控运维相关话题等，专注于服务器运维的学习和经验的分享。', 'https://a.ideaopen.cn/Mercury/RvMtmSdN.png');
INSERT INTO `category` VALUES (10, '程序员', NULL, NULL, '讨论程序员生活、职场工作、职业规划、怎么写作、怎么开源、编程技能提升等，请不要灌水。', 'https://a.ideaopen.cn/Mercury/3QmjzAdt.png');
INSERT INTO `category` VALUES (12, '前端', 0, 0, '本社区为前端开发者社区，这里你可以讨论和分享 HTML, CSS, JavaScript 相关技术知识。', 'https://cdn.learnku.com//uploads/communities/DGHjM6p2qdamHmFJZt9g.jpg!/both/44x44');

-- ----------------------------
-- Table structure for collection
-- ----------------------------
DROP TABLE IF EXISTS `collection`;
CREATE TABLE `collection`  (
  `collection_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '收藏表 id',
  `collection_uid` int(10) NOT NULL COMMENT '收藏者 id',
  `collection_topic_id` int(10) NOT NULL COMMENT '收藏的贴子 id',
  PRIMARY KEY (`collection_id`) USING BTREE,
  INDEX `collectionUid`(`collection_uid`) USING BTREE,
  INDEX `collectionTopicId`(`collection_topic_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of collection
-- ----------------------------
INSERT INTO `collection` VALUES (1, 1, 1);
INSERT INTO `collection` VALUES (2, 2, 2);
INSERT INTO `collection` VALUES (3, 3, 3);
INSERT INTO `collection` VALUES (4, 4, 4);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `comment_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '评论 id',
  `content` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '评论内容',
  `comment_uid` int(10) NOT NULL COMMENT '评论者 id',
  `comment_topic_id` int(10) NOT NULL COMMENT '评论所属话题 id',
  `comment_time` datetime NOT NULL COMMENT '评论时间',
  `comment_ip` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网络地址',
  `comment_equipment` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '持用设备',
  PRIMARY KEY (`comment_id`) USING BTREE,
  INDEX `commentUid`(`comment_uid`) USING BTREE,
  INDEX `commentTopicId`(`comment_topic_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (1, 'Java 真不错', 1, 1, '2022-07-20 15:05:00', NULL, NULL);
INSERT INTO `comment` VALUES (2, 'LaraVel ------', 2, 2, '2022-07-20 15:28:20', NULL, NULL);
INSERT INTO `comment` VALUES (3, 'Vue yyds', 3, 3, '2022-07-20 17:29:10', NULL, NULL);
INSERT INTO `comment` VALUES (4, 'SQL需多加练习555', 4, 4, '2022-07-20 17:31:10', NULL, NULL);

-- ----------------------------
-- Table structure for config
-- ----------------------------
DROP TABLE IF EXISTS `config`;
CREATE TABLE `config`  (
  `cid` int(10) NOT NULL AUTO_INCREMENT COMMENT '标签 id',
  `smtp_eamil` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'smtp 账户',
  `smtp_pwd` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'smtp 密码',
  `baidu_app_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '百度文本识别的 appkey',
  `baidu_secret_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '百度文本识别的 secretkey',
  `geetest_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '极验Id',
  `geetest_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '极验Key',
  PRIMARY KEY (`cid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of config
-- ----------------------------
INSERT INTO `config` VALUES (1, '747945307@qq.com', 'srevblhibveijbvi', '213ghjvdhjw2vg3', '389hdnoewbekj', '23jbjbjkbjk', '23hkbdk');

-- ----------------------------
-- Table structure for gen_table
-- ----------------------------
DROP TABLE IF EXISTS `gen_table`;
CREATE TABLE `gen_table`  (
  `table_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `table_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '表名称',
  `table_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '表描述',
  `sub_table_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '关联子表的表名',
  `sub_table_fk_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '子表关联的外键名',
  `class_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '实体类名称',
  `tpl_category` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'crud' COMMENT '使用的模板（crud单表操作 tree树表操作）',
  `package_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成包路径',
  `module_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成模块名',
  `business_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成业务名',
  `function_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成功能名',
  `function_author` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '生成功能作者',
  `gen_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '生成代码方式（0zip压缩包 1自定义路径）',
  `gen_path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '/' COMMENT '生成路径（不填默认项目路径）',
  `options` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '其它生成选项',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`table_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_table
-- ----------------------------
INSERT INTO `gen_table` VALUES (1, 'category', '板块表', NULL, NULL, 'ShCategory', 'crud', 'com.ruoyi.ShCategory', 'ShCategory', 'ShCategory', '板块', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:25', '', '2022-07-27 09:26:12', NULL);
INSERT INTO `gen_table` VALUES (2, 'collection', '文章收藏表', NULL, NULL, 'ShCollection', 'crud', 'com.ruoyi.ShCollection', 'ShCollection', 'ShCollection', '收藏', 'JanYork', '0', '/', '{\"parentMenuId\":\"1\"}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:18', NULL);
INSERT INTO `gen_table` VALUES (3, 'comment', '文章评论表', NULL, NULL, 'ShComment', 'crud', 'com.ruoyi.ShComment', 'ShComment', 'ShComment', '评论', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23', NULL);
INSERT INTO `gen_table` VALUES (4, 'config', '后台配置表', NULL, NULL, 'ShConfig', 'crud', 'com.ruoyi.ShConfig', 'ShConfig', 'ShConfig', '配置', 'JanYork', '0', '/', '{\"parentMenuId\":\"1\"}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39', NULL);
INSERT INTO `gen_table` VALUES (5, 'notification', '通知表', NULL, NULL, 'ShNotification', 'crud', 'com.ruoyi.ShNotification', 'ShNotification', 'ShNotification', '通知', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47', NULL);
INSERT INTO `gen_table` VALUES (6, 'tag', '标签表', NULL, NULL, 'ShTag', 'crud', 'com.ruoyi.ShTag', 'ShTag', 'ShTag', '标签', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:55', NULL);
INSERT INTO `gen_table` VALUES (7, 'thumbs', '点赞表', NULL, NULL, 'ShThumbs', 'crud', 'com.ruoyi.ShThumbs', 'ShThumbs', 'ShThumbs', '点赞', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:01', NULL);
INSERT INTO `gen_table` VALUES (8, 'topic', '帖子文章表', NULL, NULL, 'ShTopic', 'crud', 'com.ruoyi.ShTopic', 'ShTopic', 'ShTopic', '文章', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08', NULL);
INSERT INTO `gen_table` VALUES (9, 'userinfo', '用户信息表', NULL, NULL, 'Shuserinfo', 'crud', 'com.ruoyi.Shuserinfo', 'Shuserinfo', 'Shuserinfo', '用户', 'JanYork', '0', '/', '{\"parentMenuId\":1}', 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14', NULL);

-- ----------------------------
-- Table structure for gen_table_column
-- ----------------------------
DROP TABLE IF EXISTS `gen_table_column`;
CREATE TABLE `gen_table_column`  (
  `column_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `table_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '归属表编号',
  `column_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列名称',
  `column_comment` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列描述',
  `column_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '列类型',
  `java_type` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'JAVA类型',
  `java_field` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'JAVA字段名',
  `is_pk` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否主键（1是）',
  `is_increment` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否自增（1是）',
  `is_required` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否必填（1是）',
  `is_insert` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否为插入字段（1是）',
  `is_edit` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否编辑字段（1是）',
  `is_list` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否列表字段（1是）',
  `is_query` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否查询字段（1是）',
  `query_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'EQ' COMMENT '查询方式（等于、不等于、大于、小于、范围）',
  `html_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）',
  `dict_type` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `sort` int(11) NULL DEFAULT NULL COMMENT '排序',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`column_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 60 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务表字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_table_column
-- ----------------------------
INSERT INTO `gen_table_column` VALUES (1, '1', 'category_id', '板块 id', 'int(10)', 'Integer', 'categoryId', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:25', '', '2022-07-27 09:26:12');
INSERT INTO `gen_table_column` VALUES (2, '1', 'category_title', '板块标题', 'varchar(50)', 'String', 'categoryTitle', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:12');
INSERT INTO `gen_table_column` VALUES (3, '1', 'topic_count', '板块话题数', 'int(10)', 'Integer', 'topicCount', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:12');
INSERT INTO `gen_table_column` VALUES (4, '1', 'comment_count', '板块评论数', 'int(10)', 'Integer', 'commentCount', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:12');
INSERT INTO `gen_table_column` VALUES (5, '1', 'description', '板块描述内容', 'varchar(200)', 'String', 'description', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 5, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:12');
INSERT INTO `gen_table_column` VALUES (6, '1', 'category_logo', '板块图标', 'varchar(200)', 'String', 'categoryLogo', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 6, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:12');
INSERT INTO `gen_table_column` VALUES (7, '2', 'collection_id', '收藏表 id', 'int(10)', 'Integer', 'collectionId', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:18');
INSERT INTO `gen_table_column` VALUES (8, '2', 'collection_uid', '收藏者 id', 'int(10)', 'Integer', 'collectionUid', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:18');
INSERT INTO `gen_table_column` VALUES (9, '2', 'collection_topic_id', '收藏的贴子 id', 'int(10)', 'Integer', 'collectionTopicId', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:18');
INSERT INTO `gen_table_column` VALUES (10, '3', 'comment_id', '评论 id', 'int(10)', 'Integer', 'commentId', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (11, '3', 'content', '评论内容', 'varchar(50)', 'String', 'content', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'editor', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (12, '3', 'comment_uid', '评论者 id', 'int(10)', 'Integer', 'commentUid', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (13, '3', 'comment_topic_id', '评论所属话题 id', 'int(10)', 'Integer', 'commentTopicId', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (14, '3', 'comment_time', '评论时间', 'datetime', 'Date', 'commentTime', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'datetime', '', 5, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (15, '3', 'comment_ip', '网络地址', 'varchar(50)', 'String', 'commentIp', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 6, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (16, '3', 'comment_equipment', '持用设备', 'varchar(50)', 'String', 'commentEquipment', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 7, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:23');
INSERT INTO `gen_table_column` VALUES (17, '4', 'cid', '标签 id', 'int(10)', 'Integer', 'cid', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (18, '4', 'smtp_eamil', 'smtp 账户', 'varchar(50)', 'String', 'smtpEamil', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (19, '4', 'smtp_pwd', 'smtp 密码', 'varchar(100)', 'String', 'smtpPwd', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (20, '4', 'baidu_app_key', '百度文本识别的 appkey', 'varchar(100)', 'String', 'baiduAppKey', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (21, '4', 'baidu_secret_key', '百度文本识别的 secretkey', 'varchar(100)', 'String', 'baiduSecretKey', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 5, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (22, '4', 'geetest_id', '极验Id', 'varchar(100)', 'String', 'geetestId', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 6, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (23, '4', 'geetest_key', '极验Key', 'varchar(100)', 'String', 'geetestKey', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 7, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:39');
INSERT INTO `gen_table_column` VALUES (24, '5', 'nid', '通知自增 id', 'int(10)', 'Integer', 'nid', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47');
INSERT INTO `gen_table_column` VALUES (25, '5', 'notification_uid_action', '通知操作', 'varchar(100)', 'String', 'notificationUidAction', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47');
INSERT INTO `gen_table_column` VALUES (26, '5', 'notification_uid_subject_id', '附带的主题 id', 'int(10)', 'Integer', 'notificationUidSubjectId', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47');
INSERT INTO `gen_table_column` VALUES (27, '5', 'notification_uid', '用户 id', 'int(10)', 'Integer', 'notificationUid', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47');
INSERT INTO `gen_table_column` VALUES (28, '5', 'notification_uid_from_uid', '发送通知者 id', 'int(10)', 'Integer', 'notificationUidFromUid', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 5, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47');
INSERT INTO `gen_table_column` VALUES (29, '5', 'notification_uid_read_at', '通知阅读时间', 'datetime', 'Date', 'notificationUidReadAt', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'datetime', '', 6, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:47');
INSERT INTO `gen_table_column` VALUES (30, '6', 'tag_id', '标签 id', 'int(10)', 'Integer', 'tagId', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:55');
INSERT INTO `gen_table_column` VALUES (31, '6', 'tag_name', '标签名称', 'varchar(50)', 'String', 'tagName', '0', '0', '1', '1', '1', '1', '1', 'LIKE', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:55');
INSERT INTO `gen_table_column` VALUES (32, '6', 'topic_count', '话题标签数', 'int(10)', 'Integer', 'topicCount', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:55');
INSERT INTO `gen_table_column` VALUES (33, '6', 'tag_category_id', '标签所属板块 id', 'int(10)', 'Integer', 'tagCategoryId', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:26:55');
INSERT INTO `gen_table_column` VALUES (34, '7', 'thumbs_id', '标签 id', 'int(10)', 'Integer', 'thumbsId', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:01');
INSERT INTO `gen_table_column` VALUES (35, '7', 'thumbs_uid', '点赞者 id', 'int(10)', 'Integer', 'thumbsUid', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:01');
INSERT INTO `gen_table_column` VALUES (36, '7', 'thumbs_topic_id', '点赞话题 id', 'int(10)', 'Integer', 'thumbsTopicId', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:01');
INSERT INTO `gen_table_column` VALUES (37, '8', 'topic_id', '话题 id', 'int(10)', 'Integer', 'topicId', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (38, '8', 'title', '话题标题', 'varchar(50)', 'String', 'title', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (39, '8', 'topic_content', '话题内容', 'longtext', 'String', 'topicContent', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'editor', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (40, '8', 'comment_count', '评论总数', 'int(10)', 'Integer', 'commentCount', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (41, '8', 'topic_time', '发帖时间', 'datetime', 'Date', 'topicTime', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'datetime', '', 5, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (42, '8', 'topic_uid', '创建者 id', 'int(10)', 'Integer', 'topicUid', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 6, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (43, '8', 'topic_category_id', '所属板块 id', 'int(10)', 'Integer', 'topicCategoryId', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 7, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (44, '8', 'topic_tag_id', '所属标签 id', 'int(10)', 'Integer', 'topicTagId', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 8, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (45, '8', 'browse_count', '浏览量', 'int(10)', 'Integer', 'browseCount', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 9, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (46, '8', 'thumbs_up', '点赞数目', 'int(10)', 'Integer', 'thumbsUp', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 10, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:08');
INSERT INTO `gen_table_column` VALUES (47, '9', 'uid', '用户 id', 'int(10)', 'Integer', 'uid', '1', '1', NULL, '1', NULL, NULL, NULL, 'EQ', 'input', '', 1, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (48, '9', 'account', '昵称', 'varchar(50)', 'String', 'account', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 2, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (49, '9', 'password', '密码', 'varchar(100)', 'String', 'password', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 3, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (50, '9', 'telephone_number', '电话号码', 'varchar(20)', 'String', 'telephoneNumber', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 4, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (51, '9', 'avatar_address', '头像地址', 'varchar(100)', 'String', 'avatarAddress', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 5, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (52, '9', 'eamil', '邮箱', 'varchar(50)', 'String', 'eamil', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 6, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (53, '9', 'introduce', '介绍', 'varchar(50)', 'String', 'introduce', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 7, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (54, '9', 'create_time', '注册时间', 'datetime', 'Date', 'createTime', '0', '0', NULL, '1', NULL, NULL, NULL, 'EQ', 'datetime', '', 8, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (55, '9', 'topic_count', '话题数目', 'int(10)', 'Integer', 'topicCount', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 9, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (56, '9', 'comment_count', '评论数目', 'int(10)', 'Integer', 'commentCount', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 10, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (57, '9', 'nano_id', 'nanoId唯一身份标识', 'varchar(100)', 'String', 'nanoId', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 11, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (58, '9', 'url', '网址', 'varchar(50)', 'String', 'url', '0', '0', NULL, '1', '1', '1', '1', 'EQ', 'input', '', 12, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');
INSERT INTO `gen_table_column` VALUES (59, '9', 'user_state', '用户状态', 'int(2)', 'Integer', 'userState', '0', '0', '1', '1', '1', '1', '1', 'EQ', 'input', '', 13, 'admin', '2022-07-27 09:11:26', '', '2022-07-27 09:27:14');

-- ----------------------------
-- Table structure for notification
-- ----------------------------
DROP TABLE IF EXISTS `notification`;
CREATE TABLE `notification`  (
  `nid` int(10) NOT NULL AUTO_INCREMENT COMMENT '通知自增 id',
  `notification_uid_action` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '通知操作',
  `notification_uid_subject_id` int(10) NOT NULL COMMENT '附带的主题 id',
  `notification_uid` int(10) NOT NULL COMMENT '用户 id',
  `notification_uid_from_uid` int(10) NOT NULL COMMENT '发送通知者 id',
  `notification_uid_read_at` datetime NOT NULL COMMENT '通知阅读时间',
  PRIMARY KEY (`nid`) USING BTREE,
  INDEX `notificationUid`(`notification_uid`) USING BTREE,
  INDEX `notificationUidFromUid`(`notification_uid_from_uid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of notification
-- ----------------------------
INSERT INTO `notification` VALUES (1, 'xxx为您点赞', 1, 1, 2, '2022-07-21 09:46:51');
INSERT INTO `notification` VALUES (2, 'xxx为您点赞', 2, 2, 1, '2022-07-21 09:47:01');
INSERT INTO `notification` VALUES (3, 'xxx为您点赞', 3, 3, 4, '2022-03-04 00:00:00');
INSERT INTO `notification` VALUES (4, 'xxx为您点赞', 4, 4, 3, '2022-07-21 14:05:40');

-- ----------------------------
-- Table structure for qrtz_blob_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_blob_triggers`;
CREATE TABLE `qrtz_blob_triggers`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `trigger_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_name的外键',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
  `blob_data` blob NULL COMMENT '存放持久化Trigger对象',
  PRIMARY KEY (`sched_name`, `trigger_name`, `trigger_group`) USING BTREE,
  CONSTRAINT `qrtz_blob_triggers_ibfk_1` FOREIGN KEY (`sched_name`, `trigger_name`, `trigger_group`) REFERENCES `qrtz_triggers` (`sched_name`, `trigger_name`, `trigger_group`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = 'Blob类型的触发器表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_blob_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_calendars
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_calendars`;
CREATE TABLE `qrtz_calendars`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `calendar_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '日历名称',
  `calendar` blob NOT NULL COMMENT '存放持久化calendar对象',
  PRIMARY KEY (`sched_name`, `calendar_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '日历信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_calendars
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_cron_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_cron_triggers`;
CREATE TABLE `qrtz_cron_triggers`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `trigger_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_name的外键',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
  `cron_expression` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'cron表达式',
  `time_zone_id` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '时区',
  PRIMARY KEY (`sched_name`, `trigger_name`, `trigger_group`) USING BTREE,
  CONSTRAINT `qrtz_cron_triggers_ibfk_1` FOREIGN KEY (`sched_name`, `trigger_name`, `trigger_group`) REFERENCES `qrtz_triggers` (`sched_name`, `trigger_name`, `trigger_group`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = 'Cron类型的触发器表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_cron_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_fired_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_fired_triggers`;
CREATE TABLE `qrtz_fired_triggers`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `entry_id` varchar(95) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度器实例id',
  `trigger_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_name的外键',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
  `instance_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度器实例名',
  `fired_time` bigint(13) NOT NULL COMMENT '触发的时间',
  `sched_time` bigint(13) NOT NULL COMMENT '定时器制定的时间',
  `priority` int(11) NOT NULL COMMENT '优先级',
  `state` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '状态',
  `job_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '任务名称',
  `job_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '任务组名',
  `is_nonconcurrent` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否并发',
  `requests_recovery` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '是否接受恢复执行',
  PRIMARY KEY (`sched_name`, `entry_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '已触发的触发器表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_fired_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_job_details
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_job_details`;
CREATE TABLE `qrtz_job_details`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `job_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '任务名称',
  `job_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '任务组名',
  `description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '相关介绍',
  `job_class_name` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '执行任务类名称',
  `is_durable` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '是否持久化',
  `is_nonconcurrent` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '是否并发',
  `is_update_data` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '是否更新数据',
  `requests_recovery` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '是否接受恢复执行',
  `job_data` blob NULL COMMENT '存放持久化job对象',
  PRIMARY KEY (`sched_name`, `job_name`, `job_group`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '任务详细信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_job_details
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_locks
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_locks`;
CREATE TABLE `qrtz_locks`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `lock_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '悲观锁名称',
  PRIMARY KEY (`sched_name`, `lock_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '存储的悲观锁信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_locks
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_paused_trigger_grps
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_paused_trigger_grps`;
CREATE TABLE `qrtz_paused_trigger_grps`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
  PRIMARY KEY (`sched_name`, `trigger_group`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '暂停的触发器表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_paused_trigger_grps
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_scheduler_state
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_scheduler_state`;
CREATE TABLE `qrtz_scheduler_state`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `instance_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '实例名称',
  `last_checkin_time` bigint(13) NOT NULL COMMENT '上次检查时间',
  `checkin_interval` bigint(13) NOT NULL COMMENT '检查间隔时间',
  PRIMARY KEY (`sched_name`, `instance_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '调度器状态表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_scheduler_state
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_simple_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_simple_triggers`;
CREATE TABLE `qrtz_simple_triggers`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `trigger_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_name的外键',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
  `repeat_count` bigint(7) NOT NULL COMMENT '重复的次数统计',
  `repeat_interval` bigint(12) NOT NULL COMMENT '重复的间隔时间',
  `times_triggered` bigint(10) NOT NULL COMMENT '已经触发的次数',
  PRIMARY KEY (`sched_name`, `trigger_name`, `trigger_group`) USING BTREE,
  CONSTRAINT `qrtz_simple_triggers_ibfk_1` FOREIGN KEY (`sched_name`, `trigger_name`, `trigger_group`) REFERENCES `qrtz_triggers` (`sched_name`, `trigger_name`, `trigger_group`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '简单触发器的信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_simple_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_simprop_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_simprop_triggers`;
CREATE TABLE `qrtz_simprop_triggers`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `trigger_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_name的外键',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
  `str_prop_1` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'String类型的trigger的第一个参数',
  `str_prop_2` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'String类型的trigger的第二个参数',
  `str_prop_3` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'String类型的trigger的第三个参数',
  `int_prop_1` int(11) NULL DEFAULT NULL COMMENT 'int类型的trigger的第一个参数',
  `int_prop_2` int(11) NULL DEFAULT NULL COMMENT 'int类型的trigger的第二个参数',
  `long_prop_1` bigint(20) NULL DEFAULT NULL COMMENT 'long类型的trigger的第一个参数',
  `long_prop_2` bigint(20) NULL DEFAULT NULL COMMENT 'long类型的trigger的第二个参数',
  `dec_prop_1` decimal(13, 4) NULL DEFAULT NULL COMMENT 'decimal类型的trigger的第一个参数',
  `dec_prop_2` decimal(13, 4) NULL DEFAULT NULL COMMENT 'decimal类型的trigger的第二个参数',
  `bool_prop_1` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'Boolean类型的trigger的第一个参数',
  `bool_prop_2` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'Boolean类型的trigger的第二个参数',
  PRIMARY KEY (`sched_name`, `trigger_name`, `trigger_group`) USING BTREE,
  CONSTRAINT `qrtz_simprop_triggers_ibfk_1` FOREIGN KEY (`sched_name`, `trigger_name`, `trigger_group`) REFERENCES `qrtz_triggers` (`sched_name`, `trigger_name`, `trigger_group`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '同步机制的行锁表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_simprop_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_triggers`;
CREATE TABLE `qrtz_triggers`  (
  `sched_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调度名称',
  `trigger_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '触发器的名字',
  `trigger_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '触发器所属组的名字',
  `job_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_job_details表job_name的外键',
  `job_group` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'qrtz_job_details表job_group的外键',
  `description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '相关介绍',
  `next_fire_time` bigint(13) NULL DEFAULT NULL COMMENT '上一次触发时间（毫秒）',
  `prev_fire_time` bigint(13) NULL DEFAULT NULL COMMENT '下一次触发时间（默认为-1表示不触发）',
  `priority` int(11) NULL DEFAULT NULL COMMENT '优先级',
  `trigger_state` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '触发器状态',
  `trigger_type` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '触发器的类型',
  `start_time` bigint(13) NOT NULL COMMENT '开始时间',
  `end_time` bigint(13) NULL DEFAULT NULL COMMENT '结束时间',
  `calendar_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '日程表名称',
  `misfire_instr` smallint(2) NULL DEFAULT NULL COMMENT '补偿执行的策略',
  `job_data` blob NULL COMMENT '存放持久化job对象',
  PRIMARY KEY (`sched_name`, `trigger_name`, `trigger_group`) USING BTREE,
  INDEX `sched_name`(`sched_name`, `job_name`, `job_group`) USING BTREE,
  CONSTRAINT `qrtz_triggers_ibfk_1` FOREIGN KEY (`sched_name`, `job_name`, `job_group`) REFERENCES `qrtz_job_details` (`sched_name`, `job_name`, `job_group`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '触发器详细信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of qrtz_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for sys_config
-- ----------------------------
DROP TABLE IF EXISTS `sys_config`;
CREATE TABLE `sys_config`  (
  `config_id` int(5) NOT NULL AUTO_INCREMENT COMMENT '参数主键',
  `config_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '参数名称',
  `config_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '参数键名',
  `config_value` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '参数键值',
  `config_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'N' COMMENT '系统内置（Y是 N否）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`config_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '参数配置表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_config
-- ----------------------------
INSERT INTO `sys_config` VALUES (1, '主框架页-默认皮肤样式名称', 'sys.index.skinName', 'skin-blue', 'Y', 'admin', '2022-07-27 09:03:51', '', NULL, '蓝色 skin-blue、绿色 skin-green、紫色 skin-purple、红色 skin-red、黄色 skin-yellow');
INSERT INTO `sys_config` VALUES (2, '用户管理-账号初始密码', 'sys.user.initPassword', '123456', 'Y', 'admin', '2022-07-27 09:03:51', '', NULL, '初始化密码 123456');
INSERT INTO `sys_config` VALUES (3, '主框架页-侧边栏主题', 'sys.index.sideTheme', 'theme-dark', 'Y', 'admin', '2022-07-27 09:03:51', '', NULL, '深色主题theme-dark，浅色主题theme-light');
INSERT INTO `sys_config` VALUES (4, '账号自助-验证码开关', 'sys.account.captchaEnabled', 'true', 'Y', 'admin', '2022-07-27 09:03:51', '', NULL, '是否开启验证码功能（true开启，false关闭）');
INSERT INTO `sys_config` VALUES (5, '账号自助-是否开启用户注册功能', 'sys.account.registerUser', 'false', 'Y', 'admin', '2022-07-27 09:03:51', '', NULL, '是否开启注册用户功能（true开启，false关闭）');

-- ----------------------------
-- Table structure for sys_dept
-- ----------------------------
DROP TABLE IF EXISTS `sys_dept`;
CREATE TABLE `sys_dept`  (
  `dept_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '部门id',
  `parent_id` bigint(20) NULL DEFAULT 0 COMMENT '父部门id',
  `ancestors` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '祖级列表',
  `dept_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '部门名称',
  `order_num` int(4) NULL DEFAULT 0 COMMENT '显示顺序',
  `leader` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '负责人',
  `phone` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '联系电话',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '部门状态（0正常 1停用）',
  `del_flag` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '删除标志（0代表存在 2代表删除）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`dept_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 110 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '部门表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dept
-- ----------------------------
INSERT INTO `sys_dept` VALUES (100, 0, '0', '若依科技', 0, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (101, 100, '0,100', '深圳总公司', 1, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (102, 100, '0,100', '长沙分公司', 2, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (103, 101, '0,100,101', '研发部门', 1, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (104, 101, '0,100,101', '市场部门', 2, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (105, 101, '0,100,101', '测试部门', 3, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (106, 101, '0,100,101', '财务部门', 4, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (107, 101, '0,100,101', '运维部门', 5, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (108, 102, '0,100,102', '市场部门', 1, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);
INSERT INTO `sys_dept` VALUES (109, 102, '0,100,102', '财务部门', 2, '若依', '15888888888', 'ry@qq.com', '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL);

-- ----------------------------
-- Table structure for sys_dict_data
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict_data`;
CREATE TABLE `sys_dict_data`  (
  `dict_code` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '字典编码',
  `dict_sort` int(4) NULL DEFAULT 0 COMMENT '字典排序',
  `dict_label` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典标签',
  `dict_value` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典键值',
  `dict_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `css_class` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '样式属性（其他样式扩展）',
  `list_class` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '表格回显样式',
  `is_default` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'N' COMMENT '是否默认（Y是 N否）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '状态（0正常 1停用）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`dict_code`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '字典数据表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dict_data
-- ----------------------------
INSERT INTO `sys_dict_data` VALUES (1, 1, '男', '0', 'sys_user_sex', '', '', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '性别男');
INSERT INTO `sys_dict_data` VALUES (2, 2, '女', '1', 'sys_user_sex', '', '', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '性别女');
INSERT INTO `sys_dict_data` VALUES (3, 3, '未知', '2', 'sys_user_sex', '', '', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '性别未知');
INSERT INTO `sys_dict_data` VALUES (4, 1, '显示', '0', 'sys_show_hide', '', 'primary', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '显示菜单');
INSERT INTO `sys_dict_data` VALUES (5, 2, '隐藏', '1', 'sys_show_hide', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '隐藏菜单');
INSERT INTO `sys_dict_data` VALUES (6, 1, '正常', '0', 'sys_normal_disable', '', 'primary', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (7, 2, '停用', '1', 'sys_normal_disable', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '停用状态');
INSERT INTO `sys_dict_data` VALUES (8, 1, '正常', '0', 'sys_job_status', '', 'primary', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (9, 2, '暂停', '1', 'sys_job_status', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '停用状态');
INSERT INTO `sys_dict_data` VALUES (10, 1, '默认', 'DEFAULT', 'sys_job_group', '', '', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '默认分组');
INSERT INTO `sys_dict_data` VALUES (11, 2, '系统', 'SYSTEM', 'sys_job_group', '', '', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '系统分组');
INSERT INTO `sys_dict_data` VALUES (12, 1, '是', 'Y', 'sys_yes_no', '', 'primary', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '系统默认是');
INSERT INTO `sys_dict_data` VALUES (13, 2, '否', 'N', 'sys_yes_no', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '系统默认否');
INSERT INTO `sys_dict_data` VALUES (14, 1, '通知', '1', 'sys_notice_type', '', 'warning', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '通知');
INSERT INTO `sys_dict_data` VALUES (15, 2, '公告', '2', 'sys_notice_type', '', 'success', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '公告');
INSERT INTO `sys_dict_data` VALUES (16, 1, '正常', '0', 'sys_notice_status', '', 'primary', 'Y', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (17, 2, '关闭', '1', 'sys_notice_status', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '关闭状态');
INSERT INTO `sys_dict_data` VALUES (18, 1, '新增', '1', 'sys_oper_type', '', 'info', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '新增操作');
INSERT INTO `sys_dict_data` VALUES (19, 2, '修改', '2', 'sys_oper_type', '', 'info', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '修改操作');
INSERT INTO `sys_dict_data` VALUES (20, 3, '删除', '3', 'sys_oper_type', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '删除操作');
INSERT INTO `sys_dict_data` VALUES (21, 4, '授权', '4', 'sys_oper_type', '', 'primary', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '授权操作');
INSERT INTO `sys_dict_data` VALUES (22, 5, '导出', '5', 'sys_oper_type', '', 'warning', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '导出操作');
INSERT INTO `sys_dict_data` VALUES (23, 6, '导入', '6', 'sys_oper_type', '', 'warning', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '导入操作');
INSERT INTO `sys_dict_data` VALUES (24, 7, '强退', '7', 'sys_oper_type', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '强退操作');
INSERT INTO `sys_dict_data` VALUES (25, 8, '生成代码', '8', 'sys_oper_type', '', 'warning', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '生成操作');
INSERT INTO `sys_dict_data` VALUES (26, 9, '清空数据', '9', 'sys_oper_type', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '清空操作');
INSERT INTO `sys_dict_data` VALUES (27, 1, '成功', '0', 'sys_common_status', '', 'primary', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '正常状态');
INSERT INTO `sys_dict_data` VALUES (28, 2, '失败', '1', 'sys_common_status', '', 'danger', 'N', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '停用状态');

-- ----------------------------
-- Table structure for sys_dict_type
-- ----------------------------
DROP TABLE IF EXISTS `sys_dict_type`;
CREATE TABLE `sys_dict_type`  (
  `dict_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '字典主键',
  `dict_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典名称',
  `dict_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '字典类型',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '状态（0正常 1停用）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`dict_id`) USING BTREE,
  UNIQUE INDEX `dict_type`(`dict_type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 11 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '字典类型表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_dict_type
-- ----------------------------
INSERT INTO `sys_dict_type` VALUES (1, '用户性别', 'sys_user_sex', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '用户性别列表');
INSERT INTO `sys_dict_type` VALUES (2, '菜单状态', 'sys_show_hide', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '菜单状态列表');
INSERT INTO `sys_dict_type` VALUES (3, '系统开关', 'sys_normal_disable', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '系统开关列表');
INSERT INTO `sys_dict_type` VALUES (4, '任务状态', 'sys_job_status', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '任务状态列表');
INSERT INTO `sys_dict_type` VALUES (5, '任务分组', 'sys_job_group', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '任务分组列表');
INSERT INTO `sys_dict_type` VALUES (6, '系统是否', 'sys_yes_no', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '系统是否列表');
INSERT INTO `sys_dict_type` VALUES (7, '通知类型', 'sys_notice_type', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '通知类型列表');
INSERT INTO `sys_dict_type` VALUES (8, '通知状态', 'sys_notice_status', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '通知状态列表');
INSERT INTO `sys_dict_type` VALUES (9, '操作类型', 'sys_oper_type', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '操作类型列表');
INSERT INTO `sys_dict_type` VALUES (10, '系统状态', 'sys_common_status', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '登录状态列表');

-- ----------------------------
-- Table structure for sys_job
-- ----------------------------
DROP TABLE IF EXISTS `sys_job`;
CREATE TABLE `sys_job`  (
  `job_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '任务ID',
  `job_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '任务名称',
  `job_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'DEFAULT' COMMENT '任务组名',
  `invoke_target` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调用目标字符串',
  `cron_expression` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT 'cron执行表达式',
  `misfire_policy` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '3' COMMENT '计划执行错误策略（1立即执行 2执行一次 3放弃执行）',
  `concurrent` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '1' COMMENT '是否并发执行（0允许 1禁止）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '状态（0正常 1暂停）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '备注信息',
  PRIMARY KEY (`job_id`, `job_name`, `job_group`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '定时任务调度表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_job
-- ----------------------------
INSERT INTO `sys_job` VALUES (1, '系统默认（无参）', 'DEFAULT', 'ryTask.ryNoParams', '0/10 * * * * ?', '3', '1', '1', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_job` VALUES (2, '系统默认（有参）', 'DEFAULT', 'ryTask.ryParams(\'ry\')', '0/15 * * * * ?', '3', '1', '1', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_job` VALUES (3, '系统默认（多参）', 'DEFAULT', 'ryTask.ryMultipleParams(\'ry\', true, 2000L, 316.50D, 100)', '0/20 * * * * ?', '3', '1', '1', 'admin', '2022-07-27 09:03:51', '', NULL, '');

-- ----------------------------
-- Table structure for sys_job_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_job_log`;
CREATE TABLE `sys_job_log`  (
  `job_log_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '任务日志ID',
  `job_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '任务名称',
  `job_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '任务组名',
  `invoke_target` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '调用目标字符串',
  `job_message` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '日志信息',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '执行状态（0正常 1失败）',
  `exception_info` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '异常信息',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`job_log_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '定时任务调度日志表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_job_log
-- ----------------------------

-- ----------------------------
-- Table structure for sys_logininfor
-- ----------------------------
DROP TABLE IF EXISTS `sys_logininfor`;
CREATE TABLE `sys_logininfor`  (
  `info_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '访问ID',
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '用户账号',
  `ipaddr` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '登录IP地址',
  `login_location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '登录地点',
  `browser` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '浏览器类型',
  `os` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '操作系统',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '登录状态（0成功 1失败）',
  `msg` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '提示消息',
  `login_time` datetime NULL DEFAULT NULL COMMENT '访问时间',
  PRIMARY KEY (`info_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 118 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '系统访问记录' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_logininfor
-- ----------------------------
INSERT INTO `sys_logininfor` VALUES (100, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-27 09:09:10');
INSERT INTO `sys_logininfor` VALUES (101, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '1', '验证码错误', '2022-07-29 11:17:56');
INSERT INTO `sys_logininfor` VALUES (102, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-07-29 11:18:03');
INSERT INTO `sys_logininfor` VALUES (103, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-02 09:30:29');
INSERT INTO `sys_logininfor` VALUES (104, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-03 23:06:46');
INSERT INTO `sys_logininfor` VALUES (105, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-04 08:31:40');
INSERT INTO `sys_logininfor` VALUES (106, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-06 23:28:33');
INSERT INTO `sys_logininfor` VALUES (107, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '1', '验证码错误', '2022-08-07 07:51:49');
INSERT INTO `sys_logininfor` VALUES (108, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-07 07:51:54');
INSERT INTO `sys_logininfor` VALUES (109, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '退出成功', '2022-08-07 07:52:01');
INSERT INTO `sys_logininfor` VALUES (110, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '1', '验证码已失效', '2022-08-07 07:54:05');
INSERT INTO `sys_logininfor` VALUES (111, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '1', '验证码错误', '2022-08-07 07:54:09');
INSERT INTO `sys_logininfor` VALUES (112, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-07 07:54:13');
INSERT INTO `sys_logininfor` VALUES (113, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '退出成功', '2022-08-07 07:54:31');
INSERT INTO `sys_logininfor` VALUES (114, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '1', '验证码已失效', '2022-08-07 08:09:25');
INSERT INTO `sys_logininfor` VALUES (115, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-07 08:09:29');
INSERT INTO `sys_logininfor` VALUES (116, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '退出成功', '2022-08-07 08:11:17');
INSERT INTO `sys_logininfor` VALUES (117, 'admin', '127.0.0.1', '内网IP', 'Chrome 10', 'Windows 10', '0', '登录成功', '2022-08-07 08:55:01');

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `menu_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '菜单ID',
  `menu_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '菜单名称',
  `parent_id` bigint(20) NULL DEFAULT 0 COMMENT '父菜单ID',
  `order_num` int(4) NULL DEFAULT 0 COMMENT '显示顺序',
  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '路由地址',
  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '组件路径',
  `query` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '路由参数',
  `is_frame` int(1) NULL DEFAULT 1 COMMENT '是否为外链（0是 1否）',
  `is_cache` int(1) NULL DEFAULT 0 COMMENT '是否缓存（0缓存 1不缓存）',
  `menu_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '菜单类型（M目录 C菜单 F按钮）',
  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '菜单状态（0显示 1隐藏）',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '菜单状态（0正常 1停用）',
  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '权限标识',
  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '#' COMMENT '菜单图标',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '备注',
  PRIMARY KEY (`menu_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2060 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '菜单权限表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES (1, '系统管理', 0, 10, 'system', NULL, '', 1, 0, 'M', '1', '0', '', 'system', 'admin', '2022-07-27 09:03:51', 'admin', '2022-08-06 23:34:20', '系统管理目录');
INSERT INTO `sys_menu` VALUES (2, '系统监控', 0, 11, 'monitor', NULL, '', 1, 0, 'M', '0', '0', '', 'monitor', 'admin', '2022-07-27 09:03:51', 'admin', '2022-07-27 09:56:35', '系统监控目录');
INSERT INTO `sys_menu` VALUES (3, '系统工具', 0, 11, 'tool', NULL, '', 1, 0, 'M', '1', '0', '', 'tool', 'admin', '2022-07-27 09:03:51', 'admin', '2022-07-27 09:57:13', '系统工具目录');
INSERT INTO `sys_menu` VALUES (4, 'StoreHouse', 0, 12, 'http://localhost:8081', NULL, '', 0, 0, 'M', '0', '0', '', 'guide', 'admin', '2022-07-27 09:03:51', 'admin', '2022-07-27 09:56:51', '若依官网地址');
INSERT INTO `sys_menu` VALUES (100, '用户管理', 1, 1, 'user', 'system/user/index', '', 1, 0, 'C', '0', '0', 'system:user:list', 'user', 'admin', '2022-07-27 09:03:51', '', NULL, '用户管理菜单');
INSERT INTO `sys_menu` VALUES (101, '角色管理', 1, 2, 'role', 'system/role/index', '', 1, 0, 'C', '0', '0', 'system:role:list', 'peoples', 'admin', '2022-07-27 09:03:51', '', NULL, '角色管理菜单');
INSERT INTO `sys_menu` VALUES (102, '菜单管理', 1, 3, 'menu', 'system/menu/index', '', 1, 0, 'C', '0', '0', 'system:menu:list', 'tree-table', 'admin', '2022-07-27 09:03:51', '', NULL, '菜单管理菜单');
INSERT INTO `sys_menu` VALUES (103, '部门管理', 1, 4, 'dept', 'system/dept/index', '', 1, 0, 'C', '0', '0', 'system:dept:list', 'tree', 'admin', '2022-07-27 09:03:51', '', NULL, '部门管理菜单');
INSERT INTO `sys_menu` VALUES (104, '岗位管理', 1, 5, 'post', 'system/post/index', '', 1, 0, 'C', '0', '0', 'system:post:list', 'post', 'admin', '2022-07-27 09:03:51', '', NULL, '岗位管理菜单');
INSERT INTO `sys_menu` VALUES (105, '字典管理', 1, 6, 'dict', 'system/dict/index', '', 1, 0, 'C', '0', '0', 'system:dict:list', 'dict', 'admin', '2022-07-27 09:03:51', '', NULL, '字典管理菜单');
INSERT INTO `sys_menu` VALUES (106, '参数设置', 1, 7, 'config', 'system/config/index', '', 1, 0, 'C', '0', '0', 'system:config:list', 'edit', 'admin', '2022-07-27 09:03:51', '', NULL, '参数设置菜单');
INSERT INTO `sys_menu` VALUES (107, '通知公告', 1, 8, 'notice', 'system/notice/index', '', 1, 0, 'C', '0', '0', 'system:notice:list', 'message', 'admin', '2022-07-27 09:03:51', '', NULL, '通知公告菜单');
INSERT INTO `sys_menu` VALUES (108, '日志管理', 1, 9, 'log', '', '', 1, 0, 'M', '0', '0', '', 'log', 'admin', '2022-07-27 09:03:51', '', NULL, '日志管理菜单');
INSERT INTO `sys_menu` VALUES (109, '在线用户', 2, 1, 'online', 'monitor/online/index', '', 1, 0, 'C', '0', '0', 'monitor:online:list', 'online', 'admin', '2022-07-27 09:03:51', '', NULL, '在线用户菜单');
INSERT INTO `sys_menu` VALUES (110, '定时任务', 2, 2, 'job', 'monitor/job/index', '', 1, 0, 'C', '0', '0', 'monitor:job:list', 'job', 'admin', '2022-07-27 09:03:51', '', NULL, '定时任务菜单');
INSERT INTO `sys_menu` VALUES (111, '数据监控', 2, 3, 'druid', 'monitor/druid/index', '', 1, 0, 'C', '0', '0', 'monitor:druid:list', 'druid', 'admin', '2022-07-27 09:03:51', '', NULL, '数据监控菜单');
INSERT INTO `sys_menu` VALUES (112, '服务监控', 2, 4, 'server', 'monitor/server/index', '', 1, 0, 'C', '0', '0', 'monitor:server:list', 'server', 'admin', '2022-07-27 09:03:51', '', NULL, '服务监控菜单');
INSERT INTO `sys_menu` VALUES (113, '缓存监控', 2, 5, 'cache', 'monitor/cache/index', '', 1, 0, 'C', '0', '0', 'monitor:cache:list', 'redis', 'admin', '2022-07-27 09:03:51', '', NULL, '缓存监控菜单');
INSERT INTO `sys_menu` VALUES (114, '缓存列表', 2, 6, 'cacheList', 'monitor/cache/list', '', 1, 0, 'C', '0', '0', 'monitor:cache:list', 'redis-list', 'admin', '2022-07-27 09:03:51', '', NULL, '缓存列表菜单');
INSERT INTO `sys_menu` VALUES (115, '表单构建', 3, 1, 'build', 'tool/build/index', '', 1, 0, 'C', '1', '0', 'tool:build:list', 'build', 'admin', '2022-07-27 09:03:51', 'admin', '2022-08-06 23:33:07', '表单构建菜单');
INSERT INTO `sys_menu` VALUES (116, '代码生成', 3, 2, 'gen', 'tool/gen/index', '', 1, 0, 'C', '1', '0', 'tool:gen:list', 'code', 'admin', '2022-07-27 09:03:51', 'admin', '2022-08-06 23:33:16', '代码生成菜单');
INSERT INTO `sys_menu` VALUES (117, '系统接口', 3, 3, 'swagger', 'tool/swagger/index', '', 1, 0, 'C', '0', '0', 'tool:swagger:list', 'swagger', 'admin', '2022-07-27 09:03:51', '', NULL, '系统接口菜单');
INSERT INTO `sys_menu` VALUES (500, '操作日志', 108, 1, 'operlog', 'monitor/operlog/index', '', 1, 0, 'C', '0', '0', 'monitor:operlog:list', 'form', 'admin', '2022-07-27 09:03:51', '', NULL, '操作日志菜单');
INSERT INTO `sys_menu` VALUES (501, '登录日志', 108, 2, 'logininfor', 'monitor/logininfor/index', '', 1, 0, 'C', '0', '0', 'monitor:logininfor:list', 'logininfor', 'admin', '2022-07-27 09:03:51', '', NULL, '登录日志菜单');
INSERT INTO `sys_menu` VALUES (1000, '用户查询', 100, 1, '', '', '', 1, 0, 'F', '0', '0', 'system:user:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1001, '用户新增', 100, 2, '', '', '', 1, 0, 'F', '0', '0', 'system:user:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1002, '用户修改', 100, 3, '', '', '', 1, 0, 'F', '0', '0', 'system:user:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1003, '用户删除', 100, 4, '', '', '', 1, 0, 'F', '0', '0', 'system:user:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1004, '用户导出', 100, 5, '', '', '', 1, 0, 'F', '0', '0', 'system:user:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1005, '用户导入', 100, 6, '', '', '', 1, 0, 'F', '0', '0', 'system:user:import', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1006, '重置密码', 100, 7, '', '', '', 1, 0, 'F', '0', '0', 'system:user:resetPwd', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1007, '角色查询', 101, 1, '', '', '', 1, 0, 'F', '0', '0', 'system:role:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1008, '角色新增', 101, 2, '', '', '', 1, 0, 'F', '0', '0', 'system:role:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1009, '角色修改', 101, 3, '', '', '', 1, 0, 'F', '0', '0', 'system:role:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1010, '角色删除', 101, 4, '', '', '', 1, 0, 'F', '0', '0', 'system:role:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1011, '角色导出', 101, 5, '', '', '', 1, 0, 'F', '0', '0', 'system:role:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1012, '菜单查询', 102, 1, '', '', '', 1, 0, 'F', '0', '0', 'system:menu:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1013, '菜单新增', 102, 2, '', '', '', 1, 0, 'F', '0', '0', 'system:menu:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1014, '菜单修改', 102, 3, '', '', '', 1, 0, 'F', '0', '0', 'system:menu:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1015, '菜单删除', 102, 4, '', '', '', 1, 0, 'F', '0', '0', 'system:menu:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1016, '部门查询', 103, 1, '', '', '', 1, 0, 'F', '0', '0', 'system:dept:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1017, '部门新增', 103, 2, '', '', '', 1, 0, 'F', '0', '0', 'system:dept:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1018, '部门修改', 103, 3, '', '', '', 1, 0, 'F', '0', '0', 'system:dept:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1019, '部门删除', 103, 4, '', '', '', 1, 0, 'F', '0', '0', 'system:dept:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1020, '岗位查询', 104, 1, '', '', '', 1, 0, 'F', '0', '0', 'system:post:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1021, '岗位新增', 104, 2, '', '', '', 1, 0, 'F', '0', '0', 'system:post:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1022, '岗位修改', 104, 3, '', '', '', 1, 0, 'F', '0', '0', 'system:post:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1023, '岗位删除', 104, 4, '', '', '', 1, 0, 'F', '0', '0', 'system:post:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1024, '岗位导出', 104, 5, '', '', '', 1, 0, 'F', '0', '0', 'system:post:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1025, '字典查询', 105, 1, '#', '', '', 1, 0, 'F', '0', '0', 'system:dict:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1026, '字典新增', 105, 2, '#', '', '', 1, 0, 'F', '0', '0', 'system:dict:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1027, '字典修改', 105, 3, '#', '', '', 1, 0, 'F', '0', '0', 'system:dict:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1028, '字典删除', 105, 4, '#', '', '', 1, 0, 'F', '0', '0', 'system:dict:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1029, '字典导出', 105, 5, '#', '', '', 1, 0, 'F', '0', '0', 'system:dict:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1030, '参数查询', 106, 1, '#', '', '', 1, 0, 'F', '0', '0', 'system:config:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1031, '参数新增', 106, 2, '#', '', '', 1, 0, 'F', '0', '0', 'system:config:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1032, '参数修改', 106, 3, '#', '', '', 1, 0, 'F', '0', '0', 'system:config:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1033, '参数删除', 106, 4, '#', '', '', 1, 0, 'F', '0', '0', 'system:config:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1034, '参数导出', 106, 5, '#', '', '', 1, 0, 'F', '0', '0', 'system:config:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1035, '公告查询', 107, 1, '#', '', '', 1, 0, 'F', '0', '0', 'system:notice:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1036, '公告新增', 107, 2, '#', '', '', 1, 0, 'F', '0', '0', 'system:notice:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1037, '公告修改', 107, 3, '#', '', '', 1, 0, 'F', '0', '0', 'system:notice:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1038, '公告删除', 107, 4, '#', '', '', 1, 0, 'F', '0', '0', 'system:notice:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1039, '操作查询', 500, 1, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:operlog:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1040, '操作删除', 500, 2, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:operlog:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1041, '日志导出', 500, 4, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:operlog:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1042, '登录查询', 501, 1, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:logininfor:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1043, '登录删除', 501, 2, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:logininfor:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1044, '日志导出', 501, 3, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:logininfor:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1045, '在线查询', 109, 1, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:online:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1046, '批量强退', 109, 2, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:online:batchLogout', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1047, '单条强退', 109, 3, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:online:forceLogout', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1048, '任务查询', 110, 1, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:job:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1049, '任务新增', 110, 2, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:job:add', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1050, '任务修改', 110, 3, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:job:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1051, '任务删除', 110, 4, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:job:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1052, '状态修改', 110, 5, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:job:changeStatus', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1053, '任务导出', 110, 7, '#', '', '', 1, 0, 'F', '0', '0', 'monitor:job:export', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1054, '生成查询', 115, 1, '#', '', '', 1, 0, 'F', '0', '0', 'tool:gen:query', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1055, '生成修改', 115, 2, '#', '', '', 1, 0, 'F', '0', '0', 'tool:gen:edit', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1056, '生成删除', 115, 3, '#', '', '', 1, 0, 'F', '0', '0', 'tool:gen:remove', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1057, '导入代码', 115, 2, '#', '', '', 1, 0, 'F', '0', '0', 'tool:gen:import', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1058, '预览代码', 115, 4, '#', '', '', 1, 0, 'F', '0', '0', 'tool:gen:preview', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (1059, '生成代码', 115, 5, '#', '', '', 1, 0, 'F', '0', '0', 'tool:gen:code', '#', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2000, '板块', 0, 2, 'ShCategory', 'ShCategory/ShCategory/index', NULL, 1, 0, 'C', '0', '0', 'ShCategory:ShCategory:list', 'clipboard', 'admin', '2022-07-27 09:30:25', 'admin', '2022-07-27 10:01:09', '板块菜单');
INSERT INTO `sys_menu` VALUES (2001, '板块查询', 2000, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCategory:ShCategory:query', '#', 'admin', '2022-07-27 09:30:25', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2002, '板块新增', 2000, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCategory:ShCategory:add', '#', 'admin', '2022-07-27 09:30:25', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2003, '板块修改', 2000, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCategory:ShCategory:edit', '#', 'admin', '2022-07-27 09:30:25', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2004, '板块删除', 2000, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCategory:ShCategory:remove', '#', 'admin', '2022-07-27 09:30:25', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2005, '板块导出', 2000, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCategory:ShCategory:export', '#', 'admin', '2022-07-27 09:30:25', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2006, '收藏', 0, 3, 'ShCollection', 'ShCollection/ShCollection/index', NULL, 1, 0, 'C', '0', '0', 'ShCollection:ShCollection:list', 'star', 'admin', '2022-07-27 09:30:28', 'admin', '2022-07-27 10:04:19', '收藏菜单');
INSERT INTO `sys_menu` VALUES (2007, '收藏查询', 2006, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCollection:ShCollection:query', '#', 'admin', '2022-07-27 09:30:28', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2008, '收藏新增', 2006, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCollection:ShCollection:add', '#', 'admin', '2022-07-27 09:30:28', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2009, '收藏修改', 2006, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCollection:ShCollection:edit', '#', 'admin', '2022-07-27 09:30:28', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2010, '收藏删除', 2006, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCollection:ShCollection:remove', '#', 'admin', '2022-07-27 09:30:28', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2011, '收藏导出', 2006, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShCollection:ShCollection:export', '#', 'admin', '2022-07-27 09:30:28', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2018, '评论', 0, 4, 'ShComment', 'ShComment/ShComment/index', NULL, 1, 0, 'C', '0', '0', 'ShComment:ShComment:list', 'size', 'admin', '2022-07-27 09:30:36', 'admin', '2022-07-27 10:02:24', '评论菜单');
INSERT INTO `sys_menu` VALUES (2019, '评论查询', 2018, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShComment:ShComment:query', '#', 'admin', '2022-07-27 09:30:36', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2020, '评论新增', 2018, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShComment:ShComment:add', '#', 'admin', '2022-07-27 09:30:36', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2021, '评论修改', 2018, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShComment:ShComment:edit', '#', 'admin', '2022-07-27 09:30:36', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2022, '评论删除', 2018, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShComment:ShComment:remove', '#', 'admin', '2022-07-27 09:30:36', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2023, '评论导出', 2018, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShComment:ShComment:export', '#', 'admin', '2022-07-27 09:30:36', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2024, '配置', 0, 8, 'ShConfig', 'ShConfig/ShConfig/index', NULL, 1, 0, 'C', '0', '0', 'ShConfig:ShConfig:list', 'table', 'admin', '2022-07-27 09:30:39', 'admin', '2022-07-27 10:06:46', '配置菜单');
INSERT INTO `sys_menu` VALUES (2025, '配置查询', 2024, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShConfig:ShConfig:query', '#', 'admin', '2022-07-27 09:30:39', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2026, '配置新增', 2024, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShConfig:ShConfig:add', '#', 'admin', '2022-07-27 09:30:39', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2027, '配置修改', 2024, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShConfig:ShConfig:edit', '#', 'admin', '2022-07-27 09:30:39', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2028, '配置删除', 2024, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShConfig:ShConfig:remove', '#', 'admin', '2022-07-27 09:30:39', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2029, '配置导出', 2024, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShConfig:ShConfig:export', '#', 'admin', '2022-07-27 09:30:39', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2030, '通知', 0, 5, 'ShNotification', 'ShNotification/ShNotification/index', NULL, 1, 0, 'C', '0', '0', 'ShNotification:ShNotification:list', 'wechat', 'admin', '2022-07-27 09:30:42', 'admin', '2022-07-27 10:02:03', '通知菜单');
INSERT INTO `sys_menu` VALUES (2031, '通知查询', 2030, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShNotification:ShNotification:query', '#', 'admin', '2022-07-27 09:30:42', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2032, '通知新增', 2030, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShNotification:ShNotification:add', '#', 'admin', '2022-07-27 09:30:42', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2033, '通知修改', 2030, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShNotification:ShNotification:edit', '#', 'admin', '2022-07-27 09:30:42', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2034, '通知删除', 2030, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShNotification:ShNotification:remove', '#', 'admin', '2022-07-27 09:30:42', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2035, '通知导出', 2030, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShNotification:ShNotification:export', '#', 'admin', '2022-07-27 09:30:42', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2036, '标签', 0, 6, 'ShTag', 'ShTag/ShTag/index', NULL, 1, 0, 'C', '0', '0', 'ShTag:ShTag:list', 'tab', 'admin', '2022-07-27 09:30:46', 'admin', '2022-07-27 10:02:39', '标签菜单');
INSERT INTO `sys_menu` VALUES (2037, '标签查询', 2036, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTag:ShTag:query', '#', 'admin', '2022-07-27 09:30:46', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2038, '标签新增', 2036, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTag:ShTag:add', '#', 'admin', '2022-07-27 09:30:46', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2039, '标签修改', 2036, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTag:ShTag:edit', '#', 'admin', '2022-07-27 09:30:46', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2040, '标签删除', 2036, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTag:ShTag:remove', '#', 'admin', '2022-07-27 09:30:46', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2041, '标签导出', 2036, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTag:ShTag:export', '#', 'admin', '2022-07-27 09:30:46', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2042, '点赞', 0, 7, 'ShThumbs', 'ShThumbs/ShThumbs/index', NULL, 1, 0, 'C', '0', '0', 'ShThumbs:ShThumbs:list', 'button', 'admin', '2022-07-27 09:30:48', 'admin', '2022-07-27 10:04:10', '点赞菜单');
INSERT INTO `sys_menu` VALUES (2043, '点赞查询', 2042, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShThumbs:ShThumbs:query', '#', 'admin', '2022-07-27 09:30:48', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2044, '点赞新增', 2042, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShThumbs:ShThumbs:add', '#', 'admin', '2022-07-27 09:30:48', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2045, '点赞修改', 2042, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShThumbs:ShThumbs:edit', '#', 'admin', '2022-07-27 09:30:48', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2046, '点赞删除', 2042, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShThumbs:ShThumbs:remove', '#', 'admin', '2022-07-27 09:30:48', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2047, '点赞导出', 2042, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShThumbs:ShThumbs:export', '#', 'admin', '2022-07-27 09:30:48', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2048, '文章', 0, 1, 'ShTopic', 'ShTopic/ShTopic/index', NULL, 1, 0, 'C', '0', '0', 'ShTopic:ShTopic:list', 'edit', 'admin', '2022-07-27 09:30:52', 'admin', '2022-07-27 09:48:05', '文章菜单');
INSERT INTO `sys_menu` VALUES (2049, '文章查询', 2048, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTopic:ShTopic:query', '#', 'admin', '2022-07-27 09:30:52', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2050, '文章新增', 2048, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTopic:ShTopic:add', '#', 'admin', '2022-07-27 09:30:52', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2051, '文章修改', 2048, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTopic:ShTopic:edit', '#', 'admin', '2022-07-27 09:30:52', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2052, '文章删除', 2048, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTopic:ShTopic:remove', '#', 'admin', '2022-07-27 09:30:52', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2053, '文章导出', 2048, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'ShTopic:ShTopic:export', '#', 'admin', '2022-07-27 09:30:52', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2054, '用户', 0, 0, 'Shuserinfo', 'Shuserinfo/Shuserinfo/index', NULL, 1, 0, 'C', '0', '0', 'Shuserinfo:Shuserinfo:list', 'user', 'admin', '2022-07-27 09:30:54', 'admin', '2022-07-27 10:00:52', '用户菜单');
INSERT INTO `sys_menu` VALUES (2055, '用户查询', 2054, 1, '#', '', NULL, 1, 0, 'F', '0', '0', 'Shuserinfo:Shuserinfo:query', '#', 'admin', '2022-07-27 09:30:54', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2056, '用户新增', 2054, 2, '#', '', NULL, 1, 0, 'F', '0', '0', 'Shuserinfo:Shuserinfo:add', '#', 'admin', '2022-07-27 09:30:54', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2057, '用户修改', 2054, 3, '#', '', NULL, 1, 0, 'F', '0', '0', 'Shuserinfo:Shuserinfo:edit', '#', 'admin', '2022-07-27 09:30:54', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2058, '用户删除', 2054, 4, '#', '', NULL, 1, 0, 'F', '0', '0', 'Shuserinfo:Shuserinfo:remove', '#', 'admin', '2022-07-27 09:30:54', '', NULL, '');
INSERT INTO `sys_menu` VALUES (2059, '用户导出', 2054, 5, '#', '', NULL, 1, 0, 'F', '0', '0', 'Shuserinfo:Shuserinfo:export', '#', 'admin', '2022-07-27 09:30:54', '', NULL, '');

-- ----------------------------
-- Table structure for sys_notice
-- ----------------------------
DROP TABLE IF EXISTS `sys_notice`;
CREATE TABLE `sys_notice`  (
  `notice_id` int(4) NOT NULL AUTO_INCREMENT COMMENT '公告ID',
  `notice_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '公告标题',
  `notice_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '公告类型（1通知 2公告）',
  `notice_content` longblob NULL COMMENT '公告内容',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '公告状态（0正常 1关闭）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`notice_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '通知公告表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_notice
-- ----------------------------
INSERT INTO `sys_notice` VALUES (1, '温馨提醒：2018-07-01 若依新版本发布啦', '2', 0xE696B0E78988E69CACE58685E5AEB9, '0', 'admin', '2022-07-27 09:03:51', '', NULL, '管理员');
INSERT INTO `sys_notice` VALUES (2, '维护通知：2018-07-01 若依系统凌晨维护', '1', 0xE7BBB4E68AA4E58685E5AEB9, '0', 'admin', '2022-07-27 09:03:51', '', NULL, '管理员');

-- ----------------------------
-- Table structure for sys_oper_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_oper_log`;
CREATE TABLE `sys_oper_log`  (
  `oper_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '日志主键',
  `title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '模块标题',
  `business_type` int(2) NULL DEFAULT 0 COMMENT '业务类型（0其它 1新增 2修改 3删除）',
  `method` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '方法名称',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '请求方式',
  `operator_type` int(1) NULL DEFAULT 0 COMMENT '操作类别（0其它 1后台用户 2手机端用户）',
  `oper_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '操作人员',
  `dept_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '部门名称',
  `oper_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '请求URL',
  `oper_ip` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '主机地址',
  `oper_location` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '操作地点',
  `oper_param` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '请求参数',
  `json_result` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '返回参数',
  `status` int(1) NULL DEFAULT 0 COMMENT '操作状态（0正常 1异常）',
  `error_msg` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '错误消息',
  `oper_time` datetime NULL DEFAULT NULL COMMENT '操作时间',
  PRIMARY KEY (`oper_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 182 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '操作日志记录' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_oper_log
-- ----------------------------
INSERT INTO `sys_oper_log` VALUES (100, '代码生成', 6, 'com.ruoyi.generator.controller.GenController.importTableSave()', 'POST', 1, 'admin', NULL, '/tool/gen/importTable', '127.0.0.1', '内网IP', 'config,topic,comment,thumbs,collection,tag,category,notification,userinfo', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:11:26');
INSERT INTO `sys_oper_log` VALUES (101, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"Shuserinfo\",\"className\":\"Shuserinfo\",\"columns\":[{\"capJavaField\":\"Uid\",\"columnComment\":\"用户 id\",\"columnId\":47,\"columnName\":\"uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"uid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":9,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"Account\",\"columnComment\":\"昵称\",\"columnId\":48,\"columnName\":\"account\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"account\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":9,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"Password\",\"columnComment\":\"密码\",\"columnId\":49,\"columnName\":\"password\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"password\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":9,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"TelephoneNumber\",\"columnComment\":\"电话号码\",\"columnId\":50,\"columnName\":\"telephone_number\",\"columnType\":\"varchar(20)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"telephoneNu', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:16:05');
INSERT INTO `sys_oper_log` VALUES (102, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShComment\",\"className\":\"ShComment\",\"columns\":[{\"capJavaField\":\"CommentId\",\"columnComment\":\"评论 id\",\"columnId\":10,\"columnName\":\"comment_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"commentId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":3,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"Content\",\"columnComment\":\"评论内容\",\"columnId\":11,\"columnName\":\"content\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"editor\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"content\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":3,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CommentUid\",\"columnComment\":\"评论者 id\",\"columnId\":12,\"columnName\":\"comment_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"commentUid\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":3,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CommentTopicId\",\"columnComment\":\"评论所属话题 id\",\"columnId\":13,\"columnName\":\"comment_topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:18:09');
INSERT INTO `sys_oper_log` VALUES (103, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShTopic\",\"className\":\"ShTopic\",\"columns\":[{\"capJavaField\":\"TopicId\",\"columnComment\":\"话题 id\",\"columnId\":37,\"columnName\":\"topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"topicId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":8,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"Title\",\"columnComment\":\"话题标题\",\"columnId\":38,\"columnName\":\"title\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"title\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":8,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"TopicContent\",\"columnComment\":\"话题内容\",\"columnId\":39,\"columnName\":\"topic_content\",\"columnType\":\"longtext\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"editor\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"topicContent\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":8,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CommentCount\",\"columnComment\":\"评论总数\",\"columnId\":40,\"columnName\":\"comment_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"commen', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:18:53');
INSERT INTO `sys_oper_log` VALUES (104, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShCategory\",\"className\":\"ShCategory\",\"columns\":[{\"capJavaField\":\"CategoryId\",\"columnComment\":\"板块 id\",\"columnId\":1,\"columnName\":\"category_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:25\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"categoryId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":1,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CategoryTitle\",\"columnComment\":\"板块标题\",\"columnId\":2,\"columnName\":\"category_title\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"categoryTitle\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":1,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"TopicCount\",\"columnComment\":\"板块话题数\",\"columnId\":3,\"columnName\":\"topic_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"topicCount\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":3,\"superColumn\":false,\"tableId\":1,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CommentCount\",\"columnComment\":\"板块评论数\",\"columnId\":4,\"columnName\":\"comment_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"jav', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:19:56');
INSERT INTO `sys_oper_log` VALUES (105, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShTag\",\"className\":\"ShTag\",\"columns\":[{\"capJavaField\":\"TagId\",\"columnComment\":\"标签 id\",\"columnId\":30,\"columnName\":\"tag_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"tagId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":6,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"TagName\",\"columnComment\":\"标签名称\",\"columnId\":31,\"columnName\":\"tag_name\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"tagName\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"LIKE\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":6,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"TopicCount\",\"columnComment\":\"话题标签数\",\"columnId\":32,\"columnName\":\"topic_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"topicCount\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":3,\"superColumn\":false,\"tableId\":6,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"TagCategoryId\",\"columnComment\":\"标签所属板块 id\",\"columnId\":33,\"columnName\":\"tag_category_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"tagCategoryId\",\"javaT', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:20:47');
INSERT INTO `sys_oper_log` VALUES (106, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShThumbs\",\"className\":\"ShThumbs\",\"columns\":[{\"capJavaField\":\"ThumbsId\",\"columnComment\":\"标签 id\",\"columnId\":34,\"columnName\":\"thumbs_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"thumbsId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":7,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"ThumbsUid\",\"columnComment\":\"点赞者 id\",\"columnId\":35,\"columnName\":\"thumbs_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"thumbsUid\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":2,\"superColumn\":false,\"tableId\":7,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"ThumbsTopicId\",\"columnComment\":\"点赞话题 id\",\"columnId\":36,\"columnName\":\"thumbs_topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"thumbsTopicId\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":3,\"superColumn\":false,\"tableId\":7,\"updateBy\":\"\",\"usableColumn\":false}],\"crud\":true,\"functionAuthor\":\"JanYork\",\"functionName\":\"点赞\",\"genPath\":\"/\",\"genType\":\"0\",\"moduleName\":\"ShThumbs\",\"options\":\"{}\",\"packageName\":\"com.ruoyi.ShThumbs\",\"params\":{},\"sub\":false,\"tableComment\":\"点赞表\",\"tableId\":7,\"tableName\":\"thumbs\",\"tplCategory\":\"crud\",\"tree\":false}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:22:46');
INSERT INTO `sys_oper_log` VALUES (107, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShNotification\",\"className\":\"ShNotification\",\"columns\":[{\"capJavaField\":\"Nid\",\"columnComment\":\"通知自增 id\",\"columnId\":24,\"columnName\":\"nid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"nid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":5,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"NotificationUidAction\",\"columnComment\":\"通知操作\",\"columnId\":25,\"columnName\":\"notification_uid_action\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"notificationUidAction\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":5,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"NotificationUidSubjectId\",\"columnComment\":\"附带的主题 id\",\"columnId\":26,\"columnName\":\"notification_uid_subject_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"notificationUidSubjectId\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":5,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"NotificationUid\",\"columnComment\":\"用户 id\",\"columnId\":27,\"columnName\":\"notification_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:24:16');
INSERT INTO `sys_oper_log` VALUES (108, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShCollection\",\"className\":\"ShCollection\",\"columns\":[{\"capJavaField\":\"CollectionId\",\"columnComment\":\"收藏表 id\",\"columnId\":7,\"columnName\":\"collection_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"collectionId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":2,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CollectionUid\",\"columnComment\":\"收藏者 id\",\"columnId\":8,\"columnName\":\"collection_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"collectionUid\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":2,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"CollectionTopicId\",\"columnComment\":\"收藏的贴子 id\",\"columnId\":9,\"columnName\":\"collection_topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"collectionTopicId\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":2,\"updateBy\":\"\",\"usableColumn\":false}],\"crud\":true,\"functionAuthor\":\"JanYork\",\"functionName\":\"收藏\",\"genPath\":\"/\",\"genType\":\"0\",\"moduleName\":\"ShCollection\",\"options\":\"{\\\"parentMenuId\\\":1}\",\"packageName\":\"com.ruoyi.ShCollection\",\"params\":{\"parentMenuId\":1},\"parentMenuId\":\"1\",\"sub\":false,\"tableComment\":\"文章收藏表\",\"tableId\":2,\"table', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:25:23');
INSERT INTO `sys_oper_log` VALUES (109, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShConfig\",\"className\":\"ShConfig\",\"columns\":[{\"capJavaField\":\"Cid\",\"columnComment\":\"标签 id\",\"columnId\":17,\"columnName\":\"cid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"cid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"SmtpEamil\",\"columnComment\":\"smtp 账户\",\"columnId\":18,\"columnName\":\"smtp_eamil\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"smtpEamil\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"SmtpPwd\",\"columnComment\":\"smtp 密码\",\"columnId\":19,\"columnName\":\"smtp_pwd\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"smtpPwd\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"usableColumn\":false},{\"capJavaField\":\"BaiduAppKey\",\"columnComment\":\"百度文本识别的 appkey\",\"columnId\":20,\"columnName\":\"baidu_app_key\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaFiel', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:04');
INSERT INTO `sys_oper_log` VALUES (110, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShCategory\",\"className\":\"ShCategory\",\"columns\":[{\"capJavaField\":\"CategoryId\",\"columnComment\":\"板块 id\",\"columnId\":1,\"columnName\":\"category_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:25\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"categoryId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":1,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:19:56\",\"usableColumn\":false},{\"capJavaField\":\"CategoryTitle\",\"columnComment\":\"板块标题\",\"columnId\":2,\"columnName\":\"category_title\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"categoryTitle\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":1,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:19:56\",\"usableColumn\":false},{\"capJavaField\":\"TopicCount\",\"columnComment\":\"板块话题数\",\"columnId\":3,\"columnName\":\"topic_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"topicCount\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":3,\"superColumn\":false,\"tableId\":1,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:19:56\",\"usableColumn\":false},{\"capJavaField\":\"CommentCount\",\"columnComment\":\"板块评论数\",\"columnId\":4,\"columnName\":\"comment_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":fal', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:12');
INSERT INTO `sys_oper_log` VALUES (111, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShCollection\",\"className\":\"ShCollection\",\"columns\":[{\"capJavaField\":\"CollectionId\",\"columnComment\":\"收藏表 id\",\"columnId\":7,\"columnName\":\"collection_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"collectionId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":2,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:25:23\",\"usableColumn\":false},{\"capJavaField\":\"CollectionUid\",\"columnComment\":\"收藏者 id\",\"columnId\":8,\"columnName\":\"collection_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"collectionUid\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":2,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:25:23\",\"usableColumn\":false},{\"capJavaField\":\"CollectionTopicId\",\"columnComment\":\"收藏的贴子 id\",\"columnId\":9,\"columnName\":\"collection_topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"collectionTopicId\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":2,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:25:23\",\"usableColumn\":false}],\"crud\":true,\"functionAuthor\":\"JanYork\",\"functionName\":\"收藏\",\"genPath\":\"/\",\"genType\":\"0\",\"moduleName\":\"ShCollection\",\"options\":\"{\\\"parentMenuId\\\":\\\"1\\\"}\",\"packageName\":\"com.ruoyi.ShCol', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:18');
INSERT INTO `sys_oper_log` VALUES (112, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShComment\",\"className\":\"ShComment\",\"columns\":[{\"capJavaField\":\"CommentId\",\"columnComment\":\"评论 id\",\"columnId\":10,\"columnName\":\"comment_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"commentId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":3,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:18:09\",\"usableColumn\":false},{\"capJavaField\":\"Content\",\"columnComment\":\"评论内容\",\"columnId\":11,\"columnName\":\"content\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"editor\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"content\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":3,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:18:09\",\"usableColumn\":false},{\"capJavaField\":\"CommentUid\",\"columnComment\":\"评论者 id\",\"columnId\":12,\"columnName\":\"comment_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"commentUid\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":3,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:18:09\",\"usableColumn\":false},{\"capJavaField\":\"CommentTopicId\",\"columnComment\":\"评论所属话题 id\",\"columnId\":13,\"columnName\":\"comment_topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increme', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:23');
INSERT INTO `sys_oper_log` VALUES (113, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShConfig\",\"className\":\"ShConfig\",\"columns\":[{\"capJavaField\":\"Cid\",\"columnComment\":\"标签 id\",\"columnId\":17,\"columnName\":\"cid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"cid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:26:04\",\"usableColumn\":false},{\"capJavaField\":\"SmtpEamil\",\"columnComment\":\"smtp 账户\",\"columnId\":18,\"columnName\":\"smtp_eamil\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"smtpEamil\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:26:04\",\"usableColumn\":false},{\"capJavaField\":\"SmtpPwd\",\"columnComment\":\"smtp 密码\",\"columnId\":19,\"columnName\":\"smtp_pwd\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"smtpPwd\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:26:04\",\"usableColumn\":false},{\"capJavaField\":\"BaiduAppKey\",\"columnComment\":\"百度文本识别的 appkey\",\"columnId\":20,\"columnName\":\"baidu_app_key\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"i', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:31');
INSERT INTO `sys_oper_log` VALUES (114, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShConfig\",\"className\":\"ShConfig\",\"columns\":[{\"capJavaField\":\"Cid\",\"columnComment\":\"标签 id\",\"columnId\":17,\"columnName\":\"cid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"cid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:26:31\",\"usableColumn\":false},{\"capJavaField\":\"SmtpEamil\",\"columnComment\":\"smtp 账户\",\"columnId\":18,\"columnName\":\"smtp_eamil\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"smtpEamil\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:26:31\",\"usableColumn\":false},{\"capJavaField\":\"SmtpPwd\",\"columnComment\":\"smtp 密码\",\"columnId\":19,\"columnName\":\"smtp_pwd\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"smtpPwd\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":4,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:26:31\",\"usableColumn\":false},{\"capJavaField\":\"BaiduAppKey\",\"columnComment\":\"百度文本识别的 appkey\",\"columnId\":20,\"columnName\":\"baidu_app_key\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"i', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:39');
INSERT INTO `sys_oper_log` VALUES (115, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShNotification\",\"className\":\"ShNotification\",\"columns\":[{\"capJavaField\":\"Nid\",\"columnComment\":\"通知自增 id\",\"columnId\":24,\"columnName\":\"nid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"nid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":5,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:24:16\",\"usableColumn\":false},{\"capJavaField\":\"NotificationUidAction\",\"columnComment\":\"通知操作\",\"columnId\":25,\"columnName\":\"notification_uid_action\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"notificationUidAction\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":5,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:24:16\",\"usableColumn\":false},{\"capJavaField\":\"NotificationUidSubjectId\",\"columnComment\":\"附带的主题 id\",\"columnId\":26,\"columnName\":\"notification_uid_subject_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"notificationUidSubjectId\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":5,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:24:16\",\"usableColumn\":false},{\"capJavaField\":\"NotificationUid\",\"columnComment\":\"用户 id\",\"columnId\":27,\"columnName\":\"notification_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createT', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:47');
INSERT INTO `sys_oper_log` VALUES (116, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShTag\",\"className\":\"ShTag\",\"columns\":[{\"capJavaField\":\"TagId\",\"columnComment\":\"标签 id\",\"columnId\":30,\"columnName\":\"tag_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"tagId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":6,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:20:47\",\"usableColumn\":false},{\"capJavaField\":\"TagName\",\"columnComment\":\"标签名称\",\"columnId\":31,\"columnName\":\"tag_name\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"tagName\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"LIKE\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":6,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:20:47\",\"usableColumn\":false},{\"capJavaField\":\"TopicCount\",\"columnComment\":\"话题标签数\",\"columnId\":32,\"columnName\":\"topic_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"topicCount\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":3,\"superColumn\":false,\"tableId\":6,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:20:47\",\"usableColumn\":false},{\"capJavaField\":\"TagCategoryId\",\"columnComment\":\"标签所属板块 id\",\"columnId\":33,\"columnName\":\"tag_category_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:26:55');
INSERT INTO `sys_oper_log` VALUES (117, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShThumbs\",\"className\":\"ShThumbs\",\"columns\":[{\"capJavaField\":\"ThumbsId\",\"columnComment\":\"标签 id\",\"columnId\":34,\"columnName\":\"thumbs_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"thumbsId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":7,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:22:46\",\"usableColumn\":false},{\"capJavaField\":\"ThumbsUid\",\"columnComment\":\"点赞者 id\",\"columnId\":35,\"columnName\":\"thumbs_uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"thumbsUid\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":2,\"superColumn\":false,\"tableId\":7,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:22:46\",\"usableColumn\":false},{\"capJavaField\":\"ThumbsTopicId\",\"columnComment\":\"点赞话题 id\",\"columnId\":36,\"columnName\":\"thumbs_topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"javaField\":\"thumbsTopicId\",\"javaType\":\"Integer\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":false,\"sort\":3,\"superColumn\":false,\"tableId\":7,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:22:46\",\"usableColumn\":false}],\"crud\":true,\"functionAuthor\":\"JanYork\",\"functionName\":\"点赞\",\"genPath\":\"/\",\"genType\":\"0\",\"moduleName\":\"ShThumbs\",\"options\":\"{\\\"parentMenuId\\\":1}\",\"packageName\":\"com.ruoyi.ShThumbs\",\"params\":{\"parentMenuId\":1},\"parentMenuId\":\"1\",\"sub\":false,\"tableComment\":\"点赞表', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:27:01');
INSERT INTO `sys_oper_log` VALUES (118, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"ShTopic\",\"className\":\"ShTopic\",\"columns\":[{\"capJavaField\":\"TopicId\",\"columnComment\":\"话题 id\",\"columnId\":37,\"columnName\":\"topic_id\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"topicId\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":8,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:18:53\",\"usableColumn\":false},{\"capJavaField\":\"Title\",\"columnComment\":\"话题标题\",\"columnId\":38,\"columnName\":\"title\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"title\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":8,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:18:53\",\"usableColumn\":false},{\"capJavaField\":\"TopicContent\",\"columnComment\":\"话题内容\",\"columnId\":39,\"columnName\":\"topic_content\",\"columnType\":\"longtext\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"editor\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"topicContent\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":8,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:18:53\",\"usableColumn\":false},{\"capJavaField\":\"CommentCount\",\"columnComment\":\"评论总数\",\"columnId\":40,\"columnName\":\"comment_count\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":tru', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:27:08');
INSERT INTO `sys_oper_log` VALUES (119, '代码生成', 2, 'com.ruoyi.generator.controller.GenController.editSave()', 'PUT', 1, 'admin', NULL, '/tool/gen', '127.0.0.1', '内网IP', '{\"businessName\":\"Shuserinfo\",\"className\":\"Shuserinfo\",\"columns\":[{\"capJavaField\":\"Uid\",\"columnComment\":\"用户 id\",\"columnId\":47,\"columnName\":\"uid\",\"columnType\":\"int(10)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":false,\"htmlType\":\"input\",\"increment\":true,\"insert\":true,\"isIncrement\":\"1\",\"isInsert\":\"1\",\"isPk\":\"1\",\"javaField\":\"uid\",\"javaType\":\"Integer\",\"list\":false,\"params\":{},\"pk\":true,\"query\":false,\"queryType\":\"EQ\",\"required\":false,\"sort\":1,\"superColumn\":false,\"tableId\":9,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:16:05\",\"usableColumn\":false},{\"capJavaField\":\"Account\",\"columnComment\":\"昵称\",\"columnId\":48,\"columnName\":\"account\",\"columnType\":\"varchar(50)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"account\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":2,\"superColumn\":false,\"tableId\":9,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:16:05\",\"usableColumn\":false},{\"capJavaField\":\"Password\",\"columnComment\":\"密码\",\"columnId\":49,\"columnName\":\"password\",\"columnType\":\"varchar(100)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"isEdit\":\"1\",\"isIncrement\":\"0\",\"isInsert\":\"1\",\"isList\":\"1\",\"isPk\":\"0\",\"isQuery\":\"1\",\"isRequired\":\"1\",\"javaField\":\"password\",\"javaType\":\"String\",\"list\":true,\"params\":{},\"pk\":false,\"query\":true,\"queryType\":\"EQ\",\"required\":true,\"sort\":3,\"superColumn\":false,\"tableId\":9,\"updateBy\":\"\",\"updateTime\":\"2022-07-27 09:16:05\",\"usableColumn\":false},{\"capJavaField\":\"TelephoneNumber\",\"columnComment\":\"电话号码\",\"columnId\":50,\"columnName\":\"telephone_number\",\"columnType\":\"varchar(20)\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:11:26\",\"dictType\":\"\",\"edit\":true,\"htmlType\":\"input\",\"increment\":false,\"insert\":true,\"is', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:27:14');
INSERT INTO `sys_oper_log` VALUES (120, '代码生成', 8, 'com.ruoyi.generator.controller.GenController.batchGenCode()', 'GET', 1, 'admin', NULL, '/tool/gen/batchGenCode', '127.0.0.1', '内网IP', '{}', NULL, 0, NULL, '2022-07-27 09:27:18');
INSERT INTO `sys_oper_log` VALUES (121, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/4', '127.0.0.1', '内网IP', '{menuId=4}', '{\"msg\":\"菜单已分配,不允许删除\",\"code\":500}', 0, NULL, '2022-07-27 09:37:17');
INSERT INTO `sys_oper_log` VALUES (122, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/4', '127.0.0.1', '内网IP', '{menuId=4}', '{\"msg\":\"菜单已分配,不允许删除\",\"code\":500}', 0, NULL, '2022-07-27 09:37:22');
INSERT INTO `sys_oper_log` VALUES (123, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"guide\",\"isCache\":\"0\",\"isFrame\":\"0\",\"menuId\":4,\"menuName\":\"StoreHouse\",\"menuType\":\"M\",\"orderNum\":4,\"params\":{},\"parentId\":0,\"path\":\"http://localhost:8081\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:39:43');
INSERT INTO `sys_oper_log` VALUES (124, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShTopic/ShTopic/index\",\"createTime\":\"2022-07-27 09:30:52\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2048,\"menuName\":\"文章\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"path\":\"ShTopic\",\"perms\":\"ShTopic:ShTopic:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:43:15');
INSERT INTO `sys_oper_log` VALUES (125, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShTopic/ShTopic/index\",\"createTime\":\"2022-07-27 09:30:52\",\"icon\":\"edit\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2048,\"menuName\":\"文章\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"parentId\":1,\"path\":\"ShTopic\",\"perms\":\"ShTopic:ShTopic:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:44:06');
INSERT INTO `sys_oper_log` VALUES (126, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"tool\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":3,\"menuName\":\"系统工具\",\"menuType\":\"M\",\"orderNum\":3,\"params\":{},\"parentId\":0,\"path\":\"tool\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"1\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:46:57');
INSERT INTO `sys_oper_log` VALUES (127, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShTopic/ShTopic/index\",\"createTime\":\"2022-07-27 09:30:52\",\"icon\":\"edit\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2048,\"menuName\":\"文章\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"parentId\":0,\"path\":\"ShTopic\",\"perms\":\"ShTopic:ShTopic:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:48:05');
INSERT INTO `sys_oper_log` VALUES (128, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"Shuserinfo/Shuserinfo/index\",\"createTime\":\"2022-07-27 09:30:54\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2054,\"menuName\":\"用户\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"parentId\":0,\"path\":\"Shuserinfo\",\"perms\":\"Shuserinfo:Shuserinfo:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:53:52');
INSERT INTO `sys_oper_log` VALUES (129, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"Shuserinfo/Shuserinfo/index\",\"createTime\":\"2022-07-27 09:30:54\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2054,\"menuName\":\"用户\",\"menuType\":\"C\",\"orderNum\":0,\"params\":{},\"parentId\":0,\"path\":\"Shuserinfo\",\"perms\":\"Shuserinfo:Shuserinfo:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:54:21');
INSERT INTO `sys_oper_log` VALUES (130, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCategory/ShCategory/index\",\"createTime\":\"2022-07-27 09:30:25\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2000,\"menuName\":\"板块\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"parentId\":0,\"path\":\"ShCategory\",\"perms\":\"ShCategory:ShCategory:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:55:35');
INSERT INTO `sys_oper_log` VALUES (131, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:32\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2012,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:55:43');
INSERT INTO `sys_oper_log` VALUES (132, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCollection/ShCollection/index\",\"createTime\":\"2022-07-27 09:30:28\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2006,\"menuName\":\"收藏\",\"menuType\":\"C\",\"orderNum\":2,\"params\":{},\"parentId\":0,\"path\":\"ShCollection\",\"perms\":\"ShCollection:ShCollection:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:56:03');
INSERT INTO `sys_oper_log` VALUES (133, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"system\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":1,\"menuName\":\"系统管理\",\"menuType\":\"M\",\"orderNum\":10,\"params\":{},\"parentId\":0,\"path\":\"system\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:56:17');
INSERT INTO `sys_oper_log` VALUES (134, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"monitor\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2,\"menuName\":\"系统监控\",\"menuType\":\"M\",\"orderNum\":11,\"params\":{},\"parentId\":0,\"path\":\"monitor\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:56:35');
INSERT INTO `sys_oper_log` VALUES (135, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"guide\",\"isCache\":\"0\",\"isFrame\":\"0\",\"menuId\":4,\"menuName\":\"StoreHouse\",\"menuType\":\"M\",\"orderNum\":12,\"params\":{},\"parentId\":0,\"path\":\"http://localhost:8081\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:56:51');
INSERT INTO `sys_oper_log` VALUES (136, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"tool\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":3,\"menuName\":\"系统工具\",\"menuType\":\"M\",\"orderNum\":11,\"params\":{},\"parentId\":0,\"path\":\"tool\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"1\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:57:13');
INSERT INTO `sys_oper_log` VALUES (137, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:32\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2012,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":3,\"params\":{},\"parentId\":1,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:57:28');
INSERT INTO `sys_oper_log` VALUES (138, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:36\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2018,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":3,\"params\":{},\"parentId\":0,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:57:38');
INSERT INTO `sys_oper_log` VALUES (139, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCategory/ShCategory/index\",\"createTime\":\"2022-07-27 09:30:25\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2000,\"menuName\":\"板块\",\"menuType\":\"C\",\"orderNum\":2,\"params\":{},\"parentId\":0,\"path\":\"ShCategory\",\"perms\":\"ShCategory:ShCategory:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:57:56');
INSERT INTO `sys_oper_log` VALUES (140, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCollection/ShCollection/index\",\"createTime\":\"2022-07-27 09:30:28\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2006,\"menuName\":\"收藏\",\"menuType\":\"C\",\"orderNum\":3,\"params\":{},\"parentId\":0,\"path\":\"ShCollection\",\"perms\":\"ShCollection:ShCollection:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:58:04');
INSERT INTO `sys_oper_log` VALUES (141, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:36\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2018,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":4,\"params\":{},\"parentId\":0,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:58:09');
INSERT INTO `sys_oper_log` VALUES (142, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShNotification/ShNotification/index\",\"createTime\":\"2022-07-27 09:30:42\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2030,\"menuName\":\"通知\",\"menuType\":\"C\",\"orderNum\":5,\"params\":{},\"parentId\":0,\"path\":\"ShNotification\",\"perms\":\"ShNotification:ShNotification:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:58:25');
INSERT INTO `sys_oper_log` VALUES (143, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShTag/ShTag/index\",\"createTime\":\"2022-07-27 09:30:46\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2036,\"menuName\":\"标签\",\"menuType\":\"C\",\"orderNum\":6,\"params\":{},\"parentId\":0,\"path\":\"ShTag\",\"perms\":\"ShTag:ShTag:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 09:58:46');
INSERT INTO `sys_oper_log` VALUES (144, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:32\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2012,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":7,\"params\":{},\"parentId\":0,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"visible\":\"0\"}', '{\"msg\":\"修改菜单\'评论\'失败，菜单名称已存在\",\"code\":500}', 0, NULL, '2022-07-27 09:59:12');
INSERT INTO `sys_oper_log` VALUES (145, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:32\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2012,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":7,\"params\":{},\"parentId\":0,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"visible\":\"0\"}', '{\"msg\":\"修改菜单\'评论\'失败，菜单名称已存在\",\"code\":500}', 0, NULL, '2022-07-27 09:59:21');
INSERT INTO `sys_oper_log` VALUES (146, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2012', '127.0.0.1', '内网IP', '{menuId=2012}', '{\"msg\":\"存在子菜单,不允许删除\",\"code\":500}', 0, NULL, '2022-07-27 09:59:49');
INSERT INTO `sys_oper_log` VALUES (147, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShThumbs/ShThumbs/index\",\"createTime\":\"2022-07-27 09:30:48\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2042,\"menuName\":\"点赞\",\"menuType\":\"C\",\"orderNum\":7,\"params\":{},\"parentId\":0,\"path\":\"ShThumbs\",\"perms\":\"ShThumbs:ShThumbs:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:00:02');
INSERT INTO `sys_oper_log` VALUES (148, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShConfig/ShConfig/index\",\"createTime\":\"2022-07-27 09:30:39\",\"icon\":\"#\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2024,\"menuName\":\"配置\",\"menuType\":\"C\",\"orderNum\":8,\"params\":{},\"parentId\":0,\"path\":\"ShConfig\",\"perms\":\"ShConfig:ShConfig:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:00:11');
INSERT INTO `sys_oper_log` VALUES (149, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"Shuserinfo/Shuserinfo/index\",\"createTime\":\"2022-07-27 09:30:54\",\"icon\":\"user\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2054,\"menuName\":\"用户\",\"menuType\":\"C\",\"orderNum\":0,\"params\":{},\"parentId\":0,\"path\":\"Shuserinfo\",\"perms\":\"Shuserinfo:Shuserinfo:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:00:52');
INSERT INTO `sys_oper_log` VALUES (150, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCategory/ShCategory/index\",\"createTime\":\"2022-07-27 09:30:25\",\"icon\":\"clipboard\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2000,\"menuName\":\"板块\",\"menuType\":\"C\",\"orderNum\":2,\"params\":{},\"parentId\":0,\"path\":\"ShCategory\",\"perms\":\"ShCategory:ShCategory:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:01:09');
INSERT INTO `sys_oper_log` VALUES (151, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCollection/ShCollection/index\",\"createTime\":\"2022-07-27 09:30:28\",\"icon\":\"log\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2006,\"menuName\":\"收藏\",\"menuType\":\"C\",\"orderNum\":3,\"params\":{},\"parentId\":0,\"path\":\"ShCollection\",\"perms\":\"ShCollection:ShCollection:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:01:24');
INSERT INTO `sys_oper_log` VALUES (152, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:36\",\"icon\":\"wechat\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2018,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":4,\"params\":{},\"parentId\":0,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:01:54');
INSERT INTO `sys_oper_log` VALUES (153, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShNotification/ShNotification/index\",\"createTime\":\"2022-07-27 09:30:42\",\"icon\":\"wechat\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2030,\"menuName\":\"通知\",\"menuType\":\"C\",\"orderNum\":5,\"params\":{},\"parentId\":0,\"path\":\"ShNotification\",\"perms\":\"ShNotification:ShNotification:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:02:03');
INSERT INTO `sys_oper_log` VALUES (154, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShComment/ShComment/index\",\"createTime\":\"2022-07-27 09:30:36\",\"icon\":\"size\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2018,\"menuName\":\"评论\",\"menuType\":\"C\",\"orderNum\":4,\"params\":{},\"parentId\":0,\"path\":\"ShComment\",\"perms\":\"ShComment:ShComment:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:02:24');
INSERT INTO `sys_oper_log` VALUES (155, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShTag/ShTag/index\",\"createTime\":\"2022-07-27 09:30:46\",\"icon\":\"tab\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2036,\"menuName\":\"标签\",\"menuType\":\"C\",\"orderNum\":6,\"params\":{},\"parentId\":0,\"path\":\"ShTag\",\"perms\":\"ShTag:ShTag:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:02:39');
INSERT INTO `sys_oper_log` VALUES (156, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCollection/ShCollection/index\",\"createTime\":\"2022-07-27 09:30:28\",\"icon\":\"rate\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2006,\"menuName\":\"收藏\",\"menuType\":\"C\",\"orderNum\":3,\"params\":{},\"parentId\":0,\"path\":\"ShCollection\",\"perms\":\"ShCollection:ShCollection:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:02:59');
INSERT INTO `sys_oper_log` VALUES (157, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShThumbs/ShThumbs/index\",\"createTime\":\"2022-07-27 09:30:48\",\"icon\":\"button\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2042,\"menuName\":\"点赞\",\"menuType\":\"C\",\"orderNum\":7,\"params\":{},\"parentId\":0,\"path\":\"ShThumbs\",\"perms\":\"ShThumbs:ShThumbs:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:04:10');
INSERT INTO `sys_oper_log` VALUES (158, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShCollection/ShCollection/index\",\"createTime\":\"2022-07-27 09:30:28\",\"icon\":\"star\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2006,\"menuName\":\"收藏\",\"menuType\":\"C\",\"orderNum\":3,\"params\":{},\"parentId\":0,\"path\":\"ShCollection\",\"perms\":\"ShCollection:ShCollection:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:04:19');
INSERT INTO `sys_oper_log` VALUES (159, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShConfig/ShConfig/index\",\"createTime\":\"2022-07-27 09:30:39\",\"icon\":\"system\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2024,\"menuName\":\"配置\",\"menuType\":\"C\",\"orderNum\":8,\"params\":{},\"parentId\":0,\"path\":\"ShConfig\",\"perms\":\"ShConfig:ShConfig:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:04:34');
INSERT INTO `sys_oper_log` VALUES (160, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2012', '127.0.0.1', '内网IP', '{menuId=2012}', '{\"msg\":\"存在子菜单,不允许删除\",\"code\":500}', 0, NULL, '2022-07-27 10:06:03');
INSERT INTO `sys_oper_log` VALUES (161, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2013', '127.0.0.1', '内网IP', '{menuId=2013}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:09');
INSERT INTO `sys_oper_log` VALUES (162, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2014', '127.0.0.1', '内网IP', '{menuId=2014}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:11');
INSERT INTO `sys_oper_log` VALUES (163, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2015', '127.0.0.1', '内网IP', '{menuId=2015}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:14');
INSERT INTO `sys_oper_log` VALUES (164, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2016', '127.0.0.1', '内网IP', '{menuId=2016}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:17');
INSERT INTO `sys_oper_log` VALUES (165, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2017', '127.0.0.1', '内网IP', '{menuId=2017}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:20');
INSERT INTO `sys_oper_log` VALUES (166, '菜单管理', 3, 'com.ruoyi.web.controller.system.SysMenuController.remove()', 'DELETE', 1, 'admin', NULL, '/system/menu/2012', '127.0.0.1', '内网IP', '{menuId=2012}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:23');
INSERT INTO `sys_oper_log` VALUES (167, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"ShConfig/ShConfig/index\",\"createTime\":\"2022-07-27 09:30:39\",\"icon\":\"table\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":2024,\"menuName\":\"配置\",\"menuType\":\"C\",\"orderNum\":8,\"params\":{},\"parentId\":0,\"path\":\"ShConfig\",\"perms\":\"ShConfig:ShConfig:list\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"0\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:06:46');
INSERT INTO `sys_oper_log` VALUES (168, '用户', 5, 'com.ruoyi.Shuserinfo.controller.ShuserinfoController.export()', 'POST', 1, 'admin', NULL, '/Shuserinfo/Shuserinfo/export', '127.0.0.1', '内网IP', '{\"params\":{}}', NULL, 0, NULL, '2022-07-27 10:07:07');
INSERT INTO `sys_oper_log` VALUES (169, '个人信息', 2, 'com.ruoyi.web.controller.system.SysProfileController.updateProfile()', 'PUT', 1, 'admin', NULL, '/system/user/profile', '127.0.0.1', '内网IP', '{\"admin\":true,\"avatar\":\"\",\"createBy\":\"admin\",\"createTime\":\"2022-07-27 09:03:51\",\"delFlag\":\"0\",\"dept\":{\"ancestors\":\"0,100,101\",\"children\":[],\"deptId\":103,\"deptName\":\"研发部门\",\"leader\":\"若依\",\"orderNum\":1,\"params\":{\"@type\":\"java.util.HashMap\"},\"parentId\":101,\"status\":\"0\"},\"deptId\":103,\"email\":\"747945307@qq.com\",\"loginDate\":\"2022-07-27 09:03:51\",\"loginIp\":\"127.0.0.1\",\"nickName\":\"JanYork\",\"params\":{\"@type\":\"java.util.HashMap\"},\"phonenumber\":\"16670887668\",\"remark\":\"管理员\",\"roles\":[{\"admin\":true,\"dataScope\":\"1\",\"deptCheckStrictly\":false,\"flag\":false,\"menuCheckStrictly\":false,\"params\":{\"@type\":\"java.util.HashMap\"},\"roleId\":1,\"roleKey\":\"admin\",\"roleName\":\"超级管理员\",\"roleSort\":\"1\",\"status\":\"0\"}],\"sex\":\"0\",\"status\":\"0\",\"userId\":1,\"userName\":\"admin\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:15:19');
INSERT INTO `sys_oper_log` VALUES (170, '用户头像', 2, 'com.ruoyi.web.controller.system.SysProfileController.avatar()', 'POST', 1, 'admin', NULL, '/system/user/profile/avatar', '127.0.0.1', '内网IP', '', '{\"msg\":\"操作成功\",\"imgUrl\":\"/profile/avatar/2022/07/27/blob_20220727101552A001.jpeg\",\"code\":200}', 0, NULL, '2022-07-27 10:15:52');
INSERT INTO `sys_oper_log` VALUES (171, '文章', 2, 'com.ruoyi.ShTopic.controller.ShTopicController.edit()', 'PUT', 1, 'admin', NULL, '/ShTopic/ShTopic', '127.0.0.1', '内网IP', '{\"browseCount\":100,\"commentCount\":1,\"params\":{},\"thumbsUp\":20,\"title\":\"LaraVel\",\"topicCategoryId\":3,\"topicContent\":\"LaraVel----\",\"topicId\":2,\"topicTagId\":2,\"topicTime\":\"2022-07-20 00:00:00\",\"topicUid\":2}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-07-27 10:25:56');
INSERT INTO `sys_oper_log` VALUES (172, '用户', 2, 'com.ruoyi.Shuserinfo.controller.ShuserinfoController.edit()', 'PUT', 1, 'admin', NULL, '/Shuserinfo/Shuserinfo', '127.0.0.1', '内网IP', '{\"account\":\"王五\",\"commentCount\":1,\"createTime\":\"2022-07-20 14:15:10\",\"eamil\":\"234@qq.com\",\"introduce\":\"用户\",\"nanoId\":\"mdceF7BhHW5juamSjD\",\"params\":{},\"password\":\"234\",\"telephoneNumber\":\"17633333333\",\"topicCount\":1,\"uid\":2,\"userState\":0}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-02 09:32:10');
INSERT INTO `sys_oper_log` VALUES (173, '板块', 3, 'com.ruoyi.ShCategory.controller.ShCategoryController.remove()', 'DELETE', 1, 'admin', NULL, '/ShCategory/ShCategory/10', '127.0.0.1', '内网IP', '{categoryIds=10}', NULL, 1, '\r\n### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`storehouse`.`tag`, CONSTRAINT `tagCategoryId` FOREIGN KEY (`tag_category_id`) REFERENCES `category` (`category_id`))\r\n### The error may exist in file [C:\\Users\\woo-m\\Desktop\\RuoYi-Vue-master\\ruoyi-admin\\target\\classes\\mapper\\ShCategory\\ShCategoryMapper.xml]\r\n### The error may involve com.ruoyi.ShCategory.mapper.ShCategoryMapper.deleteShCategoryByCategoryIds-Inline\r\n### The error occurred while setting parameters\r\n### SQL: delete from category where category_id in           (               ?          )\r\n### Cause: java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`storehouse`.`tag`, CONSTRAINT `tagCategoryId` FOREIGN KEY (`tag_category_id`) REFERENCES `category` (`category_id`))\n; Cannot delete or update a parent row: a foreign key constraint fails (`storehouse`.`tag`, CONSTRAINT `tagCategoryId` FOREIGN KEY (`tag_category_id`) REFERENCES `category` (`category_id`)); nested exception is java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`storehouse`.`tag`, CONSTRAINT `tagCategoryId` FOREIGN KEY (`tag_category_id`) REFERENCES `category` (`category_id`))', '2022-08-04 08:33:38');
INSERT INTO `sys_oper_log` VALUES (174, '点赞', 2, 'com.ruoyi.ShThumbs.controller.ShThumbsController.edit()', 'PUT', 1, 'admin', NULL, '/ShThumbs/ShThumbs', '127.0.0.1', '内网IP', '{\"params\":{},\"thumbsId\":1,\"thumbsTopicId\":9,\"thumbsUid\":2}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-06 23:29:17');
INSERT INTO `sys_oper_log` VALUES (175, '点赞', 3, 'com.ruoyi.ShThumbs.controller.ShThumbsController.remove()', 'DELETE', 1, 'admin', NULL, '/ShThumbs/ShThumbs/1', '127.0.0.1', '内网IP', '{thumbsIds=1}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-06 23:29:28');
INSERT INTO `sys_oper_log` VALUES (176, '板块', 1, 'com.ruoyi.ShCategory.controller.ShCategoryController.add()', 'POST', 1, 'admin', NULL, '/ShCategory/ShCategory', '127.0.0.1', '内网IP', '{\"categoryId\":11,\"categoryLogo\":\"https://cdn.learnku.com//uploads/communities/DGHjM6p2qdamHmFJZt9g.jpg!/both/44x44\",\"categoryTitle\":\"前端\",\"commentCount\":0,\"description\":\"本社区为前端开发者社区，这里你可以讨论和分享 HTML, CSS, JavaScript 相关技术知识。\",\"params\":{},\"topicCount\":0}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-06 23:31:18');
INSERT INTO `sys_oper_log` VALUES (177, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"tool/build/index\",\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"build\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":115,\"menuName\":\"表单构建\",\"menuType\":\"C\",\"orderNum\":1,\"params\":{},\"parentId\":3,\"path\":\"build\",\"perms\":\"tool:build:list\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"1\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-06 23:33:07');
INSERT INTO `sys_oper_log` VALUES (178, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"component\":\"tool/gen/index\",\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"code\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":116,\"menuName\":\"代码生成\",\"menuType\":\"C\",\"orderNum\":2,\"params\":{},\"parentId\":3,\"path\":\"gen\",\"perms\":\"tool:gen:list\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"1\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-06 23:33:16');
INSERT INTO `sys_oper_log` VALUES (179, '菜单管理', 2, 'com.ruoyi.web.controller.system.SysMenuController.edit()', 'PUT', 1, 'admin', NULL, '/system/menu', '127.0.0.1', '内网IP', '{\"children\":[],\"createTime\":\"2022-07-27 09:03:51\",\"icon\":\"system\",\"isCache\":\"0\",\"isFrame\":\"1\",\"menuId\":1,\"menuName\":\"系统管理\",\"menuType\":\"M\",\"orderNum\":10,\"params\":{},\"parentId\":0,\"path\":\"system\",\"perms\":\"\",\"query\":\"\",\"status\":\"0\",\"updateBy\":\"admin\",\"visible\":\"1\"}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-06 23:34:20');
INSERT INTO `sys_oper_log` VALUES (180, '板块', 3, 'com.ruoyi.ShCategory.controller.ShCategoryController.remove()', 'DELETE', 1, 'admin', NULL, '/ShCategory/ShCategory/11', '127.0.0.1', '内网IP', '{categoryIds=11}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-07 07:54:24');
INSERT INTO `sys_oper_log` VALUES (181, '板块', 1, 'com.ruoyi.ShCategory.controller.ShCategoryController.add()', 'POST', 1, 'admin', NULL, '/ShCategory/ShCategory', '127.0.0.1', '内网IP', '{\"categoryId\":12,\"categoryLogo\":\"https://cdn.learnku.com//uploads/communities/DGHjM6p2qdamHmFJZt9g.jpg!/both/44x44\",\"categoryTitle\":\"前端\",\"commentCount\":0,\"description\":\"本社区为前端开发者社区，这里你可以讨论和分享 HTML, CSS, JavaScript 相关技术知识。\",\"params\":{},\"topicCount\":0}', '{\"msg\":\"操作成功\",\"code\":200}', 0, NULL, '2022-08-07 08:57:13');

-- ----------------------------
-- Table structure for sys_post
-- ----------------------------
DROP TABLE IF EXISTS `sys_post`;
CREATE TABLE `sys_post`  (
  `post_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '岗位ID',
  `post_code` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '岗位编码',
  `post_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '岗位名称',
  `post_sort` int(4) NOT NULL COMMENT '显示顺序',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '状态（0正常 1停用）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`post_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '岗位信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_post
-- ----------------------------
INSERT INTO `sys_post` VALUES (1, 'ceo', '董事长', 1, '0', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_post` VALUES (2, 'se', '项目经理', 2, '0', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_post` VALUES (3, 'hr', '人力资源', 3, '0', 'admin', '2022-07-27 09:03:51', '', NULL, '');
INSERT INTO `sys_post` VALUES (4, 'user', '普通员工', 4, '0', 'admin', '2022-07-27 09:03:51', '', NULL, '');

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `role_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  `role_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '角色名称',
  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '角色权限字符串',
  `role_sort` int(4) NOT NULL COMMENT '显示顺序',
  `data_scope` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '1' COMMENT '数据范围（1：全部数据权限 2：自定数据权限 3：本部门数据权限 4：本部门及以下数据权限）',
  `menu_check_strictly` tinyint(1) NULL DEFAULT 1 COMMENT '菜单树选择项是否关联显示',
  `dept_check_strictly` tinyint(1) NULL DEFAULT 1 COMMENT '部门树选择项是否关联显示',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '角色状态（0正常 1停用）',
  `del_flag` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '删除标志（0代表存在 2代表删除）',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '角色信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES (1, '超级管理员', 'admin', 1, '1', 1, 1, '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '超级管理员');
INSERT INTO `sys_role` VALUES (2, '普通角色', 'common', 2, '2', 1, 1, '0', '0', 'admin', '2022-07-27 09:03:51', '', NULL, '普通角色');

-- ----------------------------
-- Table structure for sys_role_dept
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_dept`;
CREATE TABLE `sys_role_dept`  (
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  `dept_id` bigint(20) NOT NULL COMMENT '部门ID',
  PRIMARY KEY (`role_id`, `dept_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '角色和部门关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role_dept
-- ----------------------------
INSERT INTO `sys_role_dept` VALUES (2, 100);
INSERT INTO `sys_role_dept` VALUES (2, 101);
INSERT INTO `sys_role_dept` VALUES (2, 105);

-- ----------------------------
-- Table structure for sys_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  `menu_id` bigint(20) NOT NULL COMMENT '菜单ID',
  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '角色和菜单关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_role_menu
-- ----------------------------
INSERT INTO `sys_role_menu` VALUES (2, 1);
INSERT INTO `sys_role_menu` VALUES (2, 2);
INSERT INTO `sys_role_menu` VALUES (2, 3);
INSERT INTO `sys_role_menu` VALUES (2, 4);
INSERT INTO `sys_role_menu` VALUES (2, 100);
INSERT INTO `sys_role_menu` VALUES (2, 101);
INSERT INTO `sys_role_menu` VALUES (2, 102);
INSERT INTO `sys_role_menu` VALUES (2, 103);
INSERT INTO `sys_role_menu` VALUES (2, 104);
INSERT INTO `sys_role_menu` VALUES (2, 105);
INSERT INTO `sys_role_menu` VALUES (2, 106);
INSERT INTO `sys_role_menu` VALUES (2, 107);
INSERT INTO `sys_role_menu` VALUES (2, 108);
INSERT INTO `sys_role_menu` VALUES (2, 109);
INSERT INTO `sys_role_menu` VALUES (2, 110);
INSERT INTO `sys_role_menu` VALUES (2, 111);
INSERT INTO `sys_role_menu` VALUES (2, 112);
INSERT INTO `sys_role_menu` VALUES (2, 113);
INSERT INTO `sys_role_menu` VALUES (2, 114);
INSERT INTO `sys_role_menu` VALUES (2, 115);
INSERT INTO `sys_role_menu` VALUES (2, 116);
INSERT INTO `sys_role_menu` VALUES (2, 117);
INSERT INTO `sys_role_menu` VALUES (2, 500);
INSERT INTO `sys_role_menu` VALUES (2, 501);
INSERT INTO `sys_role_menu` VALUES (2, 1000);
INSERT INTO `sys_role_menu` VALUES (2, 1001);
INSERT INTO `sys_role_menu` VALUES (2, 1002);
INSERT INTO `sys_role_menu` VALUES (2, 1003);
INSERT INTO `sys_role_menu` VALUES (2, 1004);
INSERT INTO `sys_role_menu` VALUES (2, 1005);
INSERT INTO `sys_role_menu` VALUES (2, 1006);
INSERT INTO `sys_role_menu` VALUES (2, 1007);
INSERT INTO `sys_role_menu` VALUES (2, 1008);
INSERT INTO `sys_role_menu` VALUES (2, 1009);
INSERT INTO `sys_role_menu` VALUES (2, 1010);
INSERT INTO `sys_role_menu` VALUES (2, 1011);
INSERT INTO `sys_role_menu` VALUES (2, 1012);
INSERT INTO `sys_role_menu` VALUES (2, 1013);
INSERT INTO `sys_role_menu` VALUES (2, 1014);
INSERT INTO `sys_role_menu` VALUES (2, 1015);
INSERT INTO `sys_role_menu` VALUES (2, 1016);
INSERT INTO `sys_role_menu` VALUES (2, 1017);
INSERT INTO `sys_role_menu` VALUES (2, 1018);
INSERT INTO `sys_role_menu` VALUES (2, 1019);
INSERT INTO `sys_role_menu` VALUES (2, 1020);
INSERT INTO `sys_role_menu` VALUES (2, 1021);
INSERT INTO `sys_role_menu` VALUES (2, 1022);
INSERT INTO `sys_role_menu` VALUES (2, 1023);
INSERT INTO `sys_role_menu` VALUES (2, 1024);
INSERT INTO `sys_role_menu` VALUES (2, 1025);
INSERT INTO `sys_role_menu` VALUES (2, 1026);
INSERT INTO `sys_role_menu` VALUES (2, 1027);
INSERT INTO `sys_role_menu` VALUES (2, 1028);
INSERT INTO `sys_role_menu` VALUES (2, 1029);
INSERT INTO `sys_role_menu` VALUES (2, 1030);
INSERT INTO `sys_role_menu` VALUES (2, 1031);
INSERT INTO `sys_role_menu` VALUES (2, 1032);
INSERT INTO `sys_role_menu` VALUES (2, 1033);
INSERT INTO `sys_role_menu` VALUES (2, 1034);
INSERT INTO `sys_role_menu` VALUES (2, 1035);
INSERT INTO `sys_role_menu` VALUES (2, 1036);
INSERT INTO `sys_role_menu` VALUES (2, 1037);
INSERT INTO `sys_role_menu` VALUES (2, 1038);
INSERT INTO `sys_role_menu` VALUES (2, 1039);
INSERT INTO `sys_role_menu` VALUES (2, 1040);
INSERT INTO `sys_role_menu` VALUES (2, 1041);
INSERT INTO `sys_role_menu` VALUES (2, 1042);
INSERT INTO `sys_role_menu` VALUES (2, 1043);
INSERT INTO `sys_role_menu` VALUES (2, 1044);
INSERT INTO `sys_role_menu` VALUES (2, 1045);
INSERT INTO `sys_role_menu` VALUES (2, 1046);
INSERT INTO `sys_role_menu` VALUES (2, 1047);
INSERT INTO `sys_role_menu` VALUES (2, 1048);
INSERT INTO `sys_role_menu` VALUES (2, 1049);
INSERT INTO `sys_role_menu` VALUES (2, 1050);
INSERT INTO `sys_role_menu` VALUES (2, 1051);
INSERT INTO `sys_role_menu` VALUES (2, 1052);
INSERT INTO `sys_role_menu` VALUES (2, 1053);
INSERT INTO `sys_role_menu` VALUES (2, 1054);
INSERT INTO `sys_role_menu` VALUES (2, 1055);
INSERT INTO `sys_role_menu` VALUES (2, 1056);
INSERT INTO `sys_role_menu` VALUES (2, 1057);
INSERT INTO `sys_role_menu` VALUES (2, 1058);
INSERT INTO `sys_role_menu` VALUES (2, 1059);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `dept_id` bigint(20) NULL DEFAULT NULL COMMENT '部门ID',
  `user_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户账号',
  `nick_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '用户昵称',
  `user_type` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '00' COMMENT '用户类型（00系统用户）',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '用户邮箱',
  `phonenumber` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '手机号码',
  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '用户性别（0男 1女 2未知）',
  `avatar` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '头像地址',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '密码',
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '帐号状态（0正常 1停用）',
  `del_flag` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '0' COMMENT '删除标志（0代表存在 2代表删除）',
  `login_ip` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '最后登录IP',
  `login_date` datetime NULL DEFAULT NULL COMMENT '最后登录时间',
  `create_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '创建者',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `update_by` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '' COMMENT '更新者',
  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1, 103, 'admin', 'JanYork', '00', '747945307@qq.com', '16670887668', '0', '/profile/avatar/2022/07/27/blob_20220727101552A001.jpeg', '$2a$10$7JB720yubVSZvUI0rEqK/.VqGOZTH.ulu33dHOiBE8ByOhJIrdAu2', '0', '0', '127.0.0.1', '2022-08-07 08:55:01', 'admin', '2022-07-27 09:03:51', '', '2022-08-07 08:55:01', '管理员');
INSERT INTO `sys_user` VALUES (2, 105, 'ry', '若依', '00', 'ry@qq.com', '15666666666', '1', '', '$2a$10$7JB720yubVSZvUI0rEqK/.VqGOZTH.ulu33dHOiBE8ByOhJIrdAu2', '0', '0', '127.0.0.1', '2022-07-27 09:03:51', 'admin', '2022-07-27 09:03:51', '', NULL, '测试员');

-- ----------------------------
-- Table structure for sys_user_post
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_post`;
CREATE TABLE `sys_user_post`  (
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `post_id` bigint(20) NOT NULL COMMENT '岗位ID',
  PRIMARY KEY (`user_id`, `post_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户与岗位关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user_post
-- ----------------------------
INSERT INTO `sys_user_post` VALUES (1, 1);
INSERT INTO `sys_user_post` VALUES (2, 2);

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `role_id` bigint(20) NOT NULL COMMENT '角色ID',
  PRIMARY KEY (`user_id`, `role_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户和角色关联表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES (1, 1);
INSERT INTO `sys_user_role` VALUES (2, 2);

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `tag_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '标签 id',
  `tag_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '标签名称',
  `topic_count` int(10) NULL DEFAULT NULL COMMENT '话题标签数',
  `tag_category_id` int(10) NULL DEFAULT NULL COMMENT '标签所属板块 id(作废，暂定)',
  PRIMARY KEY (`tag_id`) USING BTREE,
  INDEX `tagCategoryId`(`tag_category_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 12 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES (1, '应用层', 1, 1);
INSERT INTO `tag` VALUES (2, '后端', 1, 4);
INSERT INTO `tag` VALUES (3, '数据库', 1, 2);
INSERT INTO `tag` VALUES (4, '前端', 1, 3);
INSERT INTO `tag` VALUES (5, 'Vue框架', 1, 5);
INSERT INTO `tag` VALUES (6, '脚本语言', 1, 6);
INSERT INTO `tag` VALUES (7, '底层开发', 1, 7);
INSERT INTO `tag` VALUES (8, '移动端', 1, 8);
INSERT INTO `tag` VALUES (9, '架构技术', 1, 9);
INSERT INTO `tag` VALUES (10, '程序员', 1, 10);
INSERT INTO `tag` VALUES (11, 'Node', 1, 11);

-- ----------------------------
-- Table structure for thumbs
-- ----------------------------
DROP TABLE IF EXISTS `thumbs`;
CREATE TABLE `thumbs`  (
  `thumbs_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '标签 id',
  `thumbs_uid` int(10) NULL DEFAULT NULL COMMENT '点赞者 id',
  `thumbs_topic_id` int(10) NULL DEFAULT NULL COMMENT '点赞话题 id',
  PRIMARY KEY (`thumbs_id`) USING BTREE,
  INDEX `thumbsUid`(`thumbs_uid`) USING BTREE,
  INDEX `thumbsTopicId`(`thumbs_topic_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of thumbs
-- ----------------------------
INSERT INTO `thumbs` VALUES (2, 1, 29);
INSERT INTO `thumbs` VALUES (3, 1, 28);
INSERT INTO `thumbs` VALUES (4, 1, 27);

-- ----------------------------
-- Table structure for topic
-- ----------------------------
DROP TABLE IF EXISTS `topic`;
CREATE TABLE `topic`  (
  `topic_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '话题 id',
  `title` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '话题标题',
  `topic_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '话题内容',
  `comment_count` int(10) NULL DEFAULT NULL COMMENT '评论总数',
  `topic_time` datetime NULL DEFAULT NULL COMMENT '发帖时间',
  `topic_uid` int(10) NOT NULL COMMENT '创建者 id',
  `topic_category_id` int(10) NOT NULL COMMENT '所属板块 id',
  `topic_tag_id` int(10) NOT NULL COMMENT '所属标签 id',
  `browse_count` int(10) NULL DEFAULT NULL COMMENT '浏览量',
  `thumbs_up` int(10) NULL DEFAULT NULL COMMENT '点赞数目',
  PRIMARY KEY (`topic_id`) USING BTREE,
  INDEX `topicUid`(`topic_uid`) USING BTREE,
  INDEX `topicCategoryId`(`topic_category_id`) USING BTREE,
  INDEX `topicTagId`(`topic_tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 31 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of topic
-- ----------------------------
INSERT INTO `topic` VALUES (1, 'Axios请求验证码踩坑日记之异步执行', '### 错误开始\n\n今天用`Vue`写一个登录页面获取验证码，但是不同寻常的是，我这里接入了极验认证。\n\n![](https://a.ideaopen.cn/JanYork/YbPJfsdT.png)\n\n先看看这张图，我`Axios`进行了封装，所以`api`是调用`post`请求。\n\n当后端返回状态码为`200`时，发送获取验证码请求，同时启动定时器。\n\n当时没想那么多，就直接定义了个定时器(原先这个定时器是写在`Axios`请求外面的，但是我需要后端返回成功信息才调用，所以移了进来)。\n\n但是进来之后就出错了，验证码照常获取和写入`Redis`，但是验证码的计时就是不开始。\n\n> **说明：图上这段代码是正确的，我之前的是没window调用的，是使用`this.setInterval`，所以不行。**\n\n那我只好有搬回外面咯。\n\n### 开始解决\n\n![](https://a.ideaopen.cn/JanYork/OKcFEA7w.png)\n\n于是我去`data`中定义一个变量。请求成功给他`ture`。\n\n`form.codeSuccess`为`ture`我就在外面调用计时器。\n\n> **window那句注释是我突然醒悟写的，后面就完美解决了。**\n\n整个数据和逻辑都没问题，我调试的时候，在`Axios`里面输出`form.codeSuccess`也是`ture`。\n\n但是到了判断里面就是`false`了.....\n\n![](https://a.ideaopen.cn/JanYork/FHhIP0Ir.png)\n\n这什么情况...上面输出是`true`，到下面的方法就成`false`了。\n\n？？？\n\n于是我在许多地方都输出了这个验证码是否成功的状态值——>`form.codeSuccess`。\n\n发现除了在`Axios`请求里面是`true`，其余全是`false`。\n\n而我`Axios`请求只要成功我就给`form.codeSuccess`赋值了`true`了。奇怪...\n\n我当初输出是直接输出`form.codeSuccess`，看不出顺序，但是我给每一个输出加了点标记，或者文字后，发现这个顺序就不对。\n\n> **我懒得还原错误的代码了，那就不截图控制台了哈。**\n\n它先输出了请求外的，在输出了请求中的输出语句。我靠，这玩意异步执行被排在了最后....\n\n于是乎...总算是找到错误原因了。\n\n### 解决完毕\n\n我因为是封装了`Axios`请求，所以也不好做同步约束，那就只好再将代码搬到请求这个的`if`里面去咯。\n\n因为`Axios`请求成功的`if`里面的this是指向了`VueComponent`。\n\n我输出一下`this`给大家看看：\n\n![](https://a.ideaopen.cn/JanYork/oo6ueQtp.png)\n\n![](https://a.ideaopen.cn/JanYork/HApShFoi.png)\n\n所以我没法调用到原生`js`的`window`对象里面的`timer`。\n\n于是就直接使用window调用吧。\n\n改成：\n\n```js\nthis.timer = window.setInterval(() => {\n}\n```\n\n这样就好啦。\n', 0, '2022-08-06 21:25:38', 1, 3, 4, 0, 0);
INSERT INTO `topic` VALUES (2, '(踩坑篇)vue element-ui resetForm()表单重置失效的问题', '**好久没更新了，最近在折腾**`Vue`，没用啥时间更新博客。\n\n**但是，今天帮朋友看问题时踩到一个坑。**\n\n**项目时若依的后台管理，有一个数据搜索框，如下(因为部分原因不能展示整个页面)。**\n\n![](https://a.ideaopen.cn/JanYork/d49W7abz.png)\n\n**点击搜索后正常显示搜索的数据，本来应该点击重置后回到原来展示所有数据的样子。**\n\n**但是点击重置后并没有用。**\n\n**我原来以为重置是自己写了额外的方法，但是我查看**`methods`里面的方法发现，这个按钮是调用的查询方法，只不过查询之前，他使用`resetForm()`方法去清空表单中的所有数据。\n\n**那么问题就很好定位了，使用**`resetForm()`方法来清空表单数据时，不能清空。\n\n**一般来说，出现这种问题，我首先查看属性是否齐全。**\n\n```\n  <el-form ref=\"postForm\" :model=\"postForm\" :rules=\"rules\" >\n```\n\n`el-form`中必须包含以上3个属性，但是我查看了都有。\n\n**那就可能是**`:model`的对象不正确，因为`resetForm()`是根据数据对象来清空的。\n\n![](https://a.ideaopen.cn/JanYork/QhaZPHCd.png)\n\n**查看对象发现确实**`:model`绑定的对象不对，修改后发现`input`框已经可以重置了。\n\n**但是，好像下拉框并没有重置。**\n\n![](https://a.ideaopen.cn/JanYork/0J1dg8gU.png)\n\n**可能是v-model绑定的那个属性不在对象中，因为我们刚刚看到data中数据没有他。**\n\n**那么可能这个属性就没被定义再**`resetForm()`中，也就是他不会对这个属性清空值。\n\n**那就只能手动了。**\n\n**那就手动加一句：**\n\n```\n     resetQuery() {\n       //手动清空\n       this.queryParams.appCemeteryId = \'\';\n       this.resetForm(\"queryForm\");\n       this.handleQuery();\n     }\n```\n\n**这样就好了，测试了功能也正常。**\n', 0, '2022-08-06 21:27:22', 1, 3, 4, 0, 3);
INSERT INTO `topic` VALUES (3, '2022新版版本IDEA创建Maven项目卡死-Bug', '**在使用新版本IDEA的时候，我是**`2022.1`版本，创建`Maven`项目时，我发现有时候`IDEA`会卡死。\n\n**原因好像是网络不好的话，下载**`archetype-catalog.xml`太慢。具体我也不知道是不是。\n\n**我向官方反馈了这个**`Bug`后，很快便收到了答复：\n\n> [Creating a Maven project from archetype: UI freezes if network is slow : IDEA-296612 (jetbrains.com)](https://youtrack.jetbrains.com/issue/IDEA-296612)\n\n**这个是提交问题的链接，有兴趣可以看看。**\n\n**然后，我建议如果离不开使用**`Maven`的话，那还是不要升级版本了。\n\n**当然，也有许多解决方法，比如这个：**\n\n> [解决Idea 创建Maven 项目卡住的问题](https://blog.csdn.net/rock154/article/details/79406380)\n\n**然后，我其实使用了更方便的解决方法，更新至预览版，也就是**`2022.2`版本，在这个版本已经解决了这个问题了。\n\n![](https://a.ideaopen.cn/JanYork/K0AQ908l.png)\n\n**然后就是，如果你切换**`Maven`的骨架获取目录，会导致缓慢的卡顿，因为需要时间和网络来加载`Archetype`。\n', 0, '2022-08-06 21:27:58', 1, 1, 2, 0, 0);
INSERT INTO `topic` VALUES (4, 'IDEA配置Maven教程', '### 下载Maven\n\n![](https://a.ideaopen.cn/JanYork/vhsMcSS7.png)\n\n**前往**`Maven`官网下载`Maven`。\n\n### 配置环境变量\n\n**变量名：**`M2_HOME`，变量值：`Maven`解压后的目录。\n\n**变量名：**`Path`(一般都有，直接追加)，变量值：`%M2_HOME%\\bin`。\n\n> **CMD窗口使用`mvc -v`命令，显示版本信息就成功了。**\n\n**目前常用的开发工具如**`IDEA`都自身集成了一个版本的`Maven`。但是通常我们使用自己已经配置好的Maven。\n\n### 修改配置文件\n\n> **通常我们需要修改解压目录下**`conf/settings.xml`文件，这样可以更好的适合我们的使用。\n\n* **在**`<localRepository>`标签内设置自己的本地仓库默认位置。\n  * ```\n     <localRepository>D:\\repository</localRepository>\n    ```\n* **修改JDK默认版本**\n  * > **在**`<profiles>`标签下添加一个`<profile>`标签，修改`Maven`默认的`JDK`版本。\n    >\n    > ```\n    >  <profile>     \n    >   <id>JDK-1.8</id>       \n    >   <activation>       \n    >       <activeByDefault>true</activeByDefault>       \n    >       <jdk>1.8</jdk>       \n    >   </activation>       \n    >   <properties>       \n    >       <maven.compiler.source>1.8</maven.compiler.source>       \n    >       <maven.compiler.target>1.8</maven.compiler.target>       \n    >       <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>       \n    >   </properties>       \n    >  </profile>\n    > ```\n    >\n* **修改镜像源**\n  * > **在**`</mirrors>`标签下创建`</mirror>`标签。\n    >\n    > ```\n    >  <mirror>\n    >     <id>alimaven</id>\n    >     <mirrorOf>central</mirrorOf>\n    >     <name>aliyun maven</name>\n    >  <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n    >  </mirror>\n    > ```\n    >\n    > **你也可以配置多个镜像源。**\n    >\n\n### IDEA配置\n\n![](https://a.ideaopen.cn/JanYork/2NwYJagx.png)\n\n**在设置中搜索**`Maven`，然后将地址换成你自己的`Maven`地址，已经用户设置文件位置和本地仓库位置。\n\n**但是我们**`Maven`一般需要网络去获取依赖，我们这样设置可以本地离线运行。\n\n![](https://a.ideaopen.cn/JanYork/yyLHi9p6.png)\n\n**VM选项内容：**`-DarchetypeCatalog=internal`。\n\n**配置这个，可以在没有网路的情况下，我们可以正常创建工程，并从之前已经使用过的工程中找到相应的骨架。**\n\n**到这里，配置就结束了。至于**`pom.xml`里面的依赖配置，请自己按需要添加`xml`坐标吧。\n', 0, '2022-08-06 21:29:00', 1, 1, 2, 0, 5);
INSERT INTO `topic` VALUES (5, 'Tomcat(servlet)启动(加载)执行两次', '**不知道大家在使用**`Tomcat`时，有没有遇到过运行或者启动项目时，页面被执行了两次的问题。\n\n**可能发生过，但是你没有发现。**\n\n**首先看一下问题是怎么样的。**\n\n### 问题演示\n\n![](https://a.ideaopen.cn/JanYork/jhxNuUjY.png)\n\n**这是一段**`jsp`代码，说实话这玩意有点老了，不懂`jsp`的请听我解释这一段代码。\n\n> **我们定义一个全局变量`i`，`i = 0`。**\n>\n> **我们定义一个无参无返回值方法，`void add()`，这个方法中使用`i++`来自加。**\n>\n> **我们在下一句，`add()`调用这个方法。**\n>\n> **然后将`i`的值输出在页面。**\n\n**我刚开始觉得答案肯定是**`1`，也必须是`1`。\n\n**但是，当我运行起来发现。**\n\n![](https://a.ideaopen.cn/JanYork/0IncMASA.png)\n\n**????居然是**`2`?\n\n**我甚至怀疑是代码的问题......**\n\n**于是我在**`add()`方法里面输出一下日志。\n\n![](https://a.ideaopen.cn/JanYork/F1sjLl2Y.png)\n\n**我发现，这不是之间将**`i`变成了`2`，而是`add()`方法被调用了两次！\n\n**可是代码里面明明只调用一次啊？**\n\n**我去浏览器搜索相关案例，发现还真有几例，哈哈哈，浏览器万能。**\n\n**经过一系列排查，发现是**`Tomcat`针对你的项目运行了两次。\n\n### 原因\n\n**为什么会运行两次呢？**\n\n> **因为你的项目本来就放在`Tomcat`的默认`webapp`目录下（tomcat在启动时肯定会加载1次），然后又在`server.xml`中做了配置，为了达到访问根就可以访问你的项目（这样`Tomcat`就又加载1次）,结果，Tomcat就会加载两次。**\n\n**你可能也并没有将项目放到**`webapp`目录下，但是你的IDEA工具给你了个项目映射，将你的项目映射到了`webapp`下。\n\n> **也可以这样说，Tomcat启动时，先加载`appBase`中配置的`webapps`目录下的项目，然后再去加载`docBase`中配置的项目，因为`docBase`的相对路径（`/xxx`）是在`webapps`目录下，所以会被加载两次。**\n\n**总的来说，就是**`Tomcat`的`sever.xml`的配置做了一次无用功，导致运行了两次。\n\n### 如何解决？\n\n**首先，我们有三种方法，我们一个个说。**\n\n**先记住这两个是啥：**\n\n> **`docBase`是web应用和本地路径，`path`是`Tomcat`访问这个应用的URL路径。**\n\n#### 第一个方法\n\n> **办法1、不要将 hello 应用放在**`Tomat`的默认`webapp`目录下，把它移出去，然后在`server.xml`中**修改`docBase`的值为项目所在位置的绝对路径**就可以了。\n\n**在Tomcat中的**`conf`目录中，在`server.xml`中的，`<host/>`节点中添加：\n\n```\n <Context path=\"项目的URL路径\" docBase=\"Web应用和本地路径\" debug=\"0\" privileged=\"true\"> \n </Context>\n```\n\n#### 第二个方法\n\n**删除掉**`server.xml`中 `Context` 的手动配置，这样就不会加载两次，因为项目在`webapp`下，所以在访问时，就只能是：`http://ip:port/项目地址` 这样来访问了。\n\n> **如果说，你项目已经移入了`webapp`目录，但是还是一样，那你IDEA配置应该还是映射状态。**\n\n**就像这样：**\n\n![](https://a.ideaopen.cn/JanYork/B85ro2Mn.png)\n\n![](https://a.ideaopen.cn/JanYork/vbYNSlfG.png)\n\n**这样仍然处于映射状态，至于怎么配置请自行研究，我是直接去**`Tomcat`的`bin`里面启动的。\n\n#### 第三个方法\n\n**在**`Tomcat`的`conf`目录中，新建 `Catalina`（注意大小写）`＼localhost`目录，在该目录中新建一个`xml`文件，名字可以随意取，只要和当前文件中的文件名不重复就行了，该`xml`文件的内容为：\n\n```\n <Context path=\"项目的URL路径\" docBase=\"Web应用和本地路径\" debug=\"0\" privileged=\"true\"> \n </Context>\n```\n\n### 尾述\n\n`jsp`是一个很老的技术，我不是特别喜欢，但是找到一个问题是对自己很好的一个提升，所以我觉得这个时间很值，尽管这个技术不是特别重要。\n\n> **好的程序是改出来的，好的bug是找出来的。**\n>\n', 0, '2022-08-06 21:29:59', 1, 1, 2, 0, 0);
INSERT INTO `topic` VALUES (6, '使用ndoe.js+Express框架+jquery-Ajax构建简单的web页面', '### 安装node\n\n![](https://a.ideaopen.cn/JanYork/p23CrBNY.png)\n\n**在**`node`官方网站，下载对应版本的安装包或者压缩包。\n\n**我这里是使用64位**`msi`安装。\n\n![](https://a.ideaopen.cn/JanYork/4022qgM9.png)\n\n**安装时勾选**`Add to Path`，这样就会自动配置好环境变量。\n\n**安装完成，我们使用**`node -v`查看是否成功安装。\n\n![](https://a.ideaopen.cn/JanYork/KzDEuapx.png)\n\n**显示版本号说明成功，没用那可能就是你环境变量没设置好。**\n\n### 安装Express\n\n**因为**`node`的包管理`npm`的源在国外，所以下载依赖包非常的慢，我们修改一下他的源。\n\n```\n npm config set registry https://registry.npmmirror.com\n```\n\n**或者可以直接使用**`cnpm`。\n\n```\n npm install -g cnpm --registry=https://registry.npmmirror.com\n```\n\n![](https://a.ideaopen.cn/JanYork/FxU3W8Kg.png)\n\n**我们直接进入**`vs code`来创建了一个文件夹。\n\n**新建一个终端，我们安装**`Express`，他是`node.js`的一个`web`框架。\n\n```\n npm install express --save\n```\n\n`-g`是全局安装。\n\n![](https://a.ideaopen.cn/JanYork/pKSN5vDK.png)\n\n### 构建前端页面\n\n![](https://a.ideaopen.cn/JanYork/aYt0OdeX.png)\n\n**快速构建一个页面，有时间可以做的精致点。**\n\n**然后我们引入**`JQ`库，原生`JavaScript`的`Ajax`太麻烦，显得臃肿。\n\n```\n     <script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n \n```\n\n### 配置Express\n\n[Express 路由 (expressjs.com)](http://expressjs.com/zh-cn/guide/routing.html)\n\n**我们前往中文官网，看一下他的文档。**\n\n![](https://a.ideaopen.cn/JanYork/aKuQa6bd.png)\n\n**我们直接一步步跟着文档来。**\n\n```\n var express = require(\'express\');\n var app = express();\n \n // 当对主页发出 GET 请求时，响应“hello world”\n app.get(\'/\', function(req, res) {\n     res.send(\'hello world\');\n   });\n \n   app.post(\'/\', function (req, res) {\n     res.send(\'hello world\');\n   });  \n```\n\n**然后我们创建一个端口。**\n\n```\n //   创建一个端口\n app.listen(8080);\n```\n\n**但是，我原本是可以直接**`node express.js`启动服务的，但是它不能及时更新。\n\n```\n npm install nodemon -g\n```\n\n**于是我们可以安装一个**`nodemon`。\n\n**然后启动它。**\n\n![](https://a.ideaopen.cn/JanYork/ja8BfdMh.png)\n', 0, '2022-08-06 21:31:51', 1, 10, 11, 0, 6);
INSERT INTO `topic` VALUES (7, 'JavaEE之Spring框架初解', '![](https://a.ideaopen.cn/JanYork/iIpWEfvr.png)\n\n### Spring框架\n\n**想必对于Java程序员来说，**`Spring`这个词并不陌生，如果你Java基础刚学习完成，想开启框架的学习，或许需要好好了解一下它。毕竟，知己知彼，百战百胜。\n\n**Spring框架有两个概念，你可以认为他是Spring全家桶，也就是包括Spring、SpringMVC、SpringBoot、SpringCloud这些。**\n\n**或者说，他是单独的Spring框架。**\n\n> **Spring 是最受欢迎的企业级 Java 应用程序开发框架。**\n\n### 框架\n\n**计算机的发展道路很快，也诞生了许许多多的语言，但是每个语言多多少少都会有些缺陷，或许是使用起来太复杂，或许是缺少了某些编写方面的设计，或者又是太过繁琐，于是一代代的更新与创造，在原有语言(原生)的基础上，封装了一些方法，设计了许多模式，简化了许多工具，甚至说创造了一个生态。**\n\n**比如原生**`JavaScript`的基础上，`TypeScript`是原生的扩展，`JQ`是原生基础创建的库，而`Vue`又是一个强大生态的框架。\n\n**而**`Spring`的诞生，恰恰是为了弥补原生`JavaEE`的不足，比如高耦合啊，复用性差，等等。\n\n> **Spring 框架来创建性能好、易于测试、可重用的代码。**\n\n### Spring发展\n\n`Spring`的发展起源要回溯到2002年，`Java EE`和`EJB`的顶峰盛世，在当时，这已经是很优秀的设计了。\n\n**但是，历史往往不缺乏有想法的人，也不缺乏有创造力的人，一个美国的小伙子认为 EJB 太过臃肿。**\n\n**因为，这套体系貌似对于许多项目，还是过于臃肿。不够轻量！**\n\n`Rod Johnson`就是这个有想法的人。2001年10月写了一本书《Expert One-on-One J2EE》，介绍了当时Java企业应用程序开发的情况，并指出了 Java EE 和 EJB 组件框架中存在的一些主要缺陷。在这本书中，他提出了一个基于普通 Java 类和依赖注入的更简单的解决方案。在书中，他展示了如何在不使用 EJB 的情况下构建高质量、可扩展的在线座位预留系统。为了构建应用程序，他编写了超过 30,000 行的基础结构代码，项目中的根包命名为 `com.interface21`，所以人们最初称这套开源框架为 `interface21`。\n\n**从名字就可以看出，这个框架将注定不平凡，意义于：21世纪的借鉴。**\n\n**或许是**`Rod Johnson`不仅仅是计算机领域的天才，同时还获得了音乐学博士学位的原因，`Spring`往往充斥着艺术的美学。\n\n**在这本书发布后，这种设计模式和开发一炮而红。这本书免费提供的大部分基础架构代码都是高度可重用的。**\n\n**2003 年**`Rod Johnson`和同伴在此框架的基础上开发了一个全新的框架命名为**`Spring`**，据`Rod Johnson`介绍 `Spring` 是传统 `J2EE` 新的开始，随后 `Spring` 发展进入快车道。\n\n* **2004 年 03 月，1.0 版发布。**\n* **2006 年 10 月，2.0 版发布。**\n* **2007 年 11 月，更名为 SpringSource，同时发布了 Spring 2.5。**\n* **2009 年 12 月，Spring 3.0 发布。**\n* **2013 年 12 月，Pivotal 宣布发布 Spring 框架 4.0。**\n* **2017 年 09 月，Spring 5.0 发布。**\n\n### 为何强大\n\n** Spring —— 一个旨在用于构造 JAVA 应用程序的轻量级框架。**\n\n1. **你可以采用 Spring 来构造任何程序，你不限定于只编写 WEB 应用。**\n2. **“轻量级”并不意味着类数量很少，或者发行包大小很小，实际上，它指的是 Spring 哲学原理的总称——那就是最少的侵入。**\n3. **Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。**\n4. **分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。**\n\n**对于三层架构，可以看看我这篇：**\n\n* **A 表现层  web层  MVC是表现层的一个设计模型 **\n* **B 业务层 Service层**\n* **C 持久层 Dao层**\n\n> [浅谈三层架构](https://blog.ideaopen.cn/index.php/archives/23/)\n\n#### 最少侵入？\n\n**对于“侵入”这个词，可能有疑惑。**\n\n**解释一下，Spring中的****侵入式**和**非侵入式**。\n\n> **侵入式的做法是要求业务代码”知道”框架的代码，表现为业务代码需要****继承**框架提供的类，才能很好的和框架结合，使用框架带来的便利。\n\n**也就是说，存在了耦合、依赖，但提供了方便的环境。**\n\n> **非侵入式则****不需要业务代码引入框架代码的信息**，即**无需继承**框架提供的类，从编写者的角度来看，察觉不到框架的存在。\n\n**总之，这两种方式各有千秋，各有利弊，主要看实际开发时的权衡选择了。**\n\n> **Spring的定义是是非侵入式的。**\n\n**非侵入式的技术体现是，即允许在应用系统中自由选择和组装Spring框架的各个功能模块，并且不强制要求应用系统的类必须继承或实现Spring框架的类和接口来达到使用框架的目的。**\n\n**Spring还有许多特点：**\n\n* **方便解耦，简化开发**\n* **方便集成各种优秀框架(Struts2、Hibernate、MyBatis)**\n* **降低 Java EE API 的使用难度**\n* **方便程序的测试(注解方便)**\n* **AOP 编程的支持**\n* **声明式事务的支持**\n\n![](https://a.ideaopen.cn/JanYork/JMxxG1dj.png)\n\n![](https://a.ideaopen.cn/JanYork/qVjXUQLu.png)\n\n![](https://a.ideaopen.cn/JanYork/oWlsM5cV.png)\n\n`Spring`的翻译是春天的意思。\n\n**一个想法，一个创造，开启了一个时代，一个框架，承载了Java开发的繁华。**\n\n### 尾述\n\n**这个时代，貌似很多创造力被泯灭了，希望有想法的人，能一直走下去，创造再一个繁华。**\n', 0, '2022-08-06 21:32:49', 1, 1, 2, 0, 1);
INSERT INTO `topic` VALUES (8, '-Xms256m -Xmx256m，栈堆内存中常见的字眼', '**不知道有没有细心的小伙伴发现，IDEA的启动项(自定义VM选项)，或者一些其他代码启动的地方，存在一些不起眼的语句，比如Xms256m -Xmx256m这些，那这些玩意都是啥意思有啥用呢？**\n\n**我打开浏览器搜索了一下，发现这居然是对于栈堆内存的控制，比如我们看下面这个语句。**\n\n```\n -Xms256m -Xmx256m -XX:PermSize=64M -XX:MaxNewSize=64m -XX:MaxPermSize=256m\n```\n\n### Xms\n\n**-Xms：是初始化**[堆内存](https://so.csdn.net/so/search?q=%E5%A0%86%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020)值\n\n### Xmx\n\n**-Xmx：是堆内存最大值**\n\n> **知道这两个玩意是啥了，那他们有什么用呢？**\n\n**这两个值是**`Tomcat`服务器**内存**分配是动态的最好体现。\n\n**为什么这么说呢？**\n\n**因为刚启动时系统给**`Tomcat`分配的内存为`-Xms`值，当项目占用的内存达到初始化内存的一定比例后（**百度上说是80%,我没去试过**）才会将给`Tomcat`分配`-Xmx`大小的内存，反之亦然当项目占用的内存降至`-Xmx`的40%时，系统会释放部分内存，又将`-Xms`大小的内存划分给tomcat服务器。\n\n> **那么还有几个其他的字段是啥意思呢？**\n\n### -XX：PermSize和-XX：MaxPermSize\n\n> **-XX：PermSize和-XX：MaxPermSize是初始化永久保存区，原理同内存是一样的。**\n\n### -XX：MAxNewSize\n\n> **-XX：MAxNewSize是什么意思,我也没去详细搜索过，好像也搜索不到啥，但看到有要求这个值的大小应该设置为**`-Xmx`的1/4。\n\n**就当作一个知识扩展，了解了解吧。**\n', 0, '2022-08-06 21:34:50', 1, 1, 10, 0, 3);
INSERT INTO `topic` VALUES (9, 'Linux中，MySQL的常用命令', '### 登录\n\n![](https://a.ideaopen.cn/JanYork/lidTct14.png)\n\n```\n mysql -u用户名 -p\n -- 然后在下面输入密码，Linux的密码不会显示出，盲打就可以\n```\n\n```\n mysql -u用户名 -p密码\n -- 这种方式将直接登录\n```\n\n### 开关\n\n#### 开启数据库\n\n```\n service mysql start\n```\n\n**我这里没加分号，要是终端运行命令，记得结尾加上`;`不然就可能出现如下结果。**\n\n![](https://a.ideaopen.cn/JanYork/cmDVP8jR.png)\n\n#### 关闭数据库\n\n```\n service mysql stop\n```\n\n#### 重启数据库\n\n```\n service mysql restart\n```\n\n### 常用操作\n\n#### 显示数据库列表\n\n```\n show databases;\n```\n\n#### 创建、删除数据库\n\n```\n create database 数据库名;\n \n drop database 数据库名;\n```\n\n#### 显示库中的数据表\n\n```\n use mysql;\n \n show tables;\n```\n\n#### 显示数据表结构\n\n```\ndescribe 数据表名;\n```\n\n### 修改密码\n\n#### SET PASSWORD命令（需登录）\n\n```\nmysql> set password for 用户名@localhost = password(\'新密码\');\n```\n\n#### 使用sql语句更新 mysql 库中的 user 表（需登录）\n\n```\nmysql> use mysql; \nmysql> update user set password=password(\'123\') where user=\'root\' and host=\'localhost\'; \nmysql> flush privileges;\n```\n\n#### mysqladmin命令，明文（不需登录）\n\n```\nmysqladmin -u用户名 -p旧密码 password 新密码\n```\n\n#### 命令，密文（不需登录）\n\n```\nmysqladmin -u用户名 -p旧密码 password+回车，然后输入两次新密码\n```\n\n### 其他命令\n\n#### 导入、导出数据库（不需登录）\n\n##### 导出所有数据库\n\n```\nmysqldump -u用户名 -p密码 --all-databases >导出路径\n```\n\n##### 导出指定数据库\n\n```\nmysqldump -u用户名 -p密码 --databases 数据库名>导出路径\n```\n\n##### 导出指定数据库的结构（无数据）\n\n```\n语法：mysqldump -u用户名 -p密码 --no-data --databases 数据库名>导出路径\n举例：mysqldump -uroot -p123456 --no-data --databases testdatebase >/tmp/testdatebase_no_data.sql\n```\n\n##### 导出指定数据库中的指定表\n\n```\n语法：mysqldump -u用户名 -p密码 --databases 数据库名 --tables 数据表名>导出路径\n举例：mysqldump -uroot -p123456 --databases testdatebase --tables t_user >/tmp/testdatebase_user.sql\n```\n\n##### 导出指定数据库中的指定表的结构（无数据）\n\n```\n语法：mysqldump -u用户名 -p密码 --no-data --databases 数据库名 --tables 数据表名>导出路径\n举例：mysqldump -uroot -p123456 --no-data --databases testdatebase --tables t_user >/tmp/testdatebase_user_no_data.sql\n```\n\n##### 导出指定数据库中的指定表，设置查询条件\n\n```\n语法：mysqldump -u用户名 -p密码 --databases 数据库名 --tables 数据表名 --where=\'条件\'>导出路径\n\n举例：mysqldump -uroot -p123456 --databases testdatebase --tables t_user --where=\'user_no=1\'>/tmp/mysql_user_no.sql\n```\n\n##### 跨服务器备份数据库\n\n```\n-- 将 host1 服务器中的 db1 数据库的所有数据导入到 host2 中的db2数据库中，db2的数据库必须存在否则会报错\n-- (经测试，在mysql5.5版本中，db2存在即可，实际生成数据库名称与db1一致；加上-C参数可以启用压缩传递）\n\n语法：mysqldump --host=host1 -u用户名 -p密码 --databases db1 |mysql --host=host2 -u用户名 -p密码 --databases db2\n举例：mysqldump --host=192.168.1.101 -uroot -p123456 -C --databases testdatebase |mysql --host=192.168.3.102 -uroot -p123456 --database testdatebase\n```\n\n##### 通过 sql 文件导入数据库\n\n```\n语法：mysql -u用户名 -p密码 < 导入路径\n举例：mysql -uroot -p123456 < /tmp/testdatebase.sql\n```\n\n> **注：部分摘自博客园**\n>\n', 0, '2022-08-06 21:35:29', 1, 2, 3, 0, 3);
INSERT INTO `topic` VALUES (10, '宝塔面板使用`Navicat`或其他工具连接数据库', '`Linux`如果想要自己配置环境，多多少少还是有些麻烦，于是大部分的用户会选择为没有界面的`Linux`安装一个可视化面板，宝塔面板一切都会帮你完成，但是有时候，我们想要用`SQL`管理工具连接数据库时，我们却连接不上去。\n\n**我这里以**`Navicat`为例，来连接服务器上的数据库。\n\n![](https://a.ideaopen.cn/JanYork/UAA940if.png)\n\n**果不其然，直接无法连接上。**\n\n> **我们来看看是什么原因导致的呢？**\n\n### 端口未开\n\n**首先我们需要看看，我们的服务器是否开启**`3306`端口，`3306`是数据库默认连接端口。\n\n![](https://a.ideaopen.cn/JanYork/eFdoAya2.png)\n\n**首先，我们来到面板的安全中放行一下**`3306`端口。\n\n**如果你是腾讯云或者阿里云的服务器，那可能还需要前往服务器管理面板开放端口。**\n\n**我的也是腾讯云的，所以还需要去腾讯云开启**`3306`。\n\n![](https://a.ideaopen.cn/JanYork/A3jlhVzc.png)\n\n**开启之后，我们还是连接不上去，为什么呢？**\n\n### 开启公共访问权限\n\n![](https://a.ideaopen.cn/JanYork/x1OKIOLW.png)\n\n`phpMyAdmin`是宝塔面板默认安装的数据库在线管理面板。\n\n**如果你只是需要开启单个数据库的连接权限，我们可以直接在面板中开启。**\n\n![](https://a.ideaopen.cn/JanYork/V07cqxG4.png)\n\n**这里，权限修改成所有人就可以，登录也是直接使用数据库对应的账户名与数据库密码。**\n\n#### 开启最高权限\n\n**我们想要访问所有的数据库，获得最高的权限，我们需要去**`phpMyAdmin`里面新建一个用户。\n\n![](https://a.ideaopen.cn/JanYork/yaVLAC67.png)\n\n![](https://a.ideaopen.cn/JanYork/BPKTh20S.png)\n\n![](https://a.ideaopen.cn/JanYork/EiLW9pmS.png)\n\n> **Host处默认，勾选全局权限，箭头指向的地方勾选好，然后就可以了。**\n\n**测试一下。**\n', 0, '2022-08-06 21:36:00', 1, 9, 3, 0, 3);
INSERT INTO `topic` VALUES (11, 'PHP的Laravel与Composer部署项目时常见问题', '**我们在部署PHP项目时，其实大部分的PHP项目会创建环境检测与一键****`Install`**页面。\n\n**但是，有许多的项目还采用了**`Composer`部署。\n\n### 什么是Composer\n\n**至于什么是**`Composer`，我就简单说一下。\n\n`Composer`是 PHP 的一个依赖管理工具。我们可以在项目中声明所依赖的外部工具库，`Composer` 会帮你安装这些依赖的库文件，有了它，我们就可以很轻松的使用一个命令将其他人的优秀代码引用到我们的项目中来。\n\n**相当于**`Node`里面的`npm`。\n\n### Laravel框架\n\n![](https://a.ideaopen.cn/JanYork/r7Ydfe2x.jpg)\n\n`Laravel`是一个开源PHP框架，功能强大且易于理解。它遵循模型 - 视图 - 控制器设计模式（MVC）。`Laravel`重用了不同框架的现有组件，这有助于创建Web应用程序。这样设计的Web应用程序更加结构化和实用。\n\n**具体特点我就不说了，其中比较显著的是，****依赖管理器完全基于`composer`**。\n\n### 报错:`php artisan key:generate`\n\n**这个错误，一般有三个问题，对应解决一下。**\n\n**报错1：PHP脚本占用内存太多，memory_limit默认128m不够用。**\n**PHP Fatal error: Allowed memory size of XXXXXX bytes exhausted 。**\n**Composer命令失败：**\n**Composer内部增加memory_limit到1.5G.**\n\n**报错2：PHP版本问题。**\n\n**这个就对症分析就可以。**\n\n> **注意的是，有时候不是你项目PHP版本不行，而是你`composer`的版本没有对应。**\n\n**报错3：需要更新composer。**\n\n```\n composer update\n```\n\n### Laravel 出现 No application encryption key has been specified.\n\n**首先，我们要看看有没有**`.env`文件，或者`.env`文件后还追加了`.example`后缀。\n\n**1、.env.example 改名使用命令 copy 修改为 .env。**\n\n> **此时可能还提示缺少了Key。我们使用命令生成。**\n\n**2、使用命令 ****`php artisan key:generate`** 获取密码，自动保存到 .env。\n\n**命令直接在终端运行就可以。**\n\n### Composer获取依赖超时\n\n**首先判断是否存在这个依赖包。**\n\n**其次，可能是国外的源，下载超时很正常，我们使用命令将源改为国内的源。**\n\n```\n composer config -g repo.packagist composer https://packagist.phpcomposer.com \n```\n\n### `Composer` 升级带来的坑: `Undefined index: name`\n\n**我在部署时也遇到了这个问题，我们可以直接尝试回滚版本或者降低版本，部署上去后再升级回来。**\n\n```\n Undefined index: name\n```\n\n**如果存在这个报错，那么我们可以这样：**\n\n```\n # composer 降级\n composer self-update --1\n \n # 再次安装，即可！！！\n composer install\n```\n\n**或者不需要再次安装，我们直接运行第一句也可以。**\n\n```\n composer self-update --1\n```\n\n**至于其他方法，不建议，我也就不写了。**\n', 0, '2022-08-06 21:36:42', 1, 6, 6, 0, 3);
INSERT INTO `topic` VALUES (12, 'Java并发编程之Lock(同步锁、死锁)', '**这篇文章是接着我上一篇文章来的。**\n\n> [**上一篇文章**](https://blog.ideaopen.cn/index.php/archives/42/)\n\n### 同步锁\n\n#### 为什么需要同步锁？\n\n**首先，我们来看看这张图。**\n\n![](https://a.ideaopen.cn/JanYork/3geRvpLS.png)\n\n**这是一个程序，多个对象进行抢票。**\n\n```\n package MovieDemo;\n \n public class ThM implements Runnable {\n     private int count = 10;\n     private int num = 0;\n     @Override\n     public void run() {\n         while (true) {\n                 if (count <= 0) {\n                     break;\n                 }\n                 num++;\n                 count--;\n                 try {\n                     Thread.sleep(100);\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                 System.out.println(Thread.currentThread().getName() + \"抢到了第\" + num + \"个票\"+\"剩余票数：\"+count);\n         }\n     }\n }\n```\n\n**线程类中代码很简单，就是当对象抢到票，**`count`就会记录，每被抢一张就少一张。\n\n> **当我们只有一个对象时，我们这个程序时正常的，但是当我们多个对象一起抢票时。因为线程是同时的，就像挤公交，多个人一起挤进去。**\n>\n> **所以这里会出现多个人抢了同一张票的问题。**\n\n**所以，当我们多个对象存在时，代码是这样运行的：**\n\n1. **首先，多个线程的对象并发，也就是同时去抢票。**\n2. **抢票的时候，多个对象都同时都抢到了票。**\n3. **系统将会认为，这些对象都抢到了票，但是票只有一张，此时系统就出现错误了。**\n4. **此时的关系就是****几个人共享一张票**。\n\n**那再现实生活中，肯定不能这样，我们需要排队，肯定只能一个人对应一张票。**\n\n```\n package MovieDemo;\n \n public class Test {\n     public static void main(String[] args) {\n         ThM m = new ThM();\n         Thread t = new Thread(m);\n         Thread t1 = new Thread(m);\n         Thread t2 = new Thread(m);\n         t1.start();\n         t2.start();\n         t.start();\n     }\n }\n```\n\n**这里有三个线程对象！**\n\n**我们运行程序看看结果。**\n\n```\n Thread-0抢到了第3个票剩余票数：7\n Thread-1抢到了第3个票剩余票数：7\n Thread-2抢到了第3个票剩余票数：7\n     \n Thread-0抢到了第6个票剩余票数：4\n Thread-2抢到了第6个票剩余票数：4\n Thread-1抢到了第6个票剩余票数：4\n     \n Thread-1抢到了第9个票剩余票数：1\n Thread-0抢到了第9个票剩余票数：1\n Thread-2抢到了第9个票剩余票数：1\n     \n Thread-1抢到了第10个票剩余票数：0\n```\n\n**很明显看出来，这个程序就不对劲，0、1、2这三个人都抢到了同一张票。**\n\n**那我们如何解决这种问题呢？**\n\n#### 同步锁的使用\n\n> **我们举个例子，一个公共厕所，一张门，你和一堆人都想进去上厕所，你此时进去了，但是其他人也要进来，你该怎么办？**\n>\n> **此时，你明智的将厕所的门拉上（锁上），等你上完厕所，再开锁，下一位继续如此。**\n\n**`synchronize(Object)`**就是我们所说的这把锁。\n\n`Object`是对象。\n\n**我们先看看这个“锁”的作用：**\n\n> **1.****每个对象**都有一个与它相关的内部锁（intrinsic lock）或者叫监视器锁（monitor lock）**\n> **2.第一个执行到同步语句的线程可以获得 obj 的内部锁，在**执行完**同步语句中的代码后**释放此锁**\n> **3.只要一个线程持有了内部锁，那么****其它线程在同一时刻将无法再获得此锁**，当它们试图获取此锁时，将会**进入BLOCKED状态**\n> **4.多个线程访问同一个 **`synchronized(Object)`语句时，`Object`必须是**同一个对象**，才能起到同步的作用。\n\n##### 锁方法\n\n**同步锁用法很多，锁方法我们可以这样：**\n\n> **实例方法：synchronized (this)**\n> **静态方法：synchronized (Class对象)**\n\n**注意的是，`synchronized`不能修饰构造方法！！！**\n\n##### 锁语句\n\n> **但是我们一般不喜欢直接锁住方法，就像，你有一个宝箱，你只需要锁住箱子，没必要将箱子所在的房子锁上。**\n\n**同步语句比同步方法更灵活一点**\n**同步语句可以精确控制需要加锁的代码范围，减少处于BLOCKED状态的线程,充分利用劳动力**\n\n##### 实际操作\n\n**还是上面那个方法，我给它运行的部分加上锁！**\n\n```\n package MovieDemo;\n \n public class ThM implements Runnable {\n     private int count = 10;\n     private int num = 0;\n     @Override\n     public void run() {\n         while (true) {\n             synchronized (this) {\n                 if (count <= 0) {\n                     break;\n                 }\n                 num++;\n                 count--;\n                 try {\n                     Thread.sleep(100);\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                 System.out.println(Thread.currentThread().getName() + \"抢到了第\" + num + \"个票\"+\"剩余票数：\"+count);\n             }\n         }\n     }\n }\n```\n\n**实际上我锁住的是这一部分。**\n\n```\n synchronized (this) {\n     if (count <= 0) {\n         break;\n     }\n     num++;\n     count--;\n     try {\n         Thread.sleep(100);\n     } catch (InterruptedException e) {\n         e.printStackTrace();\n     }\n     System.out.println(Thread.currentThread().getName() + \"抢到了第\" + num + \"个票\"+\"剩余票数：\"+count);\n }\n```\n\n**`this`关键词指代当前线程的对象！**\n\n**我们运行一下，看看还会不会出现之前的状况。**\n\n![](https://a.ideaopen.cn/JanYork/kFhbGV8F.png)\n\n**可能第二个对象运气好哈，就第一张票不是对象2抢到的。**\n\n**但是，现在就是完全不会出现两个人抢到同一张票的故障了。**\n\n#### 特别注意\n\n**运行类代码现在我改一下。**\n\n```\n package MovieDemo;\n \n public class Test {\n     public static void main(String[] args) {\n         ThM t = new ThM();\n         ThM t1 = new ThM();\n         ThM t2 = new ThM();\n         t.start();\n         t2.start();\n         t1.start();\n     }\n }\n```\n\n**此时我运行一下，会发生先去的故障。**\n\n![](https://a.ideaopen.cn/JanYork/JATSvzd9.png)\n\n**因为此时，你的锁，锁的不是同一个对象。**\n\n**而之前。**\n\n```\n ThM m = new ThM();\n Thread t = new Thread(m);\n Thread t1 = new Thread(m);\n Thread t2 = new Thread(m);\n```\n\n**虽然是三个线程对象，但是他们`new`的对象都是`m`，也就是`ThM`类的对象，是同一个！**\n\n### 线程同步的优缺\n\n**使用了线程同步技术后：**\n\n1. **虽然解决了线程安全问题，但是****降低了程序的执行效率**。\n2. **因为加了锁就会有处于等待的线程，****多了加锁解锁的操作**。\n3. **所以在真正有必要的时候，才使用线程同步技术。**\n\n### 死锁\n\n#### 什么是死锁：\n\n**两个或者多个线程永远阻塞，相互等待对方的锁**\n\n**是并发下一组互相竞争资源的线程因互相等待导致永久阻塞的现象**\n\n`CSDN`上面一个大佬的举例就很好理解：\n\n> **线程a占用对象锁1，线程b占用对象锁2**\n>\n> **线程a需要继续占用对象锁2才能往下执行，所以线程a需要等待线程b释放对象锁2**\n>\n> **线程b需要继续占用对象锁1才能往下执行，同样也需要线程a释放对象锁1**\n>\n> **由于这2个线程都不释放自己已经占用的锁，所以这2个线程会处于无限等待状态**\n\n**我说得比较通俗，就是，挤公交车，两个人互挤，但是谁也上不去！**\n\n![](https://a.ideaopen.cn/JanYork/wjmuArZp.png)\n\n**这是那位博主的举例，很有意思哈。**\n\n#### 为何会产生死锁？\n\n1. **互斥**\n2. **占有且等待**\n3. **不可抢占**\n4. **循环等待**\n\n**怎么说呢？**\n\n* **互斥——>共享资源只能被一个线程占用，比如一个座位，只能容纳一个人，两个人都想做，谁也不让谁，那就都坐不了！**\n* **占有且等待——>假设你此时有一个玩具，别的小朋友哪儿也有一个玩具，你想要两个玩具，你就拿着自己玩具不放手，然后等另一个小朋友不玩了，你就获得了两个玩具。**\n* **不可抢占——>资源只能由持有它的线程自愿释放，其它线程不可强行占有该资源-无法释放对方资源。说白了，你不能抢别人的东西，(除非别人让你抢)。**\n* **循环等待——>这个就拿上面的玩具解释，假设你此时有一个玩具，别的小朋友哪儿也有一个玩具，你想要两个玩具，你就拿着自己玩具不放手，然后等另一个不玩了再去拿，但是另一个小朋友也是一样，等你不玩了再去拿。此时就僵持了。**\n\n#### 如何解决锁死的情况\n\n**首先！不能强制！不能直接去去掉死锁，这样不能保证线程安全。**\n**那怎么办？找原因！解铃还须系铃人。也就是说，我们要打破上面4种原因中的任意一种。**\n\n**大佬博客说的很好，我就直接搬过来了！**\n\n![](https://a.ideaopen.cn/JanYork/BlvOUBU1.png)\n\n[大佬博客在这](https://blog.csdn.net/weixin_59624686/article/details/124119558)\n\n### 线程8锁\n\n> **• 一个对象里面如果有****多个synchronized方法**，某一个时刻内，**只要一个线程**去**调用其中的一个**synchronized**方法**了，**其它的线程都只能等待**，换句话说，某一个时刻内，只能有唯一一个线程去访问这些synchronized方法\n>\n> **• ****锁的是当前对象**this，被锁定后，其它的线程都不能进入到当前对象的其它的synchronized方法\n>\n> **• 加个普通方法后发现和同步锁无关**\n>\n> **• 换成两个对象后，不是同一把锁了，情况立刻变化。**\n>\n> **• 都换成静态同步方法后，情况又变化**\n>\n> **• ****所有的非静态同步方法用的都是同一把锁**——实例**对象**本身，也就是说如果一个实例对象的非静态同步方法获取锁后，该实例对象的**其他非静态同步方法必须等待获取锁的方法释放锁后才能获取锁**，可是别的实例对象的非静态同步方法因为跟该实例对象的非静态同步方法用的是不同的锁，所以毋须等待该实例对象已获取锁的非静态同步方法释放锁就可以获取他们自己的锁。\n>\n> **• ****所有的静态同步方法用的也是同一把锁**——**类**对象本身，这两把锁是两个**不同的对象**，所以**静态同步方法与非静态同步方法之间是不会有竞态条件**的。但是一旦**一个静态同步方法获取锁后**，**其他的静态**同步**方法**都**必须等待**该方法释放锁后**才能获取**锁，而不管是同一个实例对象的静态同步方法之间，还是不同的实例对象的静态同步方法之间，**只要它们同一个类的实例对象**，都得这样！！！\n\n**线程8锁可以说是个****概念**！\n\n**我们记住以下两点：**\n\n> **① 非静态方法的默认锁是this ，静态方法的默认锁是class**\n>\n> **②某一时刻内，只能有一个线程有锁，无论几个方法**\n>\n', 0, '2022-08-06 21:37:09', 1, 1, 7, 0, 3);
INSERT INTO `topic` VALUES (13, 'npm与cnpm的区别', '### NPM\n\n**对于前端开发者而言，**`Node.js`想必不会陌生，他为我们提供了一个标准的运行环境，基于 Chrome V8 引擎。\n\n![](https://a.ideaopen.cn/JanYork/6e0QnvzB.png)\n\n**而我们的**`npm`就是node中的一个包管理器，如同`CentOS`的`yum`。\n\n**使用场景如下：**\n\n> **1.从NPM服务器上下载别人编写的第三方包到本地使用。**\n>\n> **2.从NPM服务器上下载并安装别人编写的命令行程序到本地使用。**\n>\n> **3.允许用户将自己编写的包或命令行程序上传到NPM服务器上供别人使用。**\n\n**但是，有时候，你们发现这个**`npm`下载某些大一点的依赖包很慢，所以你会选择换源，使用阿里的镜像或者淘宝的镜像。\n\n### CNPM\n\n**实际上，我们的**`cnpm`是一个国内的包管理，是阿里巴巴淘宝团队将`npm`中的所有插件都同步到了国内的服务器。\n\n**但是，同时**`cnpm`也是`npm`的一个插件。\n', 0, '2022-08-06 21:37:32', 1, 10, 4, 0, 3);
INSERT INTO `topic` VALUES (14, '原生JavaScript写一个贪吃蛇', '### 前言\n\n![](https://a.ideaopen.cn/JanYork/xUUdB9QW.png)\n\n**看到掘金上有这样一种效果，感觉很好看，就是那种毛玻璃效果，于是想试试写一个登录页面并且实现遮罩，但是写成了开始游戏，可是光一个开始游戏也没意思，干脆写一个小游戏吧，直接试试贪吃蛇。**\n\n### 如何实现\n\n```\n     <div class=\"main\">\n         <!-- 毛玻璃遮罩盒子 -->\n         <div id=beginBox>\n             <div class=\"btn\" id=\"begin\">开始游戏</div>\n         </div>\n         <!-- 蛇 -->\n         <div class=\"map\" id=\"map\"></div>\n     </div>\n```\n\n**这是我**`HTML`中`body`部分的代码，`main`是主体，也就是游戏场地。\n\n`beginBox`是开始游戏的界面，我再这个盒子里面实现了毛玻璃遮罩，还不错。\n\n**然后下面那个盒子就是蛇了。**\n\n**如果你也想试试毛玻璃遮罩效果，可以看看我的**`css`。\n\n![](https://a.ideaopen.cn/JanYork/zDpdZmit.png)\n\n**直接看**`js`代码吧。\n\n**首先，我们先定义好全局变量，做好准备。**\n\n```\n // 蛇的速度，即计时器的间隔时间\n var SnakeTime = 200;\n // 蛇的身体\n var map = document.getElementById(\'map\');\n```\n\n**速度是计时器控制的。**\n\n**接下来，我们创建一个方法，**`Snake()`，这是蛇整个的构造方法。\n\n**我再这个方法里面写了蛇的一些东西。**\n\n**我的蛇初始是3个10*10的正方形拼成的。**\n\n```\n // 设置蛇的宽、高、默认走的方向\n     this.width = 10;\n     this.height = 10;\n     this.direction = \'right\';\n```\n\n**所以方法里面，我首先确定了宽高，以及使用**`direction`属性确定方向。\n\n**然后，我们这个蛇的三个点，需要按照规律排好，我这里使用了一个数组。**\n\n```\n this.body = [\n     { x: 2, y: 0 },   // 蛇头，第一个点\n     { x: 1, y: 0 },   // 蛇脖子，第二个点\n     { x: 0, y: 0 }    // 蛇尾，第三个点\n ];\n```\n\n**这还只是蛇的初始化状态哈！蛇还没创建。**\n\n**然后我们来创建蛇。**\n\n**定义一个方法。这个方法在**`snake`方法里面。\n\n```\n // 显示蛇\n     this.display = function () {\n         // 创建蛇\n         for (var i = 0; i < this.body.length; i++) {\n             if (this.body[i].x != null) {   \n                 // 当吃到食物时，x==null，不能新建，不然会在0，0处新建一个\n                 var s = document.createElement(\'div\');\n                 // 将节点保存到状态中，以便于后面删除\n                 this.body[i].flag = s;\n                 // 设置宽高\n                 s.style.width = this.width + \'px\';\n                 s.style.height = this.height + \'px\';\n                 //设置颜色\n                 s.style.backgroundColor = \'yellow\';\n                 // 设置位置\n                 s.style.position = \'absolute\';\n                 s.style.left = this.body[i].x * this.width + \'px\';\n                 s.style.top = this.body[i].y * this.height + \'px\';\n                 // 添加进去\n                 map.appendChild(s);\n             }\n         }\n         //设置蛇头的颜色\n         this.body[0].flag.style.backgroundColor = \'orange\';\n     };\n```\n\n**在这个方法里面，**`s`就是一个div，而`body`数组的长度是3，我们循环3此，依次追加，就拼成了，头、身、尾。\n\n**但是，此时蛇，是出来了，但是不能动啊....**\n\n**所以在定义一个方法，也是在**`snake`方法里面。\n\n```\n this.run = function () {\n         // 后一个元素到前一个元素的位置\n         for (var i = this.body.length - 1; i > 0; i--) {\n             this.body[i].x = this.body[i - 1].x;\n             this.body[i].y = this.body[i - 1].y;\n         }\n \n         // 根据方向处理蛇头\n         switch (this.direction) {\n             case \"left\":\n                 this.body[0].x -= 1;\n                 break;\n             case \"right\":\n                 this.body[0].x += 1;\n                 break;\n             case \"up\":\n                 this.body[0].y -= 1;\n                 break;\n             case \"down\":\n                 this.body[0].y += 1;\n                 break;\n         }\n \n         // 判断是否出界,根据蛇头判断\n         if (this.body[0].x < 0 || this.body[0].x > 150 || this.body[0].y < 0 || this.body[0].y > 60) {\n             clearInterval(timer);  \n             // 清除定时器\n             alert(\"出界啦，游戏结束！\");\n             document.getElementById(\'beginBox\').style.display = \'block\';\n             // 删除旧的\n             for (var i = 0; i < this.body.length; i++) {\n                 if (this.body[i].flag != null) {   \n                     // 如果刚吃完就死掉，会加一个值为null的\n                     map.removeChild(this.body[i].flag);\n                 }\n             }\n             this.body = [   // 回到初始状态，\n                 { x: 2, y: 0 },\n                 { x: 1, y: 0 },\n                 { x: 0, y: 0 }\n             ];\n             this.direction = \'right\';\n             this.display();   // 显示初始状态\n             return false;   // 结束\n         }\n \n         // 判断蛇头吃到食物，xy坐标重合，\n         if (this.body[0].x == food.x && this.body[0].y == food.y) {\n             // 蛇加一节，因为根据最后节点定，下面display时，会自动赋值的\n             this.body.push({ x: null, y: null, flag: null });\n             // 获取蛇的长度\n             var len = this.body.length;\n             // 根据蛇的长度，设置定时器频率SnakeTime\n             SnakeTime = SnakeTime - (len - 3) * 5;\n             // SnakeTime最低不能小于40\n             if (SnakeTime < 40) {\n                 SnakeTime = 40;\n             }\n             refresh();\n             // 清除食物,重新生成食物\n             map.removeChild(food.flag);\n             food.display();\n         }\n \n         // 吃到自己死亡，从第五个开始与头判断，因为前四个永远撞不到\n         for (var i = 4; i < this.body.length; i++) {\n             if (this.body[0].x == this.body[i].x && this.body[0].y == this.body[i].y) {\n                 clearInterval(timer);   // 清除定时器，\n                 alert(\"你咬到了自己，游戏结束！\");\n                 // 显示id为beginBox的毛玻璃遮罩盒子\n                 document.getElementById(\'beginBox\').style.display = \'block\';\n                 // 删除旧的\n                 for (var i = 0; i < this.body.length; i++) {\n                     if (this.body[i].flag != null) {   \n                         // 如果刚吃完就死掉，会加一个值为null的\n                         map.removeChild(this.body[i].flag);\n                     }\n                 }\n                 this.body = [   // 回到初始状态，\n                     { x: 2, y: 0 },\n                     { x: 1, y: 0 },\n                     { x: 0, y: 0 }\n                 ];\n                 this.direction = \'right\';\n                 this.display();   // 显示初始状态\n                 return false;   // 结束\n             }\n         }\n \n         // 先删掉初始的蛇，在显示新蛇\n         for (var i = 0; i < this.body.length; i++) {\n             if (this.body[i].flag != null) {   \n                 // 当吃到食物时，flag是等于null，且不能删除\n                 map.removeChild(this.body[i].flag);\n             }\n         }\n         // 重新显示蛇\n         this.display();\n     }\n }\n```\n\n**这段代码有点多哈。我们拆开看。**\n\n```\n // 后一个元素到前一个元素的位置\n for (var i = this.body.length - 1; i > 0; i--) {\n       this.body[i].x = this.body[i - 1].x;\n       this.body[i].y = this.body[i - 1].y;\n }\n```\n\n**首先，蛇是一节节动的，所以我们使用循环，让他后一个替代前一个的位置。**\n\n**然后，根据**`direction`属性来判断方向。\n\n```\n // 根据方向处理蛇头\n         switch (this.direction) {\n             case \"left\":\n                 this.body[0].x -= 1;\n                 break;\n             case \"right\":\n                 this.body[0].x += 1;\n                 break;\n             case \"up\":\n                 this.body[0].y -= 1;\n                 break;\n             case \"down\":\n                 this.body[0].y += 1;\n                 break;\n         }\n```\n\n**然后，我们就要定义出界后游戏结束了，这个就不多说了。**\n\n```\n// 判断是否出界,根据蛇头判断\n        if (this.body[0].x < 0 || this.body[0].x > 150 || this.body[0].y < 0 || this.body[0].y > 60) {\n            clearInterval(timer);  \n            // 清除定时器\n            alert(\"出界啦，游戏结束！\");\n            document.getElementById(\'beginBox\').style.display = \'block\';\n            // 删除旧的\n            for (var i = 0; i < this.body.length; i++) {\n                if (this.body[i].flag != null) {   \n                    // 如果刚吃完就死掉，会加一个值为null的\n                    map.removeChild(this.body[i].flag);\n                }\n            }\n            this.body = [   // 回到初始状态，\n                { x: 2, y: 0 },\n                { x: 1, y: 0 },\n                { x: 0, y: 0 }\n            ];\n            this.direction = \'right\';\n            this.display();   // 显示初始状态\n            return false;   // 结束\n        }\n```\n\n**这里的x和y都是整体的**`px`/蛇的盒子高宽，也就是除10，`1 = 10px`。\n\n**然后，就是吃食物了。**\n\n**当蛇头与食物相遇，我们就认为它吃了食物，于是我们通过位置来判断吃东西。**\n\n```\n        // 判断蛇头吃到食物，xy坐标重合，\n        if (this.body[0].x == food.x && this.body[0].y == food.y) {\n            // 蛇加一节，因为根据最后节点定，下面display时，会自动赋值的\n            this.body.push({ x: null, y: null, flag: null });\n            // 获取蛇的长度\n            var len = this.body.length;\n            // 根据蛇的长度，设置定时器频率SnakeTime\n            SnakeTime = SnakeTime - (len - 3) * 5;\n            // SnakeTime最低不能小于40\n            if (SnakeTime < 40) {\n                SnakeTime = 40;\n            }\n            refresh();\n            // 清除食物,重新生成食物\n            map.removeChild(food.flag);\n            food.display();\n        }\n```\n\n> **说明一下：这个**`flag`是当时创建食物时留下的一个对象。\n>\n> ![](https://a.ideaopen.cn/JanYork/vu9omLrb.png)\n>\n> **创建食物方法我写在了后面，一步步看吧。**\n>\n> **而下面这部分代码：**\n>\n> ```\n> 			// 获取蛇的长度\n>          var len = this.body.length;\n>          // 根据蛇的长度，设置定时器频率SnakeTime\n>          SnakeTime = SnakeTime - (len - 3) * 5;\n>          // SnakeTime最低不能小于40\n>          if (SnakeTime < 40) {\n>              SnakeTime = 40;\n>          }\n> ```\n>\n> **是为了可以动态的实现蛇吃到食物后，速度加快。**\n>\n> **这里，我有一个**`refresh();`这个后面再看。\n\n**然后就是咬到自己，游戏结束，这个不多说。**\n\n**现在就到了构造食物了。**\n\n```\n// 构造食物\nfunction Food() {\n    this.width = 10;\n    this.height = 10;\n\n    this.display = function () {\n        // 创建一个div(一节蛇身)\n        var f = document.createElement(\'div\');\n        this.flag = f;\n        f.style.width = this.width + \'px\';\n        f.style.height = this.height + \'px\';\n        f.style.background = \'red\';\n        f.style.position = \'absolute\';\n        this.x = Math.floor(Math.random() * 80);\n        this.y = Math.floor(Math.random() * 40);\n        f.style.left = this.x * this.width + \'px\';\n        f.style.top = this.y * this.height + \'px\';\n        map.appendChild(f);\n    }\n}\n```\n\n**实际上，这个“食物”就是创建了蛇的一节身体。**\n\n**后面也可以看见，有一个追加到蛇身。**\n\n```\n map.appendChild(f);\n```\n\n**看到这，你可能还疑惑，不应该啊，这也无法分辨出明确的蛇和食物啊，也就是说，很抽象啊。**\n\n**因为我最后面，还有一个创建对象过程。**\n\n```\nvar snake = new Snake();\nvar food = new Food();\n// 初始化显示\nsnake.display();   \nfood.display();\n```\n\n**将方法作为了一个对象。**\n\n**而我们为了控制蛇的方向，我们需要使用键盘事件来改变蛇的属性。**\n\n```\n// 给body加按键事件，上下左右\ndocument.body.onkeydown = function (e) {\n    // 有事件对象就用事件对象，没有就自己创建一个，兼容低版本浏览器\n    var ev = e || window.event;\n\n    switch (ev.keyCode) {\n        case 38:\n            if (snake.direction != \'down\') {   // 不允许返回，向上的时候不能向下\n                snake.direction = \"up\";\n            }\n            break;\n        case 40:\n            if (snake.direction != \"up\") {\n                snake.direction = \"down\";\n            }\n            break;\n        case 37:\n            if (snake.direction != \"right\") {\n                snake.direction = \"left\";\n            }\n            break;\n        case 39:\n            if (snake.direction != \"left\") {\n                snake.direction = \"right\";\n            }\n            break;\n        // 兼容WASD键  \n        case 87:\n            if (snake.direction != \"down\") {\n                snake.direction = \"up\";\n            }\n            break;\n        case 83:\n            if (snake.direction != \"up\") {\n                snake.direction = \"down\";\n            }\n            break;\n        case 65:\n            if (snake.direction != \"right\") {\n                snake.direction = \"left\";\n            }\n            break;\n        case 68:\n            if (snake.direction != \"left\") {\n                snake.direction = \"right\";\n            }\n            break;\n    }\n\n};\n```\n\n**当然，我这里做了兼容，**`WASD`和上下左右键都通用控制。\n\n**最后就是点击开始游戏的事件了。**\n\n```\n// 获取开始按钮\nvar btn = document.getElementById(\'begin\');\n// 点击开始游戏事件\nbtn.onclick = function () {\n    // 开始按钮毛玻璃幕布\n    var parent = this.parentNode;\n    // 隐藏开始按钮\n    parent.style.display = \'none\';\n    // 获取定时器时间\n    let time = SnakeTime;\n\n    timer = setInterval(function () {\n        snake.run();\n    }, time);\n}\n```\n\n**我们这里面是使用了**`setInterval`来实现不断的前进走动。\n\n```\n    timer = setInterval(function () {\n        snake.run();\n    }, time);\n```\n\n> **但是啊，因为这个计时器他是不刷新的，也就是说启动时，**`time = 200`，然后你改变`time`的值。\n>\n> **此时`time`值确实变了，但是，这个`setInterval`它只认定第一次的设置，它不会动态改变。**\n\n**那怎么办呢？首先，分析，他要什么时候做出**`time`值的刷新，肯定是吃到食物的时候对吧。\n\n**于是，我们写一个刷新函数。**\n\n```\n// 定义刷新定时器方法\nfunction refresh() {\n    // 停止定时器\n    clearInterval(timer);\n    // 刷新定时器\n    timer = setInterval(function () {\n        snake.run();\n        console.log(SnakeTime);\n    }, SnakeTime);\n}\n```\n\n**然后，你们就知道我上面说的**`refresh()`方法是什么了吧？就是用于动态刷新`setInterval`的。\n\n**这样，这个贪吃蛇就写好了。**\n\n### 效果\n\n#### 开始页面\n\n![](https://a.ideaopen.cn/JanYork/V8OguMzz.png)\n\n#### 游戏界面\n\n![](https://a.ideaopen.cn/JanYork/h1exP9VN.png)', 0, '2022-08-06 21:31:51', 1, 10, 11, 0, 3);
INSERT INTO `topic` VALUES (15, 'Java并发编程之多线程', '### 什么是多线程？\n\n我们首先，先要了解什么是 **进程**，什么是**线程**。\n\n**首先，我们看看进程。我们如果允许一个程序，它卡死了，我们通常会去任务管理器里面将进程结束。**\n\n![](https://a.ideaopen.cn/JanYork/kxa14h0w.png)\n\n**所以，这里所看见的，就是进程。**\n\n**那么，何为线程呢？**\n\n**首先，看看来自知乎的解释：**\n\n![](https://a.ideaopen.cn/JanYork/667zYthy.png)\n\n> **线程是进程中执行运算的****最小单位**，是进程中的一个**实体**，是被系统独立调度和分派的**基本单位**，线程自己**不拥有系统资源**，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。\n\n**啥意思呢？通俗的说。**`QQ` 和 `Chrome` 浏览器是**两个进程**，`Chrome`**进程里面有很多线程**，例如 `HTTP` 请求线程、事件响应线程、渲染线程等等，**线程的并发执行**使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件，同时你开多个窗口浏览网页也没问题。\n\n**想了解得更详细点，可以看看知乎这一篇——>**[进程和线程](https://zhuanlan.zhihu.com/p/114453309)\n\n**然后，腾讯云还有一篇，链接中文，不好分享，我直接截图。**\n\n![](https://a.ideaopen.cn/JanYork/d4AZVllG.png)\n\n### 多线程优势\n\n**多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。**\n\n**这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。**\n\n**多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。**\n\n**优势很多，我就直接去网上搬运来了，能达到学会的目的就可以，不在意是不是自己描述出来。**\n\n> **一、多线程优势**\n>\n> **采用多线程技术的应用程序可以更好地利用系统资源。主要优势在于充分利用了CPU的空闲时间片，用尽可能少的时间来对用户的要求做出响应，使得进程的整体运行效率得到较大提高，同时增强了应用程序的灵活性。由于同一进程的所有线程是共享同一内存，所以不需要特殊的数据传送机制，不需要建立共享存储区或共享文件，从而使得不同任务之间的协调操作与运行、数据的交互、资源的分配等问题更加易于解决。**\n>\n> **线程同步，在多线程应用中，考虑不同线程之间的数据同步和防止死锁。当两个或多个线程之间同时等待对方释放资源的时候就会形成线程之间的死锁。为了防止死锁的发生，需要通过同步来实现线程安全。在Visual Basic中提供了三种方法来完成线程的同步。在Java中可用**`synchronized`关键字。\n>\n> **二、代码域同步**\n>\n> **使用**`Monitor`类可以同步静态/实例化的方法的全部代码或者部分代码段。\n>\n> **三、手工同步**\n>\n> **可以使用不同的同步类创建自己的同步机制。这种同步方式要求你自己手动的为不同的域和方法同步，这种同步方式也可以用于进程间的同步和解除由于对共享资源的等待而造成的死锁。**\n>\n> **四、上下文同步**\n>\n> **使用**`SynchronizationAttribute`为`ContextBoundObject`对象创建简单的，自动同步。这种同步方式仅用于实例化的方法和域的同步。所有在同一个上下文域的对象共享同一个锁。\n>\n> **总结多线程的好处，使用线程可以把占据时间长的程序中的任务放到后台去处理；用户界面更加吸引人,这样比如用户点击了一个按钮去触发某件事件的处理,可以弹出一个进度条来显示处理的进度；程序的运行效率可能会提高；在一些等待的任务实现上如用户输入,文件读取和网络收发数据等，线程就比较有用了。**\n\n**以上很多部分，如果看不懂，可能是许多东西还未涉及到。**\n\n### 实现多线程\n\n**我们实现Java的多线程呢，有4中方法。**\n\n**	**1.**继承Thread类创建线程**\n\n**	**2.**实现Runnable接口创建线程**\n\n**	**3.**实现Callable接口通过`FutureTask`包装器来创建Thread线程**\n\n**	**4.**使用`ExecutorService`、`Callable`、`Future`实现有返回结果的线程（线程池方式）**\n\n### 多线程如何运行？\n\n**菜鸟教程其他的不行，图还是好用，我们看看这张图。**\n\n![](https://a.ideaopen.cn/JanYork/qPVbA3Bo.jpg)\n\n**如果正常运行的话，路径就是这样的：**\n\n> **新建线程——>就绪状态——>运行状态——>死亡状态**\n\n![](https://a.ideaopen.cn/JanYork/47sg3rjc.png)\n\n### Thread类创建线程\n\n**使用**`Thread`类创建线程，我们首先需要继承它，并且重写`run`方法。\n\n**满足这两个条件就可以。**\n\n![](https://a.ideaopen.cn/JanYork/E9EH81nF.png)\n\n**我这里，为了体现多线程的并发，我使用了**`Time`下的`LocalTime`类，来体现时间的变化。\n\n`sleep()`方法可以设置延迟，也就是说，运行一次后，我这里需要`1000`毫秒在运行下一次，我加个循环运行一下。\n\n```\n try {\n     for (int i = 0; i < 3; i++) {\n         Thread.sleep(1000);\n         System.out.println(this.getName()+\"多线程输出\"+LocalTime.now());\n     }\n } catch (InterruptedException e) {\n     e.printStackTrace();\n }\n```\n\n**在创建一个入口类，运行起来。**\n\n```\n package Thread;\n public class ThreadTest {\n     public static void main(String[] args) {\n         ThreadDemo t = new ThreadDemo();\n         t.start();\n         ThreadDemo t1 = new ThreadDemo();\n         t1.start();\n         ThreadDemo t2 = new ThreadDemo();\n         t2.start();\n     }\n }\n```\n\n**这里创建了三个线程，使用**`start()`方法可以运行起来，调用`run`方法。\n\n**注意！！！不是**`.run()`，是`.start()`。\n\n![](https://a.ideaopen.cn/JanYork/qfVJrvyM.png)\n\n**运行下了，结果如图。**\n\n```\n Thread-2多线程输出18:29:22.345\n Thread-1多线程输出18:29:22.345\n Thread-0多线程输出18:29:22.345\n     //sleep(1000)，延迟1s后继续运行\n Thread-1多线程输出18:29:23.356\n Thread-2多线程输出18:29:23.356\n Thread-0多线程输出18:29:23.356\n     //sleep(1000)，延迟1s后继续运行\n Thread-1多线程输出18:29:24.357\n Thread-2多线程输出18:29:24.357\n Thread-0多线程输出18:29:24.357\n```\n\n**看看后面的时间，**`T`、`T1`、`T2`都是同时运行的，比如第一次，都是`18:29:22.345`这个时间。\n\n**至于为啥三个对象顺序不一样，这就相当于挤公交，鬼知道谁先挤进去呢？嘿嘿。**\n\n#### Thread 方法\n\n**下表列出了Thread类的一些重要方法：**\n\n\n| **序号** | **方法描述**                                                                                                                               |\n| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| **1**    | **public void start()**使该线程开始执行；**Java**虚拟机调用该线程的 run 方法。                                                             |\n| **2**    | **public void run()**如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。 |\n| **3**    | **public final void setName(String name)**改变线程名称，使之与参数 name 相同。                                                             |\n| **4**    | **public final void setPriority(int priority)**更改线程的优先级。                                                                          |\n| **5**    | **public final void setDaemon(boolean on)**将该线程标记为守护线程或用户线程。                                                              |\n| **6**    | **public final void join(long millisec)**等待该线程终止的时间最长为 millis 毫秒。                                                          |\n| **7**    | **public void interrupt()**中断线程。                                                                                                      |\n| **8**    | **public final boolean isAlive()**测试线程是否处于活动状态。                                                                               |\n\n**上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。**\n\n\n| **序号** | **方法描述**                                                                                                                                        |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **1**    | **public static void yield()**暂停当前正在执行的线程对象，并执行其他线程。                                                                          |\n| **2**    | **public static void sleep(long millisec)**在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。 |\n| **3**    | **public static boolean holdsLock(Object x)**当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。                                            |\n| **4**    | **public static Thread currentThread()**返回对当前正在执行的线程对象的引用。                                                                        |\n| **5**    | **public static void dumpStack()**将当前线程的堆栈跟踪打印至标准错误流。                                                                            |\n\n**方法用法都一样，请自行斟酌。**\n\n### Runnable接口创建线程\n\n**因为和**`Thread`创建线程类似，我就直接放代码了。\n\n```\n package Runnable;\n \n import java.time.LocalTime;\n \n public class RunnableDemo implements Runnable {\n     @Override\n     public void run() {\n         //设置延迟\n         try {\n             for (int i = 0; i < 3; i++) {\n                 Thread.sleep(1000);\n                 System.out.println(Thread.currentThread().getName()+\"多线程输出\"+ LocalTime.now());\n             }\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         }\n     }\n }\n```\n\n**这里也是两个条件。**\n\n`implements Runnable`和`@Override run`。继承接口，重写`run`方法。\n\n`Thread.currentThread().getName()`这个是返回当前调用的主线程的名字。\n\n**运行类就有点不一样了。**\n\n```\n package Runnable;\n \n public class RunnableTest {\n     public static void main(String[] args) {\n         RunnableDemo r = new RunnableDemo();\n         Thread t = new Thread(r);\n         t.start();\n         RunnableDemo r1 = new RunnableDemo();\n         Thread t1 = new Thread(r1);\n         t1.start();\n         RunnableDemo r2 = new RunnableDemo();\n         Thread t2 = new Thread(r2);\n         t2.start();\n     }\n }\n```\n\n```\n //创建线程对象\n RunnableDemo r = new RunnableDemo();\n //将线程对象放在Thread类对象重\n Thread t = new Thread(r);\n //调用start方法\n t.start();\n```\n\n**运行结果也一样。**\n\n![](https://a.ideaopen.cn/JanYork/ephBnuhP.png)\n\n#### 为何要用`Runnable`\n\n**那有人就说了，为啥这个东西多了一步，还麻烦，我怎么不直接用**`Thread`呢？\n\n**我们首先要明白，Java语言****不可以多继承**。\n\n> **两者实现方式带来最明显的区别就是，由于Java不允许多继承，因此实现了Runnable接口可以再继承其他类，但是Thread明显不可以。**\n\n> **Runnable可以实现多个相同的程序代码的线程去共享同一个资源，而Thread并不是不可以，而是相比于Runnable来说，不太适合。**\n\n### 线程的调度\n\n**线程的调度的操作，有如下常用方法。**\n\n\n| **方法**                            | **作用**                                     |\n| ------------------------------------- | ---------------------------------------------- |\n| **int getPriority()**               | **返回线程的优先级**                         |\n| **void setPrority(int newPrority)** | **更改线程的优先级**                         |\n| **boolean isAlive()**               | **判断线程是否处于活动状态**                 |\n| **void join()**                     | **使进程中其他线程等待该线程终止后再运行**   |\n| **void yield()**                    | **暂停当前正在执行的线程对象并允许其他线程** |\n\n#### 线程优先级\n\n```\n RunnableDemo r = new RunnableDemo();\n Thread t = new Thread(r);\n //设置优先级\n t.setPriority(Thread.MAX_PRIORITY);\n t.start();\n```\n\n**这样就可以设置线程对象优先级，优先级有三个常量。**\n\n```\n MIN_PRIORITY //值为1 最低\n NORM_PRIORITY //值为5 普通级别\n MAX_PRIORITY //值为10 最高\n```\n\n#### 线程强制\n\n```\npackage Runnable;\n\npublic class RunnableTest {\n    public static void main(String[] args) {\n        RunnableDemo r = new RunnableDemo();\n        Thread t = new Thread(r);\n        //线程强制运行\n        //join强制\n        try {\n            t.start();\n            t.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        RunnableDemo r1 = new RunnableDemo();\n        Thread t1 = new Thread(r1);\n        t1.start();\n        RunnableDemo r2 = new RunnableDemo();\n        Thread t2 = new Thread(r2);\n        t2.start();\n    }\n}\n```\n\n> **`join`还有两个重载方法，可以去自己了解。**\n\n#### 线程礼让\n\n![](https://a.ideaopen.cn/JanYork/1CCfC9wc.png)\n\n`yield`是静态方法，直接用类调用就可以。\n\n#### 注意！！！\n\n> **上面的设置优先级，是不能完完全全一个不漏的把控住的，只是优先级越高，先运行的机率越高。**\n>\n> **yield的礼让也是如此，不是一定，是提高概率，不是绝对礼让。**\n>\n> **而我们的`join`是绝对的**\n\n### 线程的同步\n\n**首先，我们需要了解，为什么同步。**\n\n#### 为什么需要同步\n\n**线程的安全问题**\n\n* **多个线程执行的不确定性硬气执行结果的不稳定性**\n* **多个线程对账本的****共享,** 会造成操作的不完整性, 会破坏数据.\n* **多个线程访问共享的数据时可能存在安全性问题**\n\n**比如：**\n\n> **卖票过程中出现了重票和错票的情况 (以下多窗口售票demo存在多线程安全问题)。**\n>\n> **当票数为1的时候，三个线程中有线程被阻塞没有执行票数-1的操作，这是其它线程就会通过if语句的判断，这样一来就会造成多卖了一张票，出现错票的情况。**\n>\n> **极端情况为，当票数为1时，三个线程同时判断通过，进入阻塞，然后多执行两侧卖票操作。**\n\n**所以，****线程的同步是为了防止多个线程访问一个数据对象时，对数据造成的破坏。**\n\n**那么，线程同步的原因，就解释清楚了，我得准备一些代码来写关于同步锁的文章。**\n\n**所以这篇文章先到这吧！**', 0, '2022-08-06 21:42:00', 1, 1, 2, 0, 3);
INSERT INTO `topic` VALUES (16, 'VUE-一个渐进式的JavaScript框架', '![](https://a.ideaopen.cn/JanYork/nOR1jKDq.webp)\n\n### 渐进式？\n\n> **Vue.js（读音 /vjuː/，类似于 view） 是一套构建用户界面的****渐进式**框架。\n\n** 这句话你可能并不陌生，但你未必真正读懂了它。 我们注意到这句话中有一个被作者高亮的词语—渐进式框架，其实明白了这个词语的意思，也便读懂了这句话，从而也就理解了Vue的核心理念。**\n\n**那么渐进式框架究竟是什么意思呢？**\n\n#### 什么是框架，什么是库？\n\n![](https://a.ideaopen.cn/JanYork/iAC23Td9.png)\n\n> **为了应对以上问题，开发人员重新梳理了代码的组织结构，把JS代码划分为三个板块，数据（M)、视图(V)、 逻辑控制(*)。 数据板块只含有数据内容，视图板块只负责更改样式，逻辑控制负责联系视图板块和数据板块和相应的逻辑，如下图所示。 这样代码结构组织的好处是显而易见的，当需求发生变动时，只需要改动相应的板块即可。还是拿上文中提到的记录图片点击次数的需求为例，这是重新组织后的代码 **[demo](https://github.com/guangruixiao/vue.js/tree/master/MVO-DEMO)，可以看到这次代码变得清晰易懂，而且你自己也可以去设想再增加某些需求，来看看需要改动代码的程度。\n\n![](https://a.ideaopen.cn/JanYork/dhVxEODZ.webp)\n\n**要注意的是，框架与我们的库概念是不一样的。**\n\n> **框架（Framework）**，**库（Library，简写Lib）**\n\n**在网上看到一个非常形象的举例：**\n\n**假如我们要买一台电脑，框架为我们提供了已经装好的电脑，我们只要买回来就能用，但前提是你必须把整个电脑要买回来。另外，我们还必须根据框架设定的使用规则来使用电脑。虽然这样用户可能轻松许多，但会导致很多人用一样的电脑，或你想自定义某个部件将需要修改这个框架。**\n\n**而库就如自己组装的电脑。库为我们提供了很多部件，我们需要自己组装，如果某个部件库未提供，我们也可以自己做。**\n\n**也就是说，库是松散的，但自由支配度高。框架是封装的，什么都帮你定义好了，但是自由度就肯定低了。**\n\n![](https://a.ideaopen.cn/JanYork/HVU9417Q.png)\n\n**图上的描述非常好，我就直接截图下来了。**\n\n#### 渐进式\n\n**所谓渐进式，你可以理解为：**\n\n> **就是一开始不需要你完全掌握它的全部功能特性，可以后续逐步增加功能。没有多做职责之外的事情**\n\n**即：****VUE不强求你一次性接受并使用它的全部功能特性**\n\n**有兴趣去深入理解一下的话，可以看看这：**\n\n> [(vue) => {渐进式}](https://www.jianshu.com/p/31d2e7cd1f17)\n>\n> [什么是渐进式前端开发框架？](https://cloud.tencent.com/developer/news/453986#:~:text=是一套用于构建用户界面的 渐进式框架 。. Vue 被设计为可以自底向上逐层应用。. （下文会介绍什么是渐进式框架及自底向上逐层应用的概念）. MVVM响应式编程模型，避免直接操作DOM,%2C 降低DOM操作的复杂性。. 前端工程化：结合webpack等前端打包工具，管理多种静态资源，代码，测试，发布等，整合前端大型项目。. 笔者理解的%22渐进式框架%22也非常简单，就是用你想用或者能用的功能特性，你不想用的部分功能可以先不用。. VUE不强求你一次性接受并使用它的全部功能特性 。. 场景一：公司刚开始一个项目，技术人员对Vue的掌握也不足够。. 那么我们就不能使用VUE了么？.)\n>\n', 0, '2022-08-06 21:41:32', 1, 3, 5, 0, 0);
INSERT INTO `topic` VALUES (17, '浅谈并发编程的业务场景', '## 浅谈并发编程的业务场景\r\n\r\n想必大家都知道，并发编程是一项非常重要的技术，无论在面试，还是工作中出现的频率非常高。\r\n\r\n当然，如果是个人级别的小玩意，肯定不是特别在意这个。\r\n\r\n并发编程 `==` 多线程编程。\r\n\r\n但是多线程一定比单线程效率更高？\r\n\r\n> 不一定，得看具体的业务环境，多个线程之间，会不断的抢占`CPU`的资源，所以说有时候多线程也是相对消耗时间的。\r\n\r\n### 并发编程场景\r\n\r\n![](https://a.ideaopen.cn/JanYork/k9dmbvVy.png)\r\n\r\n#### 1.定时任务\r\n\r\n你可能疑惑？`Thread`类真的能做定时任务吗？\r\n\r\n> 答案是肯定的。一些`定时任务框架`的源码，它们的底层也会使用Thread类。\r\n\r\n```java\r\npublic static void init() {\r\n    new Thread(() -> {\r\n        while (true) {\r\n            try {\r\n                System.out.println(\"下载文件\");\r\n                Thread.sleep(1000 * 60 * 5);\r\n            } catch (Exception e) {\r\n                log.error(e);\r\n            }\r\n        }\r\n    }).start();\r\n}\r\n```\r\n\r\n使用`Thread`类可以做最简单的定时任务，在`run`方法中有个`while`的死循环（当然还有其他方式），执行我们自己的任务。有个需要特别注意的地方是，需要用`try...catch`捕获异常，否则如果出现异常，就直接退出循环，下次将无法继续执行了。\r\n\r\n但这种方式做的定时任务，只能周期性执行，不能支持定时在某个时间点执行。\r\n\r\n特别提醒一下，该线程建议定义成`守护线程`，可以通过`setDaemon`方法设置，让它在后台默默执行就好。\r\n\r\n使用场景：比如项目中有时需要每隔5分钟去`下载某个文件`，或者每隔10分钟去读取模板文件`生成静态html页面`等等，一些简单的周期性任务场景。\r\n\r\n使用`Thread`类做定时任务的优缺点：\r\n\r\n- 优点：这种定时任务非常简单，学习成本低，容易入手，对于那些简单的周期性任务，是个不错的选择。\r\n- 缺点：不支持指定某个时间点执行任务，不支持延迟执行等操作，功能过于单一，无法应对一些较为复杂的场景。\r\n\r\n#### 2.监听器\r\n\r\n有时候，我们需要写个监听器，去监听某些数据的变化。\r\n\r\n比如：我们在使用`canal`的时候，需要监听`binlog`的变化，能够及时把数据库中的数据，同步到另外一个业务数据库中。\r\n\r\n![](https://a.ideaopen.cn/JanYork/aso2JfXA.png)\r\n\r\n如果直接写一个监听器去监听数据就太没意思了，我们想实现这样一个功能：在配置中心有个开关，配置监听器是否开启，如果开启了使用单线程异步执行。\r\n\r\n主要代码如下：\r\n\r\n```java\r\n@Service\r\npublic CanalService {\r\n    private volatile boolean running = false;\r\n    private Thread thread;\r\n\r\n    @Autowired\r\n    private CanalConnector canalConnector;\r\n    \r\n    public void handle() {\r\n        //连接canal\r\n        while(running) {\r\n           //业务处理\r\n        }\r\n    }\r\n    \r\n    public void start() {\r\n       thread = new Thread(this::handle, \"name\");\r\n       running = true;\r\n       thread.start();\r\n    }\r\n    \r\n    public void stop() {\r\n       if(!running) {\r\n          return;\r\n       }\r\n       running = false;\r\n    }\r\n}\r\n```\r\n\r\n在`start`方法中开启了一个线程，在该线程中异步执行`handle`方法的具体任务。然后通过调用stop方法，可以停止该线程。\r\n\r\n其中，使用`volatile`关键字控制的running变量作为开关，它可以控制线程中的状态。\r\n\r\n接下来，有个比较关键的点是：如何通过配置中心的配置，控制这个开关呢？\r\n\r\n以`apollo`配置为例，我们在配置中心的后台，修改配置之后，自动获取最新配置的核心代码如下：\r\n\r\n```java\r\npublic class CanalConfig {\r\n    @Autowired\r\n    private CanalService canalService;\r\n\r\n    @ApolloConfigChangeListener\r\n    public void change(ConfigChangeEvent event) {\r\n        String value = event.getChange(\"test.canal.enable\").getNewValue();\r\n        if(BooleanUtils.toBoolean(value)) {\r\n            canalService.start();\r\n        } else {\r\n            canalService.stop();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n通过`apollo`的`ApolloConfigChangeListener`注解，可以监听配置参数的变化。\r\n\r\n如果`test.canal.enable`开关配置的`true`，则调用`canalService`类的start方法开启`canal`数据同步功能。如果开关配置的`false`，则调用`canalService`类的`stop`方法，自动停止`canal`数据同步功能。\r\n\r\n#### 3.收集日志\r\n\r\n在某些高并发的场景中，我们需要收集部分用户的日志（比如：用户登录的日志），写到数据库中，以便于做分析。\r\n\r\n但由于项目中，还没有引入消息中间件，比如：`kafka`、`rocketmq`等。\r\n\r\n如果直接将日志同步写入数据库，可能会影响接口性能。\r\n\r\n所以，大家很自然想到了异步处理。\r\n\r\n实现这个需求最简单的做法是，开启一个线程，异步写入数据到数据库即可。\r\n\r\n这样做，可以是可以。\r\n\r\n但如果用户登录操作的耗时，比异步写入数据库的时间要少得多。这样导致的结果是：生产日志的速度，比消费日志的速度要快得多，最终的性能瓶颈在消费端。\r\n\r\n其实，还有更优雅的处理方式，虽说没有使用消息中间件，但借用了它的思想。\r\n\r\n这套记录登录日志的功能，分为：日志生产端、日志存储端和日志消费端。\r\n\r\n![](https://a.ideaopen.cn/JanYork/FCSH4bWo.png)\r\n\r\n先定义了一个阻塞队列。\r\n\r\n```java\r\n@Component\r\npublic class LoginLogQueue {\r\n    private static final int QUEUE_MAX_SIZE    = 1000;\r\n\r\n    private BlockingQueueblockingQueue queue = new LinkedBlockingQueue<>(QUEUE_MAX_SIZE);\r\n\r\n    //生成消息\r\n    public boolean push(LoginLog loginLog) {\r\n        return this.queue.add(loginLog);\r\n    } \r\n\r\n    //消费消息\r\n    public LoginLog poll() {\r\n        LoginLog loginLog = null;\r\n        try {\r\n            loginLog = this.queue.take();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n然后定义了一个日志的生产者。\r\n\r\n```java\r\n@Service\r\npublic class LoginSerivce {\r\n    \r\n    @Autowired\r\n    private LoginLogQueue loginLogQueue;\r\n\r\n    public int login(UserInfo userInfo) {\r\n        //业务处理\r\n        LoginLog loginLog = convert(userInfo);\r\n        loginLogQueue.push(loginLog);\r\n    }  \r\n}\r\n```\r\n\r\n接下来，定义了日志的消费者。\r\n\r\n```java\r\n@Service\r\npublic class LoginInfoConsumer {\r\n    @Autowired\r\n    private LoginLogQueue queue;\r\n\r\n    @PostConstruct\r\n    public voit init {\r\n       new Thread(() -> {\r\n          while (true) {\r\n              LoginLog loginLog = queue.take();\r\n              //写入数据库\r\n          }\r\n        }).start();\r\n    }\r\n}\r\n```\r\n\r\n当然，这个例子中使用单线程接收登录日志，为了提升性能，也可以使用线程池来处理业务逻辑（比如：写入数据库）等。\r\n\r\n#### 4.excel导入\r\n\r\n我们可能会经常收到运营同学提过来的excel数据导入需求，比如：将某一大类下的所有子类一次性导入系统，或者导入一批新的供应商数据等等。\r\n\r\n我们以导入供应商数据为例，它所涉及的业务流程很长，比如：\r\n\r\n1. 调用天眼查接口校验企业名称和统一社会信用代码。\r\n2. 写入供应商基本表\r\n3. 写入组织表\r\n4. 给供应商自动创建一个用户\r\n5. 给该用户分配权限\r\n6. 自定义域名\r\n7. 发站内通知\r\n\r\n等等。\r\n\r\n如果在程序中，解析完`excel`，读取了所有数据之后。用单线程一条条处理业务逻辑，可能耗时会非常长。\r\n\r\n为了提升`excel`数据导入效率，非常有必要使用多线程来处理。\r\n\r\n当然在`java`中实现多线程的手段有很多种，下面重点聊聊`java8`中最简单的实现方式：`parallelStream`。\r\n\r\n伪代码如下：\r\n\r\n```\r\nsupplierList.parallelStream().forEach(x -> importSupplier(x));\r\n```\r\n\r\n`parallelStream`是一个并行执行的流，它默认通过`ForkJoinPool`实现的，能提高你的多线程任务的速度。\r\n\r\n`ForkJoinPool`处理的过程会分而治之，它的核心思想是：`将一个大任务切分成多个小任务`。每个小任务都能单独执行，最后它会把所用任务的执行结果进行汇总。\r\n\r\n下面用一张图简单介绍一下`ForkJoinPool`的原理：\r\n\r\n![](https://a.ideaopen.cn/JanYork/SWP2E32r.png)\r\n\r\n当然除了excel导入之外，还有类似的读取文本文件，也可以用类似的方法处理。\r\n\r\n> 温馨的提醒一下，如果一次性导入的数据非常多，用多线程处理，可能会使系统的`CPU`使用率飙升，需要特别关注。\r\n\r\n#### 5.查询接口\r\n\r\n很多时候，我们需要在某个查询接口中，调用其他服务的接口，组合数据之后，一起返回。\r\n\r\n比如有这样的业务场景：\r\n\r\n在用户信息查询接口中需要返回：用户名称、性别、等级、头像、积分、成长值等信息。\r\n\r\n而用户名称、性别、等级、头像在用户服务中，积分在积分服务中，成长值在成长值服务中。为了汇总这些数据统一返回，需要另外提供一个对外接口服务。\r\n\r\n于是，用户信息查询接口需要调用用户查询接口、积分查询接口 和 成长值查询接口，然后汇总数据统一返回。\r\n\r\n调用过程如下图所示：\r\n\r\n![](https://a.ideaopen.cn/JanYork/82HWMVJZ.png)\r\n\r\n调用远程接口总耗时 530ms = 200ms + 150ms + 180ms\r\n\r\n显然这种串行调用远程接口性能是非常不好的，调用远程接口总的耗时为所有的远程接口耗时之和。\r\n\r\n那么如何优化远程接口性能呢？\r\n\r\n既然串行调用多个远程接口性能很差，为什么不改成并行呢？\r\n\r\n如下图所示：\r\n\r\n![](https://a.ideaopen.cn/JanYork/A5O0rn1u.png)\r\n\r\n调用远程接口总耗时 `200ms = 200ms`（即耗时最长的那次远程接口调用）\r\n\r\n在java8之前可以通过实现`Callable`接口，获取线程返回结果。\r\n\r\n`java8`以后通过`CompleteFuture`类实现该功能。我们这里以`CompleteFuture`为例：\r\n\r\n```java\r\npublic UserInfo getUserInfo(Long id) throws InterruptedException, ExecutionException {\r\n    final UserInfo userInfo = new UserInfo();\r\n    CompletableFuture userFuture = CompletableFuture.supplyAsync(() -> {\r\n        getRemoteUserAndFill(id, userInfo);\r\n        return Boolean.TRUE;\r\n    }, executor);\r\n\r\n    CompletableFuture bonusFuture = CompletableFuture.supplyAsync(() -> {\r\n        getRemoteBonusAndFill(id, userInfo);\r\n        return Boolean.TRUE;\r\n    }, executor);\r\n\r\n    CompletableFuture growthFuture = CompletableFuture.supplyAsync(() -> {\r\n        getRemoteGrowthAndFill(id, userInfo);\r\n        return Boolean.TRUE;\r\n    }, executor);\r\n    CompletableFuture.allOf(userFuture, bonusFuture, growthFuture).join();\r\n\r\n    userFuture.get();\r\n    bonusFuture.get();\r\n    growthFuture.get();\r\n    return userInfo;\r\n}\r\n```\r\n\r\n温馨提醒一下，这两种方式别忘了使用`线程池`。示例中我用到了`executor`，表示自定义的线程池，为了防止高并发场景下，出现线程过多的问题。\r\n\r\n#### 6.获取用户上下文\r\n\r\n不知道你在项目开发时，有没有遇到过这样的需求：用户登录之后，在所有的请求接口中，通过某个公共方法，就能获取到当前登录用户的信息？\r\n\r\n获取的用户上下文，我们以`CurrentUser`为例。\r\n\r\n`CurrentUser`内部包含了一个`ThreadLocal`对象，它负责保存当前线程的用户上下文信息。当然为了保证在线程池中，也能从用户上下文中获取到正确的用户信息，这里用了阿里的`TransmittableThreadLocal`。伪代码如下：\r\n\r\n```java\r\n@Data\r\npublic class CurrentUser {\r\n    private static final TransmittableThreadLocal<CurrentUser> THREA_LOCAL = new TransmittableThreadLocal<>();\r\n    \r\n    private String id;\r\n    private String userName;\r\n    private String password;\r\n    private String phone;\r\n    ...\r\n    \r\n    public statis void set(CurrentUser user) {\r\n      THREA_LOCAL.set(user);\r\n    }\r\n    \r\n    public static void getCurrent() {\r\n      return THREA_LOCAL.get();\r\n    }\r\n}\r\n```\r\n\r\n这里为什么用了阿里的`TransmittableThreadLocal`，而不是普通的`ThreadLocal`呢？在线程池中，由于线程会被多次复用，导致从普通的`ThreadLocal`中无法获取正确的用户信息。父线程中的参数，没法传递给子线程，而`TransmittableThreadLocal`很好解决了这个问题。\r\n\r\n然后在项目中定义一个全局的`spring mvc`拦截器，专门设置用户上下文到`ThreadLocal`中。伪代码如下：\r\n\r\n```java\r\npublic class UserInterceptor extends HandlerInterceptorAdapter {\r\n   \r\n   @Override  \r\n   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n      CurrentUser user = getUser(request);\r\n      if(Objects.nonNull(user)) {\r\n         CurrentUser.set(user);\r\n      }\r\n   } \r\n}\r\n```\r\n\r\n用户在请求我们接口时，会先触发该拦截器，它会根据用户`cookie`中的`token`，调用调用接口获取`redis`中的用户信息。如果能获取到，说明用户已经登录，则把用户信息设置到`CurrentUser`类的`ThreadLocal`中。\r\n\r\n接下来，在`api`服务的下层，即business层的方法中，就能轻松通过`CurrentUser.getCurrent();`方法获取到想要的用户上下文信息了。\r\n\r\n![](https://a.ideaopen.cn/JanYork/Z2E3cRiN.png)\r\n\r\n这套用户体系的想法是很good的，但深入使用后，发现了一个小插曲：\r\n\r\n`api`服务和`mq`消费者服务都引用了`business`层，`business`层中的方法两个服务都能直接调用。\r\n\r\n我们都知道在`api`服务中用户是需要登录的，而`mq`消费者服务则不需要登录。\r\n\r\n![](https://a.ideaopen.cn/JanYork/n1iTa593.png)\r\n\r\n如果`business`中的某个方法刚开始是给`api`开发的，在方法深处使用了`CurrentUser.getCurrent();`获取用户上下文。但后来，某位新来的帅哥在`mq`消费者中也调用了那个方法，并未发觉这个小机关，就会中招，出现找不到用户上下文的问题。\r\n\r\n![](https://a.ideaopen.cn/JanYork/I1pGWMY2.png)\r\n\r\n所以我当时的第一个想法是：代码没做兼容处理，因为之前这类问题偶尔会发生一次。\r\n\r\n想要解决这个问题，其实也很简单。只需先判断一下能否从`CurrentUser`中获取用户信息，如果不能，则取配置的系统用户信息。伪代码如下：\r\n\r\n```java\r\n@Autowired\r\nprivate BusinessConfig businessConfig;\r\n\r\nCurrentUser user = CurrentUser.getCurrent();\r\nif(Objects.nonNull(user)) {\r\n   entity.setUserId(user.getUserId());\r\n   entity.setUserName(user.getUserName());\r\n} else {\r\n   entity.setUserId(businessConfig.getDefaultUserId());\r\n   entity.setUserName(businessConfig.getDefaultUserName());\r\n}\r\n```\r\n\r\n这种简单无公害的代码，如果只是在一两个地方加还OK。\r\n\r\n此外，众所周知，`SimpleDateFormat`在`java8`以前，是用来处理时间的工具类，它是非线程安全的。也就是说，用该方法解析日期会有线程安全问题。\r\n\r\n为了避免线程安全问题的出现，我们可以把`SimpleDateFormat`对象定义成`局部变量`。但如果你一定要把它定义成静态变量，可以使用`ThreadLocal`保存日期，也能解决线程安全问题。\r\n\r\n#### 8. 传递参数\r\n\r\n之前见过有些同事写代码时，一个非常有趣的用法，即：使用`MDC`传递参数。\r\n\r\nMDC是什么？\r\n\r\n`MDC`是`org.slf4j`包下的一个类，它的全称是`Mapped Diagnostic Context`，我们可以认为它是一个线程安全的存放诊断日志的容器。\r\n\r\n`MDC`的底层是用了`ThreadLocal`来保存数据的。\r\n\r\n例如现在有这样一种场景：我们使用`RestTemplate`调用远程接口时，有时需要在`header`中传递信息，比如：`traceId`，`source`等，便于在查询日志时能够串联一次完整的请求链路，快速定位问题。\r\n\r\n这种业务场景就能通过`ClientHttpRequestInterceptor`接口实现，具体做法如下：\r\n\r\n第一步，定义一个`LogFilter`拦截所有接口请求，在`MDC`中设置`traceId`：\r\n\r\n```java\r\npublic class LogFilter implements Filter {\r\n    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\r\n        MdcUtil.add(UUID.randomUUID().toString());\r\n        System.out.println(\"记录请求日志\");\r\n        chain.doFilter(request, response);\r\n        System.out.println(\"记录响应日志\");\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n    }\r\n}\r\n```\r\n\r\n第二步，实现`ClientHttpRequestInterceptor`接口，`MDC`中获取当前请求的`traceId`，然后设置到`header`中：\r\n\r\n```java\r\npublic class RestTemplateInterceptor implements ClientHttpRequestInterceptor {\r\n\r\n    @Override\r\n    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\r\n        request.getHeaders().set(\"traceId\", MdcUtil.get());\r\n        return execution.execute(request, body);\r\n    }\r\n}\r\n```\r\n\r\n第三步，定义配置类，配置上面定义的`RestTemplateInterceptor`类：\r\n\r\n```java\r\n@Configuration\r\npublic class RestTemplateConfiguration {\r\n\r\n    @Bean\r\n    public RestTemplate restTemplate() {\r\n        RestTemplate restTemplate = new RestTemplate();\r\n        restTemplate.setInterceptors(Collections.singletonList(restTemplateInterceptor()));\r\n        return restTemplate;\r\n    }\r\n\r\n    @Bean\r\n    public RestTemplateInterceptor restTemplateInterceptor() {\r\n        return new RestTemplateInterceptor();\r\n    }\r\n}\r\n```\r\n\r\n其中`MdcUtil`其实是利用`MDC`工具在`ThreadLocal`中存储和获取`traceId`\r\n\r\n```java\r\npublic class MdcUtil {\r\n\r\n    private static final String TRACE_ID = \"TRACE_ID\";\r\n\r\n    public static String get() {\r\n        return MDC.get(TRACE_ID);\r\n    }\r\n\r\n    public static void add(String value) {\r\n        MDC.put(TRACE_ID, value);\r\n    }\r\n}\r\n```\r\n\r\n当然，这个例子中没有演示`MdcUtil`类的`add`方法具体调的地方，我们可以在`filter`中执行接口方法之前，生成`traceId`，调用`MdcUtil`类的add方法添加到`MDC`中，然后在同一个请求的其他地方就能通过`MdcUtil`类的get方法获取到该`traceId`。\r\n\r\n能使用`MDC`保存`traceId`等参数的根本原因是，用户请求到应用服务器，`Tomcat`会从线程池中分配一个线程去处理该请求。\r\n\r\n那么该请求的整个过程中，保存到`MDC`的`ThreadLocal`中的参数，也是该线程独享的，所以不会有线程安全问题。\r\n\r\n#### 9. 模拟高并发\r\n\r\n有时候我们写的接口，在低并发的场景下，一点问题都没有。\r\n\r\n但如果一旦出现高并发调用，该接口可能会出现一些意想不到的问题。\r\n\r\n为了防止类似的事情发生，一般在项目上线前，我们非常有必要对接口做一下`压力测试`。\r\n\r\n当然，现在已经有比较成熟的压力测试工具，比如：`Jmeter`、`LoadRunner`等。\r\n\r\n如果你觉得下载压测工具比较麻烦，也可以手写一个简单的模拟并发操作的工具，用`CountDownLatch`就能实现，例如：\r\n\r\n```java\r\npublic static void concurrenceTest() {\r\n    /**\r\n     * 模拟高并发情况代码\r\n     */\r\n    final AtomicInteger atomicInteger = new AtomicInteger(0);\r\n    final CountDownLatch countDownLatch = new CountDownLatch(1000); // 相当于计数器，当所有都准备好了，再一起执行，模仿多并发，保证并发量\r\n    final CountDownLatch countDownLatch2 = new CountDownLatch(1000); // 保证所有线程执行完了再打印atomicInteger的值\r\n    ExecutorService executorService = Executors.newFixedThreadPool(10);\r\n    try {\r\n        for (int i = 0; i < 1000; i++) {\r\n            executorService.submit(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        countDownLatch.await(); //一直阻塞当前线程，直到计时器的值为0,保证同时并发\r\n                    } catch (InterruptedException e) {\r\n                        log.error(e.getMessage(),e);\r\n                    }\r\n                    //每个线程增加1000次，每次加1\r\n                    for (int j = 0; j < 1000; j++) {\r\n                        atomicInteger.incrementAndGet();\r\n                    }\r\n                    countDownLatch2.countDown();\r\n                }\r\n            });\r\n            countDownLatch.countDown();\r\n        }\r\n\r\n        countDownLatch2.await();// 保证所有线程执行完\r\n        executorService.shutdown();\r\n    } catch (Exception e){\r\n        log.error(e.getMessage(),e);\r\n    }\r\n}\r\n```\r\n\r\n#### 10. 处理mq消息\r\n\r\n在高并发的场景中，消息积压问题，可以说如影随形，真的没办法从根本上解决。表面上看，已经解决了，但后面不知道什么时候，就会冒出一次，比如这次：\r\n\r\n有天下午，产品过来说：有几个商户投诉过来了，他们说菜品有延迟，快查一下原因。\r\n\r\n这次问题出现得有点奇怪。\r\n\r\n为什么这么说？\r\n\r\n首先这个时间点就有点奇怪，平常出问题，不都是中午或者晚上用餐高峰期吗？怎么这次问题出现在下午？\r\n\r\n根据以往积累的经验，我直接看了`kafka`的`topic`的数据，果然上面消息有积压，但这次每个`partition`都积压了十几万的消息没有消费，比以往加压的消息数量增加了几百倍。这次消息积压得极不寻常。\r\n\r\n我赶紧查服务监控看看消费者挂了没，还好没挂。又查服务日志没有发现异常。这时我有点迷茫，碰运气问了问订单组下午发生了什么事情没？他们说下午有个促销活动，跑了一个`JOB`批量更新过有些商户的订单信息。\r\n\r\n这时，我一下子如梦初醒，是他们在JOB中批量发消息导致的问题。怎么没有通知我们呢？实在太坑了。\r\n\r\n虽说知道问题的原因了，倒是眼前积压的这十几万的消息该如何处理呢？\r\n\r\n此时，如果直接调大`partition`数量是不行的，历史消息已经存储到`4`个固定的partition，只有新增的消息才会到新的partition。我们重点需要处理的是已有的partition。\r\n\r\n直接加服务节点也不行，因为`kafka`允许同组的多个`partition`被一个`consumer`消费，但不允许一个partition被同组的多个consumer消费，可能会造成资源浪费。\r\n\r\n看来只有用`多线程`处理了。\r\n\r\n为了紧急解决问题，我改成了用线程池处理消息，核心线程和最大线程数都配置成了`50`。\r\n\r\n大致用法如下：\r\n\r\n1. 先定义一个线程池：\r\n\r\n```java\r\n@Configuration\r\npublic class ThreadPoolConfig {\r\n\r\n    @Value(\"${thread.pool.corePoolSize:5}\")\r\n    private int corePoolSize;\r\n\r\n    @Value(\"${thread.pool.maxPoolSize:10}\")\r\n    private int maxPoolSize;\r\n\r\n    @Value(\"${thread.pool.queueCapacity:200}\")\r\n    private int queueCapacity;\r\n\r\n    @Value(\"${thread.pool.keepAliveSeconds:30}\")\r\n    private int keepAliveSeconds;\r\n\r\n    @Value(\"${thread.pool.threadNamePrefix:ASYNC_}\")\r\n    private String threadNamePrefix;\r\n\r\n    @Bean(\"messageExecutor\")\r\n    public Executor messageExecutor() {\r\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\r\n        executor.setCorePoolSize(corePoolSize);\r\n        executor.setMaxPoolSize(maxPoolSize);\r\n        executor.setQueueCapacity(queueCapacity);\r\n        executor.setKeepAliveSeconds(keepAliveSeconds);\r\n        executor.setThreadNamePrefix(threadNamePrefix);\r\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\r\n        executor.initialize();\r\n        return executor;\r\n    }\r\n}\r\n```\r\n\r\n1. 再定义一个消息的consumer：\r\n\r\n```java\r\n@Service\r\npublic class MyConsumerService {\r\n    @Autowired\r\n    private Executor messageExecutor;\r\n    \r\n    @KafkaListener(id=\"test\",topics={\"topic-test\"})\r\n    public void listen(String message){\r\n        System.out.println(\"收到消息：\" + message);\r\n        messageExecutor.submit(new MyWork(message);\r\n    }\r\n}\r\n```\r\n\r\n1. 在定义的`Runable`实现类中处理业务逻辑：\r\n\r\n```java\r\npublic class MyWork implements Runnable {\r\n    private String message;\r\n    \r\n    public MyWork(String message) {\r\n       this.message = message;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        System.out.println(message);\r\n    }\r\n}\r\n```\r\n\r\n果然，调整之后消息积压数量确实下降的非常快，大约半小时后，积压的消息就非常顺利的处理完了。\r\n\r\n但此时有个更严重的问题出现：我收到了报警邮件，有两个订单系统的节点宕机了。。。\r\n\r\n#### 11. 统计数量\r\n\r\n在多线程的场景中，有时候需要统计数量，比如：用多线程导入供应商数据时，统计导入成功的供应商数有多少。\r\n\r\n如果这时候用count++统计次数，最终的结果可能会不准。因为count++并非原子操作，如果多个线程同时执行该操作，则统计的次数，可能会出现异常。\r\n\r\n为了解决这个问题，就需要使用`concurent`的`atomic`包下面的类，比如：`AtomicInteger`、`AtomicLong`等。\r\n\r\n```java\r\n@Servcie\r\npublic class ImportSupplierService {\r\n  private static AtomicInteger count = new AtomicInteger(0);\r\n\r\n  public int importSupplier(List<SupplierInfo> supplierList) {\r\n       if(CollectionUtils.isEmpty(supplierList)) {\r\n           return 0;\r\n       }\r\n\r\n       supplierList.parallelStream().forEach(x -> {\r\n           try {\r\n             importSupplier(x);\r\n             count.addAndGet(1);\r\n           } catch(Exception e) {\r\n              log.error(e.getMessage(),e);\r\n           }\r\n       );\r\n\r\n      return count.get();\r\n  }    \r\n}\r\n```\r\n\r\n`AtomicInteger`的底层说白了使用`自旋锁`+`CAS`。\r\n\r\n```java\r\npublic final int incrementAndGet() {\r\n    for (;;) {\r\n        int current = get();\r\n        int next = current + 1;\r\n        if (compareAndSet(current, next))\r\n            return next;\r\n    }\r\n}\r\n```\r\n\r\n`自旋锁`说白了就是一个`死循环`。\r\n\r\n而`CAS`是`比较`和`交换`的意思。\r\n\r\n它的实现逻辑是：将内存位置处的`旧值`与`预期值`进行比较，若相等，则将内存位置处的值替换为`新值`。若不相等，则不做任何操作。\r\n\r\n#### 12. 延迟定时任务\r\n\r\n我们经常有延迟处理数据的需求，比如：如果用户下单后，超过30分钟还未完成支付，则系统自动将该订单取消。\r\n\r\n这里需求就可以使用`延迟定时任务`实现。\r\n\r\n`ScheduledExecutorService`是`JDK1.5+`版本引进的定时任务，该类位于`java.util.concurrent`并发包下。\r\n\r\nScheduledExecutorService是基于多线程的，设计的初衷是为了解决`Timer`单线程执行，多个任务之间会互相影响的问题。\r\n\r\n它主要包含4个方法：\r\n\r\n- schedule(Runnable command,long delay,TimeUnit unit)，带延迟时间的调度，只执行一次，调度之后可通过Future.get()阻塞直至任务执行完毕。\r\n- schedule(Callablecallable,long delay,TimeUnit unit)，带延迟时间的调度，只执行一次，调度之后可通过Future.get()阻塞直至任务执行完毕，并且可以获取执行结果。\r\n- scheduleAtFixedRate，表示以固定频率执行的任务，如果当前任务耗时较多，超过定时周期period，则当前任务结束后会立即执行。\r\n- scheduleWithFixedDelay，表示以固定延时执行任务，延时是相对当前任务结束为起点计算开始时间。\r\n\r\n实现这种定时任务的具体代码如下：\r\n\r\n```\r\npublic class ScheduleExecutorTest {\r\n\r\n    public static void main(String[] args) {\r\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5);\r\n        scheduledExecutorService.scheduleAtFixedRate(() -> {\r\n            System.out.println(\"doSomething\");\r\n        },1000,1000, TimeUnit.MILLISECONDS);\r\n    }\r\n}\r\n```\r\n\r\n调用`ScheduledExecutorService`类的`scheduleAtFixedRate`方法实现周期性任务，每隔1秒钟执行一次，每次延迟1秒再执行。\r\n\r\n这种定时任务是阿里巴巴开发者规范中用来替代`Timer`类的方案，对于多线程执行周期性任务，是个不错的选择。\r\n\r\n使用`ScheduledExecutorService`类做延迟定时任务的优缺点：\r\n\r\n- 优点：基于多线程的定时任务，多个任务之间不会相关影响，支持周期性的执行任务，并且带延迟功能。\r\n- 缺点：不支持一些较复杂的定时规则。\r\n\r\n当然，你也可以使用分布式定时任务，比如：`xxl-job`或者`elastic-job`等等。\r\n\r\n其实，在实际工作中我使用多线程的场景远远不只这12种，在这里只是抛砖引玉，介绍了一些我认为比较常见的业务场景。 \r\n\r\n> 文章来自：苏三说技术', 0, '2022-08-06 21:42:00', 1, 1, 2, 0, 5);
INSERT INTO `topic` VALUES (18, 'JavaScript中的钩子(钩子机制\\钩子函数\\hook)是什么？', '**首先，看到我们的标题：**\n\n> **JavaScript中的****钩子(钩子机制\\钩子函数\\hook)**是什么？\n\n**我们前端的JavaScript中，经常提到**`钩子`，毋庸置疑，那这个东西肯定也尤为重要。\n\n**但是有点前端入门不久，很疑惑，这个钩子到底是什么呢？**\n\n**首先，我们的钩子，钩子机制，钩子函数，hook，都是同一个概念。**\n\n### 钩子（HOOK）？\n\n**对于Windows系统，它是建立在事件驱动机制上的，说白了就是整个系统都是通过消息传递实现的。hook（钩子）是一种特殊的消息处理机制，它可以监视系统或者进程中的各种事件消息，截获发往目标窗口的消息并进行处理。**\n\n**用来监视系统中特定事件的发生，完成特定功能，如屏幕取词，监视日志，截获键盘、鼠标输入等等。**\n\n**百度给出的解释是这样的：**\n\n> **钩子函数是Windows消息处理机制的一部分，通过设置“钩子”，应用程序可以在系统级对所有消息、事件进行过滤，访问在正常情况下无法访问的消息。钩子的本质是一段用以处理系统消息的程序，通过系统调用，把它挂入系统。**\n\n**是不是觉得还是不明白，很显然，这个解释非常官方，我们要用现实思维去描述。**\n\n> **说白了，钩子函数是在一个事件触发的时候，在系统级捕获到了他，然后做一些操作。一段用以处理系统消息的程序，用以处理系统消息的程序，是说钩子函数是用于处理系统消息的**\n\n**两个特点：**\n\n* **是个函数，且系统消息触发时被系统调用**\n* **非用户自己触发**\n\n### 回调函数与钩子\n\n**回调函数是你留了个函数，但是这个函数不是立即执行，而是绑定了个事件。当事件触发时，自动执行函数，而非必须执行。**\n\n> **概念：作为参数传给另一个 JavaScript 函数的函数。**\n>\n> **回调函数确保一段代码执行完毕之后再执行另一段代码的方式**。\n\n**如果还是不理解，请看：**\n\n> [10张图让你彻底理解回调函数 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/326902537)\n\n**钩子函数**是好比找了个代理，监视事件是否发生，如果发生了这个代理就执行你的事件处理方法；在这个过程中，代理就是钩子函数。\n\n* **在某种意义上，回调函数做的处理过程跟钩子函数中要调用调方法一样**\n* **但是！！！钩子函数一般是由****事件发生者**提供的。直白了说，它留下一个钩子，这个钩子的作用就是钩住你的回调方法。\n\n**或者，你可以认为****钩子函数就是回调函数。**\n\n> **钩子函数一般是在某个框架里面的叫法，是这个框架在生命周期的某个阶段触发的回调函数。**\n\n**比如**`Vue/React`里面就存在生命周期函数。\n\n**看**`Vue`框架里面自带的一段代码，**无论我写不写它就在那里**，但当我调用它以后，它就会执行我参数的内容。\n', 0, '2022-08-06 21:51:51', 1, 10, 4, 0, 5);
INSERT INTO `topic` VALUES (19, '简简单单将Java应用封装成Docker镜像', '**想必**`Docker`这个词大家都不陌生，是一个非常优秀的虚拟化容器。\n\n**怎么把**`Java`应用打包成Docker镜像？对熟悉`Docker`的同学这应该是一个很简单的问题，把项目打包成`JAR`包然后在`Dockerfile`里用`ADD`命令把`JAR`文件放到镜像里，启动命令设置执行这个`JAR`文件即可。\n\n**可是对于不懂Java的，听起来貌似并不是那么简单。**\n\n**在这之前，我们先了解了解什么是：**`Dockerfile`。\n\n### Dockerfile\n\n`Dockerfile` 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\n\n**比如一个使用Maven构建的Spring应用就可以用下面这个**`Dockerfile`构建镜像。\n\n```\n FROM openjdk:8-jre\n ADD target/*.jar /application.jar\n ENTRYPOINT [\"java\", \"-jar\",\"/application.jar\"]\n```\n\n**咦？这是啥语言，也没见过啊？这个其实是**`dockerfile`的指令。\n\n**上面这个**`Dockerfile`的指令很好理解，使用Maven构建的Java项目的目录结构统一是：\n\n```\n project\n │   pom.xml\n └───src // 源文件目录\n │   │\n │   └───main\n │       │   \n │       └───java\n │       \n └───target // class和jar文件的目录\n```\n\n**用**`mvn clean package`打包后会把`JAR`文件生成在`target`目录里，通过`java -jar`命令即可执行编译好的程序。\n\n**所以上面的**`Dockerfile`里就进行了把`JAR`从`target`目录里添加到Docker镜像中以及将`jar -jar /application.jar` 设置成容器的启动命令这两步操作。\n\n**不过除了这种最原始的方法外我们还可以使用**`Maven`的一些插件，或者`Docker`的多阶段打包功能来完成把`Java`应用打包成`Docker`镜像的动作。\n\n### Maven插件构建镜像\n\n`Spotify`公司的`dockerfile-maven-plugin`和Google公司出品的`jib-maven-plugin`是两款比较有名的插件，下面简单介绍一下`dockerfile-maven-plugin`的配置和使用。\n\n**其实使用方法很简单，我们在**`POM`文件里引入这个`plugin`，并结合上面那个`Dockerfile`就能让插件帮助我们完成应用镜像的打包。\n\n```\n <groupId>com.example</groupId>\n     <artifactId>hello-spring</artifactId>\n     <version>0.0.1-SNAPSHOT</version>\n     <name>helloworld</name>\n <plugin>\n  <groupId>com.spotify</groupId>\n  <artifactId>dockerfile-maven-plugin</artifactId>\n  <version>1.4.10</version>\n  <executions>\n   <execution>\n   <id>default</id>\n       <goals>\n         <goal>build</goal>\n         <goal>push</goal>\n       </goals>\n     </execution>\n   </executions>\n   <configuration>\n     <repository>${docker.registry.url}/${image.prefix}/${artifactId}</repository>\n     <tag>${project.version}</tag>\n     <buildArgs>\n       <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>\n     </buildArgs>\n   </configuration>\n </plugin>\n```\n\n**插件里使用的**`docker.registry.url`和`image.prefix`是我单独为`Docker`的镜像仓库设置的属性。\n\n```\n <properties>\n  <java.version>1.8</java.version>\n   <image.prefix>kevinyan001</image.prefix>\n   <docker.registry.url></private.registry.url>\n </properties>\n```\n\n**这里可以随意设置成私有仓库的远程地址和镜像前缀，比如在阿里云的镜像服务上创建一个叫**`docker-demo`的空间，上面的属性就需要这样配置：\n\n```\n <properties>\n   <java.version>1.8</java.version>\n   <image.prefix>docker-demo</image.prefix>\n   <docker.registry.url>registry.cn-beijing.aliyuncs.com</docker.registry.url>\n </properties>\n```\n\n**在**`POM`文件里配置好插件后伴随着我们打包应用执行`mvc clean package`操作时`dockerfile-maven-plugin`就会自动根据我们的配置打包好一个叫做`kevinyan001/hello-spring:0.0.1-SNAPSHOT`的Docker镜像。\n\n`dockerfile-maven-plugin`除了能帮助我们打包应用镜像外还可以让它帮助我们把镜像push到远端仓库，不过我觉得用处不大，感兴趣的同学可以去网上搜搜看这部分功能怎么配置。\n\n### Docker的多阶段构建打包镜像\n\n**上面介绍了使用**`Maven`插件帮助我们打包`Java`应用的镜像，其实我们还可以把`mvn clean package`这一步也交给`Docker`来完成。当然把Java应用的源码放在`Docker`镜像里再编译打包在发布出去肯定是有问题的，我们知道在`Dockerfile`里每个指令`ADD`、`RUN`这些都是在单独的层上进行，指令越多会造成镜像越大，而且包含`Java`项目的源码也是一种风险。\n\n**不过好在后来**`Docker`支持了多阶段构建，允许我们在一个`Dockerfile`里定义多个构建阶段，先拉起一个容器完成用于的构建，比如说我们可以在这个阶段里完成`JAR`的打包，然后第二个阶段重新使用一个`jre`镜像把上阶段打包好的`JAR`文件拷贝到新的镜像里。\n\n**使用下面的**`Dockerfile`可以通过多阶段构建完成`Java`应用的`Docker`镜像打包。\n\n```\n \n # Dockerfile也可以不放在项目目录下，通过 -f 指定Dockerfile的位置，比如在项目根下执行以下命令 \n docker build -t <some tag> -f <dirPath/Dockerfile> .\n \n FROM kevinyan001/aliyun-mvn:0.0.1 AS MAVEN_BUILD\n \n COPY pom.xml /build/\n COPY src /build/src\n \n WORKDIR /build/\n # mount anonymous host directory as .m2 storage for contianer \n VOLUME /root/.m2\n \n RUN mvn clean package -Dmaven.test.skip=true --quiet\n \n FROM openjdk:8-jre\n \n \n COPY --from=MAVEN_BUILD /build/target/*.jar /app/application.jar\n \n ENTRYPOINT [\"java\", \"-jar\", \"/app/application.jar\"]\n```\n\n**上面我们用的这些**`Dockerfile`也可以不用放在项目的根目录里，现在已经支持通过 `-f` 指定`Dockerfile`的位置，比如在项目根下执行以下命令完成镜像的打包。\n\n```\n docker build -t kevinyan001/hello-spring:0.0.1 -f <dirPath/Dockerfile> .\n```\n\n**上面第一个镜像是我自己做的，因为Maven官方的镜像的远程仓库慢的一批，只能自己包装一下走阿里云的镜像源了。试了试速度也不快，主要是随随便便一个**`Spring`项目依赖就太多了。大家如果这块有什么加快`Docker` 构建速度的方法也可以留言一起讨论讨论。\n\n**不可否认用多阶段构建打出来的**`Go`镜像基本上是`10M`左右，但是`Spring`的应用随随便便就是上百兆，这个对容器的构建速度、网络传输成本是有影响的，那么`Spring`应用的镜像怎么瘦身呢，这个就留到以后的文章进行探讨了。\n', 0, '2022-08-06 21:56:53', 1, 9, 9, 0, 5);
INSERT INTO `topic` VALUES (20, '如何深度理解JavaScript的回调函数', '**首先，回调函数这个概念，他是**`JS`中的一个核心。\n\n**作为**`JS`的核心，回调函数和异步执行是紧密相关的，也是必须跨过去的一道个门槛。\n\n**当然，我们这篇文字只谈回调，不说异步。**\n\n### 对象？\n\n**JavaScript有对象嘛？**\n\n**我们知道，JavaScript他不是一个面向对象语言，但是，我们的JavaScript是一个基于对象的脚本语言。**\n\n**啥意思，也就是基本上，JavaScript里面的函数啊，变量啊，这些都是一个对象，当然这个概念不是像面向对象语言那样。**\n\n### 回调？\n\n![](https://a.ideaopen.cn/JanYork/rVze09aQ.png)\n\n**看这张图，是一个简单的回调函数，怎么回调了呢？**\n\n**在一个函数里面，我们将另一个函数作为参数，并在****函数体内部调用**它。在 JavaScript 里，我们叫它**“回调”**。所以，被传递给另一个函数作为参数的函数叫作回调函数。\n\n### 为什么需要回调函数？\n\n**我们知道，JavaScript是一个典型的解释型的脚本语言，他在运行时，是一行一行执行的。**\n\n**但是，我们有时候，必须在某些情况发生之后，代码才能运行（或者说必须运行），这就不是按顺序运行了。**\n\n**但是我们上面说了，JavaScript他是一个逐行执行的语言，那咋还能不按顺序来呢？**\n\n**这是是我们所说的****异步编程**，即没有按照原本顺序来逐行执行。\n\n> **回调函数确保：函数在某个任务完成之前不运行，在任务完成之后立即运行。它帮助我们编写异步 JavaScript 代码，避免问题和错误。**\n\n**说白了就是，将函数当作对象传入另一个函数里面运行，而且可以多层嵌套。**\n\n**到了接触**`Node.js`或者`ajax`异步时，自然就明白其概念了。\n', 0, '2022-08-06 21:57:30', 1, 10, 4, 0, 5);
INSERT INTO `topic` VALUES (21, '存储emoji表情或特殊字符报错', '**今天发生一件有趣的事情。**\n\n![](https://a.ideaopen.cn/JanYork/yuXND0sK.png)\n\n**我在一篇文章中使用了****`emoji表情`**，前面很顺利，不管是WordPress还是其他博客园啥的，都是正常发送。\n\n**但是，我在Typecho系统中发布文章时....**\n\n![](https://a.ideaopen.cn/JanYork/Zw8ZkEtI.png)\n\n**我当时一脸懵逼，啥情况，数据库坏了？**\n\n**我重启服务器，发现没用，于是准备直接使用**`Navicat`工具直接写入数据库。\n\n![](https://a.ideaopen.cn/JanYork/FXr6QcCB.png)\n\n**巧了，还是报错，不管可算知道问题了。**\n\n**浏览器搜索一番后，发现，是表情的问题。**\n\n![](https://a.ideaopen.cn/JanYork/DyVgMx2X.png)\n\n### 如何解决？\n\n**于是既然是错误，那我就解决一下吧。**\n\n**首先，我们要知道，utf8是Typecho系统写入数据库是的默认编码，也是安装MySQL是的默认编码。**\n\n> **Typecho 默认是不支持 Emoji 表情的，当你评论中有 Emoji 的话，就会报这个错误。这个是因为编码的问题造成的。Mysql 默认使用的是 utf8 字符集，utf8 字符集的编码范围 u0000-uFFFF，而 Emoji 是在 Unicode 位于 u1F601-u1F64F 区段的字符。所以评论中带有 Emoji 表情才会报错。**\n\n* **修改Typecho配置文件**\n\n  > **Typecho修改网站的配置文件，打开网站根目录，找到 **`config.inc.php` 文件，把 `charset` 的值改为 `urf8mb4`。\n  >\n  > **如果是Java，可以修改数据库连接字符串的编码。其他语言也类似。**\n  >\n\n  ![](https://a.ideaopen.cn/JanYork/lM8B5xJO.png)\n* **修改MySQL全局默认编码**\n  **首先，找到****`my.cnf`**文件，Window是`my.ini`文件。\n  **宝塔面板直接找。**\n  ![](https://a.ideaopen.cn/JanYork/D6WjoyQJ.png)\n\n  ```\n   [client]\n   \n   default-character-set = utf8mb4\n   \n   [mysql]\n   \n   default-character-set = utf8mb4\n   \n   [mysqld]\n   \n   character-set-client-handshake = FALSE\n   \n   character-set-server = utf8mb4\n   \n   collation-server = utf8mb4_unicode_ci\n   \n   init_connect=\'SET NAMES utf8mb4\'\n  ```\n\n  **找到之后直接将上面这串代码粘贴到文件的空位置，一般就最下面就可以。**\n\n  ![](https://a.ideaopen.cn/JanYork/5IiiCp0q.png)\n\n  **这样之后，重启MySQL服务。**\n\n  **重启之后效果我们可以使用SQL语句看看。**\n\n  ![](https://a.ideaopen.cn/JanYork/Ent8sMr3.png)\n\n  **上面部分是没改之前的，下面是改完后。**\n\n  **这样就可以了。**\n* **Typecho玩家请注意！**\n\n```\n alter table typecho_comments convert to character set utf8mb4 collate utf8mb4_general_ci;\n alter table typecho_contents convert to character set utf8mb4 collate utf8mb4_general_ci;\n alter table typecho_fields convert to character set utf8mb4 collate utf8mb4_general_ci;\n alter table typecho_metas convert to character set utf8mb4 collate utf8mb4_general_ci;\n alter table typecho_options convert to character set utf8mb4 collate utf8mb4_general_ci;\n alter table typecho_relationships convert to character set utf8mb4 collate utf8mb4_general_ci;\n alter table typecho_users convert to character set utf8mb4 collate utf8mb4_general_ci;\n```\n\n**请运行这一段SQL语句，至于怎么运行这就不说了，太基础。**\n\n**这样，就可以正常发布带有表情的文章了。**\n\n### 延伸知识\n\n**1、MySQL在5.5.3之后增加了这个utf8mb4的编码，所以最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本；**\n\n**2、mb4就是most bytes 4的意思，可以用来兼容四字节的unicode，存储与获取数据的时候，不用再考虑表情字符的编码与解码问题。如果你要存互联网emoji表情，就需要utf8mb4，而不是utf-8；**\n\n**3、utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换；**\n\n**4、MySQL数据库的 “utf8”并不是真正概念里的 UTF-8，MySQL中的“utf8”编码只支持最大3字节每字符。真正的大家正在使用的UTF-8编码是应该能支持4字节每个字符，MySQL的开发者没有修复这个bug。他们在2010年增加了一个变通的方法：一个新的字符集“utf8mb4”，他们并没有对外公布（可能因为这个bug有点尴尬）。现在很多指南推荐用户使用“utf8”其实都错了；**\n\n**5、建议MySQL和MariaDB用户使用“utf8mb4”而不是“utf8”，毕竟现在是不管使用 Anroidz设备，还是 iOS 设备，如果插入包含有 emoji 表情符号的记录时就报错，还是很尴尬的；**\n\n**6、最重要一点，对数据库操作前，记得备份数据。**\n\n### 为什么要修改编码才行？\n\n**为什么要把数据库的字符集设置成utf8mb4呢？以前一直用的都是utf8啊？**\n\n> **utf8适用于不使用移动设备的互联网交互，utf8mb4适用于当前的移动设备互联网开发，因为移动设备中常常会有表情符号(emoji)的存储，它占用4个字节的存储空间，而utf8是3个字节，这样，用3个字节去存储4个字节的东西，很明显是存不下的，会报错，所以要用utf8mb4，并且utf8mb4是兼容utf8的，那么，就没有理由不用utf8mb4字符集了。**\n>\n', 0, '2022-08-06 21:58:01', 1, 2, 3, 0, 5);
INSERT INTO `topic` VALUES (22, 'JavaScript函数篇之ES6箭头函数与匿名函数', '### 匿名函数\n\n```\n setTimeout(function() {  \n     console.log(\"This message is shown after 3 seconds\");\n }, 3000);\n```\n\n**看这样一段代码，我们平常定义一个函数，至少会给他一个函数名。但是，我们这里的**`function()`没有名字。\n\n**这也行？？？**\n\n**当然可以，我们称这种函数为匿名函数，顾名思义，没有名字。**\n\n### 箭头函数\n\n**在**`ES6`版本中，JavaScript加入了一个新的函数，箭头函数。\n\n**箭头函数是 JavaScript 里的一种新的函数形式。**\n\n**数如其名哈！真就有一个箭头。**\n\n![](https://a.ideaopen.cn/JanYork/633bcVxr.png)\n\n```\n //普通函数\n function add(x, y) {\n     return x + y;\n }\n //箭头函数\n var add = (x, y) => {\n     return x + y;\n }\n //箭头函数简写\n var add = (x, y) => x + y;\n```\n\n**其实，他出现的目的是为了简化我们的代码。**\n\n**如果函数只有一个语句，并且该语句返回一个值，则可以去掉括号和 **`return` 关键字（即第三局句代码）。\n\n**事实上，如果只有一个参数，您也可以略过括号（有兴趣自行尝试）。**\n\n#### 箭头函数的`this`\n\n**与常规函数相比，箭头函数对 **`this` 的处理也有所不同。\n\n**简而言之，使用箭头函数没有对 **`this` 的绑定。\n\n**在常规函数中，关键字 **`this` 表示调用该函数的对象，可以是窗口、文档、按钮或其他任何东西。\n\n**对于箭头函数，**`this` 关键字始终表示定义箭头函数的对象。\n', 0, '2022-08-06 22:01:34', 1, 10, 4, 0, 5);
INSERT INTO `topic` VALUES (23, 'HTML属性crossorigin和integrity有什么用', '## HTML属性crossorigin和integrity有什么用\n\n![](https://a.ideaopen.cn/JanYork/5q94MdNO.png)\n\n**在引入许多官方的CDN静态库时，会发现我们引入的**`script`中，不单单只有`src`属性，还有`crossorigin`和`integrity`属性。\n\n**那这个东西，如果是我们本地的资源库，我们肯定是没有的。那这两个属性是干嘛的呢？**\n\n### `crossorigin`属性\n\n**在**`HTML5`中，一些 HTML 元素提供了对 `CORS` 的支持。\n\n**我先解释一下**`CORS`是啥？\n\n![](https://a.ideaopen.cn/JanYork/Fs3eXyRK.png)\n\n**相当于是给我们服务器一个白名单，让他不会拦截我们的静态资源。**\n\n> **支持**`CORS`请求的浏览器一旦发现`ajax`请求跨域，会对请求做一些特殊处理，对于已经实现`CORS`接口的服务端，接受请求，并做出回应。\n>\n> **有一种情况比较特殊，如果我们发送的跨域请求为“非简单请求”，浏览器会在发出此请求之前首先发送一个请求类型为OPTIONS的“预检请求”，验证请求源是否为服务端允许源，这些对于开发这来说是感觉不到的，由浏览器代理。**\n>\n> **总而言之，客户端不需要对跨域请求做任何特殊处理。**\n\n```\n <audio>、<img>、<link>、<script> 和 <video> 都可以设置crossorigin属性\n```\n\n`crossorigin`的属性值可以是`anonymous`、`use-credentials`，如果没有属性值或者非法属性值，会被浏览器默认做`anonymous`。\n\n1. `crossorigin`会让浏览器启用`CORS`访问检查，检查`http`响应头的Access-Control-Allow-Origin\n2. **对于传统script需要跨域获取的**`JS`资源，控制暴露出其报错的详细信息\n3. **对于**`module script`，控制用于跨域请求的凭据模式\n\n![](https://a.ideaopen.cn/JanYork/2RwY8jaF.png)\n\n**而我们看看，我这里引入的静态库他给了一个**`anonymous`。也就是不进行`CORS`检查。\n\n### `integrity`属性\n\n`integrity`属性可以用在`<script>` 或者 `<link>`元素上，用来开启浏览器对获取的资源进行检查，它允许你为`script`或者`link`提供一个hash，用来进行验签，检验加载的JavaScript文件或者CSS问卷是否完整。\n\n**你可以当他是一个文件校验。和我们平常下载文件进行**`md5`值校验一样。\n\n**告诉浏览器，使用**`sha384`签名算法对下载的`js`文件进行计算，并与`intergrity`提供的摘要签名对比，如果二者不一致，就不会执行这个资源。\n\n> `intergrity`的作用有：**避免由【托管在CDN的资源被篡改】而引入的XSS 风险**\n\n> *注意：启用 SRI 策略后，浏览器会对资源进行 CORS 校验，这就要求被请求的资源必须同域，或者配置了 Access-Control-Allow-Origin 响应头*\n>\n', 0, '2022-08-06 22:02:20', 1, 10, 10, 0, 5);
INSERT INTO `topic` VALUES (24, 'AJAX 简介', '**AJAX 全称为**`Asynchronous JavaScript And XML`，就是异步的 JS 和 XML**\n**通过 AJAX 可以在浏览器中向服务器发送异步请求。\n\n### 优势\n\n**无刷新获取数据**\n\n### 注意\n\n**AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式 **\n\n---\n\n## XML 简介\n\n**XML：可扩展标记语言，被设计用来传输和存储数据，而 HTML 是****呈现数据**滴。\n\n**XML 和 HTML 类似，不同的是 HTML 中都是****预定义标签(提前定义好的，如a标签，ul li标签等等)**，而 XML 中没有预定义标签，全都是**自定义标签(顾名思义，标签名自定义)**，用来表示一些数据。\n\n```\n  <!-- 用 XML 表示 -->\n <student>\n     <name>小云</name>\n     <age>18</age>\n     <gender>男</gender>\n </student>\n```\n\n---\n\n## AJAX 的优缺点\n\n### 优点\n\n1. **可以无需刷新页面而与服务器端进行通信**\n2. **允许你根据用户****事件**来更新部分页面内容\n\n### 缺点\n\n1. **没有浏览历史，不能回退**\n2. **存在跨域问题(同源)，如 a.com 不能访问到 b.com**\n3. **SEO 不友好**\n\n---\n\n## HTTP 协议\n\n**HTTP (**`hypertext transport protocol`) 协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。\n\n### 了解请求报文与响应报文\n\n![img](https://a.ideaopen.cn/Mercury/HrukyODd.png)\n\n### 分析请求报文与响应报文\n\n**重点是****格式**与**参数**\n\n#### 请求报文\n\n```\n <!-- 请求行格式：1.请求类型 2.url参数 3.HTTP版本-->\n 行POST /s?ie=utf-8 HTTP/1.1\n <!-- 请求头格式：名 冒号 空格 值 -->\n 头Host: wish.ideaopen.cn\n  Cookie: wish.ideaopen\n  Content-Type: application/x-www-form-urlencoded\n <!-- 空行必须有  -->\n 空行\n <!-- 请求体格式：GET请求此处是为空的 POST可以不为空 参数的键值用=连接, 参数之间用&连接-->\n 体如: username=admin&password=admin\n```\n\n**这样就是一个完整的 HTPP请求报文了。**\n\n#### 响应报文\n\n```\n <!-- 响应行格式：1.HTTP版本 2.响应状态-->\n 行HTTP/1.1 200 OK\n <!-- 响应头格式：名 冒号 空格 值 -->\n 头Host: wish.ideaopen.cn\n  Cookie: wish.ideaopen\n <!-- 空行必须有  -->\n 空行\n <!-- 响应体格式：html 文本/json 文本/js/css/图片... -->\n 体<html>\n <head></head>\n     <body>\n <h1>HELLO AJAX</h1>\n     </body>\n </html>\n```\n\n#### 不同类型的请求及其作用\n\n1. `GET`: 从服务器端 **读取** 数据（查）\n2. `POST`: 向服务器端 **添加** 新数据 （增）\n3. `PUT`: **更新** 服务器端已经数据 （改）\n4. `DELETE`: **删除 **服务器端数据 （删）\n\n#### 常见的响应状态码\n\n* `200 OK`：请求成功。一般用于GET 与POST 请求\n* `201 Created`：已创建。成功请求并创建了新的资源\n* `401 Unauthorized`：未授权/请求要求用户的身份认证\n* `404 Not Found`：服务器无法根据客户端的请求找到资源\n* `500 Internal Server Error`：服务器内部错误，无法完成请求\n\n#### 观察请求与响应\n\n**右键网页空白处 → 检查 → 如图**\n\n![img](https://a.ideaopen.cn/Mercury/bfiNCXYc.png)\n\n#### 区别 一般http请求 与 ajax请求\n\n1. **ajax请求 是一种特别的 http请求**\n2. **对服务器端来说, 没有任何区别, 区别在浏览器端**\n3. **浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求**\n4. **浏览器端接收到响应**\n   1. **一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面**\n   2. **ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据**\n\n> **部分引自  **[【Ajax】HTTP相关问题](https://blog.csdn.net/weixin_44972008/article/details/113772348)\n\n---\n\n## AJAX  基本使用\n\n### 准备工作\n\n#### 下载 Node.js\n\n> [下载 | Node.js 中文网 (nodejs.cn)](http://nodejs.cn/download/)  根据电脑版本下载\n\n#### 使用 Express 作为服务端\n\n![img](https://a.ideaopen.cn/Mercury/11caWBB4.png)\n\n#### 实现\n\n**这里我是使用VSCode**\n\n1. **打开终端**\n\n![img](https://a.ideaopen.cn/Mercury/31peAJDa.png)\n\n2. **初始化环境**\n\n```\n npm init --yes\n```\n\n3. **下载 express 包**\n\n```\n npm i express\n```\n\n4. **编写代码**\n\n```\n // 1、引入 express\n const express = require(\'express\');\n \n // 2、创建应用对象\n const app = express();\n \n // 3、创建路由规则\n     // request：对请求报文的封装\n     // response：对响应报文的封装\n app.get(\'/\' ,(request, response) => {\n     // 设置响应\n     response.send(\'Hello EXPRESS\');\n });\n \n // 4、监听端口启动服务\n app.listen(8000, () => {\n     console.log(\'服务器启动成功，端口号：8000\');\n });\n```\n\n5. **运行程序**\n\n```\n // 如果创建了文件夹 记得先进入文件夹 cd命令进入\n node ajax.js(js文件)\n```\n\n6. **打开网页显示页面 **\n', 0, '2022-08-06 22:09:38', 2, 10, 4, 0, 5);
INSERT INTO `topic` VALUES (25, '搭建 Tomcat 服务器', '### 1、获取 Tomcat\n\n**从 Apache 官站 **[Apache Tomcat® - Welcome!](https://tomcat.apache.org/) 上获取最新版本的 Tomcat，本文使用的 Tomcat 版本为 9.0.64，下载后解压，这里我是解压至D盘的。\n\n### 2、配置环境变量\n\n**其实是无需配置的。因为 tomcat 的环境变量在运行的时候就会自动配上了，具体在 startup.bat 脚本文件中将注释翻译就能得到这个解释。**\n\n```\n //关闭命令自身输出\n @echo off\n //setlocal命令表示，这边对环境变量的修改只对当前脚本生效\n setlocal\n //检查CATALINA_HOME这个环境变量有没设置，如果有设置就使用设置的环境变量\n //如果没设置，将CATALINA_HOME设置成当前目录。\n //检测%CATALINA_HOME%\\bin\\catalina.bat这个脚本存不存在，不存在整合脚本结束，报错\n rem Guess CATALINA_HOME if not defined\n set \"CURRENT_DIR=%cd%\"\n if not \"%CATALINA_HOME%\" == \"\" goto gotHome\n set \"CATALINA_HOME=%CURRENT_DIR%\"\n if exist \"%CATALINA_HOME%\\bin\\catalina.bat\" goto okHome\n cd ..\n set \"CATALINA_HOME=%cd%\"\n cd \"%CURRENT_DIR%\"\n :gotHome\n if exist \"%CATALINA_HOME%\\bin\\catalina.bat\" goto okHome\n echo The CATALINA_HOME environment variable is not defined correctly\n echo This environment variable is needed to run this program\n goto end\n :okHome\n // 准备启动脚本\n set \"EXECUTABLE=%CATALINA_HOME%\\bin\\catalina.bat\"\n \n rem Check that target executable exists\n if exist \"%EXECUTABLE%\" goto okExec\n echo Cannot find \"%EXECUTABLE%\"\n echo This file is needed to run this program\n goto end\n :okExec\n //拼接catalina.bat这个脚本的命令行参数\n rem Get remaining unshifted command line arguments and save them in the\n set CMD_LINE_ARGS=\n :setArgs\n if \"\"%1\"\"==\"\"\"\" goto doneSetArgs\n set CMD_LINE_ARGS=%CMD_LINE_ARGS% %1\n shift\n goto setArgs\n :doneSetArgs\n //执行catalina.bat这个脚本,执行start,并添加命令行参数\n call \"%EXECUTABLE%\" start %CMD_LINE_ARGS%\n \n :end\n \n```\n\n**具体了解 startup.bat 源码分析可以查看这个博主的讲解 **[Tomcat 的启动脚本startup.bat 源码简析 - 程序员自由之路 - 博客园 (cnblogs.com)](https://www.cnblogs.com/54chensongxia/p/13234398.html) ，我这里只是简单阐述一下。\n\n### 3、Tomcat 目录结构\n\n![img](https://a.ideaopen.cn/Mercury/yvO2qmte.png)\n\n**下面讲解各个文件的作用**\n\n* **bin：存放各种平台下用于启动和停止 Tomcat 的脚本文件**\n* **conf：存放 Tomcat 服务器的各种配置文件**\n* **lib：存放 Tomcat 服务器所需的各种 JAR 文件**\n* **logs：存放 Tomcat 的日志文件**\n* **temp：Tomcat 运行时用于存放临时文件**\n* **webapps：Web 应用的发布目录**\n* **work：Tomcat 把由 JSP 生成的 Servlet 存放于此目录下**\n\n### 4、启动和停止 Tomcat\n\n**对于安装版本和解压缩版本的 Tomcat，启动和停止的方式有所不同，这里介绍解压缩版本，下面以 Tomcat 9.0为例分别进行介绍。**\n\n#### Tomcat 解压缩版本的启动和停止\n\n**打开 Tomcat 目录的子目录bin，其中 startup.bat 为启动，startdown.bat 为关闭。**\n\n![img](https://a.ideaopen.cn/Mercury/vkNmAlcI.png)\n\n### 注意\n\n#### 配置 pause 提示错误信息\n\n**当运行 startup.bat 出现闪退时，则可以使用文本编辑器打开 startup.bat 文件，在文件末尾加上一行 \"pause\"，保存后在运行，则会暂停并显示错误信息，方便查找错误原因。**\n\n#### 修改编码防止中文乱码\n\n**当运行 startup.bat 后的窗口出现中文乱码问题，需要打开安装目录的 conf 文件夹下的 logging.properties 文件，找到 \"java.util.logging.ConsoleHandler.encoding\" 行，并将其设置为GBK，如图所示：**\n\n![img](https://a.ideaopen.cn/Mercury/ibHypSdJ.png)\n\n![img](https://a.ideaopen.cn/Mercury/6KSWd80k.png)\n\n### 测试\n\n**Tomcat 启动后，在浏览器中输入 **`http://localhost:8080`进行测试。如果显示的是 Tomcat 欢迎页，则说明启动 Tomcat 成功\n\n![img](https://a.ideaopen.cn/Mercury/KWafDLGD.png)\n\n### 配置 Tomcat 端口号\n\n**在默认情况下，Tomcat 端口号为8080。一旦这个端口被占用，Tomcat 服务将无法正常启动。此时，则需要修改 Tomcat 的端口号。操作步骤如下：**\n\n1. **打开 Tomcat 目录的子目录 conf**\n2. **找到 server.xml 文件，使用文本编译器打开**\n3. **找到 Connector 节点，修改端口号**\n4. **保存设置**\n\n![img](https://a.ideaopen.cn/Mercury/Js6zKrfs.png)\n\n**最后，本文到此就结束啦~~**\n', 0, '2022-08-06 22:11:49', 2, 10, 1, 0, 5);
INSERT INTO `topic` VALUES (26, 'jQuery 事件', '### 1. 事件组成\n\n```\n $(function () {\n     $(\"#btn\").click( function() {\n         alert(\"不要点我！！\")\n     })\n })\n```\n\n**通过这段代码可以得知，一个事件由以下三个部分组成：**\n\n* **第一部分**`$(\"#btn\")`，表示事件主体\n* **第二部分**`click`，表示事件的类型（如click为鼠标单击事件）\n* **第三部分**`function() {}`，表示事件处理函数\n\n---\n\n### 2. 基础事件\n\n#### 鼠标事件\n\n**鼠标事件是指用户在移动鼠标指针或单击鼠标任意鼠标键是触发的事件。常用方法如下：**\n\n\n| **方法**                    | **描述**                               | **执行时机**       |\n| ----------------------------- | ---------------------------------------- | -------------------- |\n| **click ([function])**      | **将事件处理函数附加到 click 事件**    | **鼠标单击时**     |\n| **mouseover([function])**   | **将事件处理函数附加到mouseover 事件** | **鼠标指针移入时** |\n| **mouserout([function])**   | **将事件处理函数附加到mouserout事件**  | **鼠标移出时**     |\n| **mouseenter([function])**  | **将事件处理函数附加到mouseover 事件** | **鼠标进入时**     |\n| **mouserleave([function])** | **将事件处理函数附加到mouseover 事件** | **鼠标离开时**     |\n\n**mouseover() 和 mouserout() 方法的用法相同，都是在鼠标指针移至页面元素时触发，二者的区别如下：**\n\n* **mouseover()：鼠标指针移动到选取的元素及其子元素上时触发**\n* **mouserout() ：鼠标指针移动到选取的元素上时触发**\n\n**mouseenter() 和 mouserleave() 方法的用法相同，都是鼠标指针离开页面元素时触发，二者的区别如下：**\n\n* **mouseenter()：鼠标指针离开任意一个子元素及选取的元素时触发**\n* **mouserleave()：鼠标指针离开选取的元素时触发**\n\n---\n\n### 3. 键盘事件\n\n**键盘事件是指用户键盘按键或者释放键盘按键时所触发的事件。jQuert 提供的常用键盘事件包括 keydown、keyup和keypress。常用方法如下：**\n\n\n| **方法**                  | **描述**                               | **执行时机**           |\n| --------------------------- | ---------------------------------------- | ------------------------ |\n| **keydown ([function])**  | **将事件处理函数附加到 keydown 事件**  | **按下键盘按键时**     |\n| **keyup ([function])**    | **将事件处理函数附加到 keyup 事件**    | **释放键盘按键时**     |\n| **keypress ([function])** | **将事件处理函数附加到 keypress 事件** | **产生可打印的字符时** |\n\n**示例：**\n\n```\n // css 样式\n <input id=\"message\" type=\"text\" value=\"\">\n // 下段代码在<script>标签中\n $(function () {\n     $(\"#message\").keydown(function () {\n         console.log(\"键盘被按下--keydown\")\n     })\n     $(\"#message\").keyup(function () {\n         console.log(\"键盘被释放--keydown\")\n     })\n     $(\"#message\").keypress(function () {\n         console.log(\"产生可打印的字符--keydown\")\n     })\n })\n```\n\n![img](https://a.ideaopen.cn/Mercury/mcGq8f5V.png)\n\n---\n\n### 4. 浏览器事件\n\n\n| **方法**                | **描述**                             | **执行时机**                   |\n| ------------------------- | -------------------------------------- | -------------------------------- |\n| **resize ([function])** | **将事件处理函数附加到 resize 事件** | **浏览器窗口尺寸发生改变时**   |\n| **scroll ([function])** | **将事件处理函数附加到 scroll 事件** | **滚动条或可滚动的元素滚动时** |\n\n**演示：**\n\n```\n <div style=\"height: 2000px;\"></div>\n \n <script>\n $(function() {\n $(window).resize(function() {\n $(\"body\").css(\"background\",\"pink\");\n })\n \n $(window).scroll (function() {\n $(\"body\").css(\"background\",\"pink\");\n })\n })\n </script>\n```\n\n**resize效果 浏览器窗口尺寸发生改变时**\n\n![img](https://a.ideaopen.cn/Mercury/dQRECizj.png)\n\n**scroll效果 滚动条或可滚动的元素滚动时**\n\n![img](https://a.ideaopen.cn/Mercury/ZDPbrx5T.png)\n\n---\n\n### 5. 表单事件\n\n**表单在网页中主要负责数据收集，如登入 、注册、问卷调查和论坛发帖等页面，都离不开表单。常用的表单事件方法如下**\n\n\n| **方法**                | **描述**                            | **执行时机**                                            |\n| ------------------------- | ------------------------------------- | --------------------------------------------------------- |\n| **focus ([function])**  | **将事件处理函数附加到 focus 事件** | **元素获得焦点时**                                      |\n| **blur ([fuction])**    | **将事件处理函数附加到 blur 事件**  | **元素失去焦点时**                                      |\n| **change ([function])** | **将事件处理函数附加到 focus 事件** | **元素的值发生改变时**                                  |\n| **submit ([function])** | **将事件处理函数附加到 focus 事件** | **submit 事件只适用于**<from>**元素，当提交表单时触发** |\n\n### 6. 绑定事件与移除事件\n\n**在实际开发中，有时需要为一个元素添加多个事件处理程序。例如鼠标指针移入时改变元素样式，移出时改变元素样式。**\n\n**使用 jQuery 提供的 on() 方法可以指定元素添加一个或多个事件处理程序。**\n\n#### 绑定事件\n\n```\n $(被匹配元素的选择器表达式).on(event [,childSelector] [,data] ,function);\n```\n\n* **enent：必需参数，表示事件类型。如 click、mouserover、mouseout等。若一次绑定多个事件，且执行相同事件处理程序，event 应采用空格进行分隔。**\n* **childSelector：可选参数，用于过滤触发事件所选元素的后代元素。**\n* **data：可选参数，作为 event.data 属性值传递给事件对象**\n* **function：必需函数，用于绑定触发事件后执行的函数**\n\n#### 移除事件\n\n**使用 off() 方法，从指定元素上移除一个或多个事件处理程序，语法如下：**\n\n```\n $(被匹配元素的选择器表达式).off(event [,childSelector] ,function);\n```\n\n* **enent：必需参数，表示事件类型。如 click、mouserover、mouseout等。如果一次移除多个事件，event 应采用空格进行分隔。**\n* **childSelector：可选参数，用于过滤触发事件所选元素的后代元素。**\n* **function：必需函数，用于绑定触发事件后执行的函数**\n\n---\n\n### 7. 复合事件\n\n**复合事件是指****一组事件的组合**。实际操作中，鼠标指针移入和移出事件通常会搭配使用。如二级菜单，移入时显示隐藏的二级菜单，移出时恢复原样。\n\n**jQuer 提供了两个复合事件方法 —— hover() 和 toggle() 方法，其中 toggle() 在jQuery 1.8版本中已经被弃用，本节围绕hover() 方法进行介绍。hover() 相当于mouseenter和mouseleave的结合。**\n\n**语法：**\n\n```\n $(被匹配元素的选择器表达式).hover(enterFunction ,leaveFunction)\n```\n\n**当鼠标指针移至元素上时，触发第一个函数 enterFunction，移出时触发第二个 leaveFunction函数。**\n\n---\n\n## jQuery 动画\n\n### 控制元素显示与隐藏\n\n```\n // 显示元素\n $(被匹配元素的选择器表达式).show([speed] [,easing] [,fn]);\n // 隐藏元素\n $(被匹配元素的选择器表达式).hide([speed] [,easing] [,fn]);\n```\n\n* **speed：可选元素，规定显示效果的速度。值可选：毫秒，“slow(较慢的)”，\"normal(匀速)\"、\"fast(较快的)\"**\n* **easing：可选参数，规定在动画的不同点上元素的速度，默认值为 \"swing\" —— 在开头/结尾移动慢，在中间移动快，可能的值有：\"linear\" —— 匀速运动。**\n* **fn：可选参数，指定在动画完成后要执行的方法，每个匹配元素调用一次**\n\n---\n\n### 改变元素透明度\n\n**jQuery 中使用 fadeIn() 和 fadeOut() 能够改变元素透明，语法如下：**\n\n```\n $(被匹配元素的选择器表达式).fadeIn([speed] [,easing] [,fn]);\n $(被匹配元素的选择器表达式).fadeOut([speed] [,easing] [,fn]);\n```\n\n* **fadeIn() 方法控制元素淡入，在指定的一段时间内增加元素的不透明度(opactity 属性)，直至元素完全显示 (display属性为block)**\n* **fadeOut() 方法控制元素淡出，直至元素完全消失 (display属性为none)**\n* **参数同show()、hide()方法的参数相同**\n\n---\n\n### 改变元素高度\n\n**jQuery 中使用slideUp() 与 slideDown() 方法改变元素高度。**\n\n**当一个元素的 display 属性为 none，调用slideDown() 方法时，该元素将由上至下延伸显示。**\n\n**而slideUp() 方法正好相反，该元素将由上至下缩短隐藏**\n\n**语法：**\n\n```\n$(被匹配元素的选择器表达式).slideUp([speed] [,easing] [,fn]);\n$(被匹配元素的选择器表达式).slideDown([speed] [,easing] [,fn]);\n```\n\n---\n\n### 自定义动画方法\n\n**在jQuery中，除以上所学习的常用动画方法外，还可以使用jQuery提供的 animate() 方法创新自定义动画**\n\n**语法：**\n\n```\n$(被匹配元素的选择器表达式)。animate((params),speed,fn);\n```\n\n* **params：必选参数，定义形成动画的CSS属性，如 **`{left:\'100px\',top:\'200px\'}`\n* **speed：可选参数，规定效果的时长，取值：\"slow\"、\"fast\" 或毫秒**\n* **fn：可选参数，动画完成后执行的函数**\n', 0, '2022-08-06 22:14:51', 2, 10, 4, 0, 0);
INSERT INTO `topic` VALUES (27, 'jQuery 操作DOM', '**当网页被加载时，浏览器会创建当前页面的DOM对象，JavaScript 通过提供的方法对 DOM 节点进行操作，实现网页的交互，jQuery 提供了一系列操作DOM的方法，一方面简化了JavaScript操作DOM的写法，另一方面解决了浏览器兼容性问题。**\n\n---\n\n## jQuery 节点操作\n\n### 1. 查找节点\n\n```\n $(\"selector\")\n```\n\n**例：**\n\n```\n // 查找ul下的所有li元素\n $(\"ul li\")\n```\n\n---\n\n### 2. 创建节点\n\n**在jQuery工厂函数$()中直接传入 HTML 代码，可创建新的元素,，语法：**\n\n```\n $(html)\n```\n\n**例：**\n\n```\n $(\"<li>安静</li>\")\n```\n\n---\n\n### 3. 插入节点\n\n#### 内部插入\n\n* **append (content)：在匹配元素结尾插入指定位置**\n* **appendTo (content)：把选择的元素追加到另一个指定的元素集合内部**\n* **prepend (content)：在匹配元素开始的位置插入指定内容**\n* **prepend (content)：将所有匹配元素前置到指定的元素集合内部**\n\n#### 外部插入\n\n* **after (content)：在匹配元素之后插入内容**\n* **insertAfter (content)：将匹配的元素插入到另一个指定的元素集合的后面**\n* **before (content)：在匹配元素之前插入内容**\n* **insertBefore (content)：将匹配的元素插入到另一个指定的元素集合的前面**\n\n---\n\n### 4. 删除节点\n\n#### 1.remove() 方法\n\n**语法：**\n\n```\n remove([选择器])\n```\n\n**selector：可选参数，表示被匹配元素的选择器表达式。如果接受参数，则根据传入的jQuery选择器表达式筛选出要删除的元素，并执行删除操作**\n\n**例：**\n\n```\n // 删除节点\n $(\"ul li a\").remove();\n```\n\n#### 2. detach () 方法\n\n**语法：**\n\n```\n detach([选择器])\n```\n\n**同remove()方法一样，都是从DOM文档中移除指定的元素**\n\n**二者的区别在于detach()方法在删除元素时会保留与删除的元素关联的数据、事件等。**\n\n#### 3. empty() 方法\n\n**语法：**\n\n```\n empty()\n```\n\n**empty() 方法不接收任何参数，用于清空元素及后代元素。**\n\n---\n\n### 5. 复制节点\n\n**语法：**\n\n```\nclone([includeEvents])\n```\n\n**jQuery 中使用 clone() 方法对匹配元素进行复制，但需要注意的是，新复制出来的节点并不会显示在DOM文档中，仍需要使用插入的方法进行操作。**\n\n**其中 includeEvents 为可选参数，为布尔类型，默认值为 false，表示是否复制匹配元素的所有事件处理。**\n\n---\n\n### 6. 替换节点\n\n**两种替换节点的方法：**\n\n```\n$(选择器).replaceWith(content)\n$(content).replaceAll(选择器)\n```\n\n**两种方法作用相同，都是用于将所有匹配的元素替换成指定的HTML内容或元素，区别在于语法上的内容和选择器的位置。**\n\n---\n\n### 7. 节点属性操作\n\n#### 1. 获取与设置元素属性\n\n```\n// 获取\n$(选择器).attr(属性)\n```\n\n```\n// 设置单个属性值\n$(选择器).attr(属性,value)\n// 设置多个属性值\n$(选择器).attr({属性:value ,属性:value……})\n```\n\n#### 2.删除属性\n\n**语法：**\n\n```\n$(选择器).removeAttr(属性)\n```\n\n---\n\n## jQuery 遍历节点\n\n### 1. 遍历子元素\n\n**使用 children() 方法返回指定元素的所有子元素**\n\n```\nchildren([expr])\n```\n\n**expr：可选参数，表示传入的jQuery选择器表达式。**\n\n### 2. 遍历同辈元素\n\n```\nnext([expr])		// 用于获取紧邻匹配元素的下一个元素\nprev([expr])		// 用于获取紧邻匹配元素的前一个元素\nsiblings([expr])	// 用于获取匹配元素的前面和后面的所有同辈元素\n```\n\n### 3. 遍历前辈元素\n\n```\nparent([选择器])	// 获取当前匹配元素集合中的每个匹配元素的父级元素\nparents([选择器])	// 获取当前匹配元素集合中每个匹配元素的祖先元素\n```\n\n### 4. 其他遍历方法\n\n**主要介绍each() 方法，其余使用较为简单，可在jQuery官网的API中找到相关的使用说明文档。**\n\n```\n$(选择器).each(function (index,element))\n```\n\n**index：表示选择器的位置**\n\n**element：表示当前元素**\n\n**当 function 函数返回值为 false 时，可以停止循环。**\n\n---\n\n## jQuery 中的元素内容操作\n\n### HTML 代码和文本内容操作\n\n**jQuery 提供 html() 与 text() 方法，用于获取或设置元素内容**\n\n#### 1.html() 方法\n\n**html() 用于读取或设置某个元素的内容，语法如下**\n\n```\n$(选择器).html([content])\n```\n\n**content：可选参数，当传入该参数时，表示设置指定元素的新内容为传入内容（可以包含HTML标签），而未传入参数时，则返回指定元素的当前内容。**\n\n#### 2. text() 方法\n\n**text() 方法用于获取或者设置匹配元素的文本内容**\n\n```\n$(选择器).text([content])\n```\n\n**text() 方法和html() 方法用法类似，二者的区别如下：**\n\n* **无参数：text() 与 html() 方法在无参数时，text() 方法获取到的是所有匹配元素及其后代元素的文本内容，而html() 方法获取到的是第一个匹配元素的HTML内容或文本内容**\n* **有参数：text() 方法在接受参数后，会以文本形式设置所有匹配元素的内容，而html() 方法会设置所有匹配的HTML内容或文本内容**\n\n### 2. 属性值操作\n\n**jQuery提供了获取元素的value属性值的 val () 方法。语法：**\n\n```\n$(选择器).val([value])\n```\n\n**value：可选参数。当传入该参数时，表示设置指定元素的value属性为传入内容；未传入数时，则返回指定元素的value属性。**\n\n**通常结合表单标签使用，如文本框、下拉框、单选框等**\n\n---\n\n## jQuery 中的元素样式操作\n\n**在jQuery中，元素样式操作主要包括设置样式值、获取样式值、追加样式、移除样式、切换样式和样式判断**\n\n### 1. 设置、获取样式值\n\n**在jQuery中，使用 css() 方法设置或获取样式值**\n\n```\n// 设置单个css操作\n$(选择器).css(name,value)	\n// 设置多个css操作\n$(选择器).css({name:value ,name:value ……})\n```\n\n**value：可选参数，表示设置的属性值。如果该方法没有传入 value 值，则表示获取该元素的 css 属性值。**\n\n**使用css() 方法的缺点就是，如果一次需要设置多个样式值，css() 方法写起来较为烦琐。这时候则需要 class 类样式来进行设置。**\n\n---\n\n## 追加、移除样式\n\n**在 jQuery 中，对元素 class 类样式的操作有追加样式和移除样式。语法如下：**\n\n```\n$(选择器).addClass(classname);								  // 设置单个 class 类样式\n$(选择器).addClass(classname1 classname2 classname3 ……);		// 设置多个 class 类样式\n\n$(选择器).removeClass(classname);							  // 移除单个 class 样式\n$(选择器).removeClass(classname1 classname2 classname3 ……);	// 移除多个 class 样式\n```\n\n**addClass() 方法为追加样式，removeClass() 为移除样式，其中参数 classname 为 class 类样式名称。设置多个class类样式之间使用空格分隔。**\n\n### 样式的切换与判断\n\n```\n$(选择器).toggleClass(classname);		// 切换 class 类样式\n$(选择器).hasClass(classname);			// 判断 class 类样式是否存在\n```\n\n---\n\n## jQuery中的CSS-DOM操作\n\n**CSS-DOM操作即读取元素和设置元素 style 的各种属性，操作方法如下：**\n\n\n| **方法**                   | **描述**                                     | **示例**                         |\n| ---------------------------- | ---------------------------------------------- | ---------------------------------- |\n| **css (name[,value])**     | **设置或获取指定元素的样式值**               | **$(\"div\").css(\"color\",\"red\");** |\n| **height([value])**        | **设置或获取指定元素的高度**                 | **$(\"div\").height(200);**        |\n| **width([value])**         | **设置或获取指定元素的宽度**                 | **$(\"div\").width(300);**         |\n| **offset([value])**        | **设置或获取指定元素的相对于文档的偏移**     | **$(\"div\").offset();**           |\n| **position()**             | **获取第一个匹配元素相对于父元素的位置**     | **$(\"div\").position()；**        |\n| **scrollLeft([position])** | **设置或获取指定元素相对于滚动条左侧的偏移** | **$(\"div\").scrollLeft(40);**     |\n| **scrollTop([position])**  | **设置或获取指定元素相对于滚动条顶部的偏移** | **$(\"div\").scrollTop(50);**      |\n', 0, '2022-08-06 22:15:41', 2, 10, 4, 0, 0);
INSERT INTO `topic` VALUES (28, '初识jQuery', '## 原生JS的问题\n\n## jQuery安装方式\n\n**进入jQuery官网：**[http://jquery.com](http://jquery.com)\n\n**一、jQuery的引入：**\n\n**1）在页面中引入下载好的jQuery文件**\n\n```\n <script src=\"js/jquery-1.12.4.js\" type=\"text/javascript\"></script>\n```\n\n**2）npm后面会学到，需要安装nodejs**\n**3）其他**\n\n**二、书写自己的代码：**\n\n```\n <script  type=\"text/javascript\"></script>\n```\n\n**依赖关系：**\n\n## 1、jQuery能做什么\n\n**  1）访问和操作DOM元素**\n**  2）控制页面样式**\n**  3）对页面事件进行处理**\n**  4）扩展新的jQuery插件**\n**  5）与Ajax技术完美结合**\n\n**jQuery能做的JavaScript也都能做，但使用jQuery能大幅提高开发效率**\n\n## 2、jQuery的优势\n\n**  1）体积小，压缩后只有100KB左右**\n**  2）强大的选择器**\n**  3）出色的DOM封装**\n**  4）可靠的事件处理机制**\n**  5）出色的浏览器兼容性**\n**  6）使用隐式迭代简化编程**\n**  7）丰富的插件支持**\n\n## 3、jQuery基本语法\n\n**1）入口函数：**$(function(){});\n\n**2）语法**\n\n```\n $(function(){\n \n alert(\"内容\");\n \n })\n```\n\n## 4、$(document).ready()\n\n**简写：**$(function(){})\n\n## 5、jQuery语法结构\n\n**语法：$(selecter).action();**\n\n**工厂函数$()：**将DOM对象转化为jQuery对象**\n****选择器 selector：**获取需要操作的DOM 元素**\n****方法action()：**jQuery中提供的方法，其中包括绑定事件处理的方法\n\n## 6、jQuery操作页面元素\n\n**  1）使用addClass( )方法为元素添加样式**\n**  2）使用css( )方法设置元素样式**\n**  3）使用show( )、hide( ) 方法设置元素的显示和隐藏**\n\n## 7、addClass( )方法\n\n**语法**：jQuery 对象.addClass([样式名]);\n\n**示例：**$(\"#current\").addClass(\"current\");\n\n## 8、css( )方法\n\n**语法：**css(\"属性\",\"属性值\") ;**\n**        css({\"属性1\":\"属性值1\",\"属性2\":\"属性值2\"...}) ;\n\n**示例：**$(this).css({\"background\":\"#c81623\"});\n\n## 9、设置元素的显示和隐藏\n\n**语法：**\n**  $(selector).show( );**\n\n**  $(selector).hide( );**\n**示例：**\n**  $(\".nav-top\").show( );**\n**  $(\"p\").hide( );**\n\n## 10、jQuery代码风格\n\n**“$”等同于“ jQuery ”**\n**  $(document).ready()=jQuery(document).ready()**\n**  $(function(){...})=jQuery (function(){...})**  **\n**  链式操作**\n**  隐式迭代\n\n## 11、链式操作\n\n**  对一个对象进行多重操作，并将操作结果返回给该对象**\n**示例：**\n**     $(\"h2\").css(\"background-color\",\"#ccffff\").next().css(\"display\",\"block\");**\n\n## 12、隐式迭代\n\n**  示例：**\n\n```\n $(document).ready(function() {\n $(\"li\").css({\"font-weight\":\"bold\",\"color\":\"red\"});\n });\n```\n\n## 13、DOM对象和jQuery对象\n\n**  1）DOM对象：直接使用JavaScript获取的节点对象**\n**     var objDOM=document.getElementById(\"title\"); **\n**     var objHTML=objDOM.innerHTML;  **\n\n**  2）jQuery对象：使用jQuery包装DOM对象后产生的对象，它能够使用jQuery中的方法**\n**     $(\"#title\").html( );**\n**       等同于**\n** document.getElementById(\"title\").innerHTML; **\n**提示：**\n**        DOM对象和jQuery对象分别拥有一套独立的方法，不能混用**\n\n**  3）使用$()函数进行转化：$(DOM对象)**\n**     var txtName =document.getElementById(\"txtName\");  **  **\n**    var $txtName =$(txtName);\n\n**  注意：jQuery对象命名一般约定以$开头**\n**        在事件中经常使用$(this)，this是触发该事件的对象**\n\n## 14、jQuery对象转DOM对象\n\n**  1）jQuery对象是一个类似数组的对象，可以通过[index]的方法得到相应的DOM对象**\n\n```\n  var $txtName =$ (\"#txtName\"); \n  var txtName =$txtName[0]; \n```\n\n**  2）通过get(index)方法得到相应的DOM对象**\n\n```\n  var $txtName =$(\"#txtName\"); \n  var txtName =$txtName.get(0);  \n```\n', 0, '2022-08-06 22:17:23', 2, 10, 4, 0, 0);
INSERT INTO `topic` VALUES (29, 'JavaScript 面向对象', '**在 ES6 推出之前，JavaScript 中还没有类的概念，因此它的对象也与基于类的语言中的对象有所不同。**\n\n**创建对象的方式有如下两种：**\n\n### 创建内置对象\n\n**JavaScript 中内置对象是一种特殊的数据，常见的内置对象如下：**\n\n* **String**\n* **Date**\n* **Array**\n* **Boolean**\n* **Math**\n* **RegExp**\n\n**在处理一些复杂的逻辑时，内置对象就无法满足开发者的需求，这时就需要接下来所讲到的****创建自定义对象**\n\n### 创建自定义对象\n\n**与内置对象不同的是，创建的对象为Object，语法：**\n\n```\n // 对象实例化\n var 对象名 = new Object()\n```\n\n**通过为其添加属性和方法，实例：**\n\n```\n var cat = new Object();\n cat.name = \"小月\";\n cat.age = 3;\n cat.color = \"白色\";\n // 添加一个方法属性\n cat.intro = function () {\n document.write(\"猫咪名字：\" + this.name + \"<br/>猫咪年龄：\" + this.age + \"<br/>猫咪颜色：\"  + this.color);\n }\n cat.intro();\n```\n\n**使用字面量赋值的方式创建对象：**\n\n```\n var cat = {\n name : \"小月\",\n age : 3,\n color : \"白色\",\n      // 添加一个方法属性\n intro : function () {\n document.write(\"猫咪名字：\" + this.name + \"<br/>猫咪年龄：\" + this.age + \"<br/>猫咪颜色：\"  + this.color);\n }\n }\n cat.intro();\n```\n\n---\n\n## 简单工厂模式\n\n**简单工厂模式提供了一个接口可以根据传递的参数的不同创建不同的对象，从而将对象自身的逻辑与对象的创建分离开。**\n\n**从设计模式的分类来看简单工厂模式是创建型模式。事实上与简单工厂模式类似的还有工厂模式和抽象工厂模式。那它们有什么区别呢？**\n\n**我们从名字入手分析一下，****简单** ，为什么叫简单工厂模式？因为它仅仅只是分离了对象的创建和对象的使用，一旦有新的产品加入，就必须修改简单工厂中对象创建的方法，这样并没有遵守对修改封闭，对扩展开放的原则。所以这个模式的抽象和分离的还不够彻底，相比而言工厂模式就在简单工厂模式的基础之上加了一层对工厂的抽象，具体的产品由具体的工厂来创建，这样新增产品就只需要新增一个工厂就行，并不会对原来的代码产生影响，其次 **工厂** ，这个对应其创建型模式，用于创建对象。\n\n### 优缺点\n\n### 优点\n\n1. **简单工厂模式把对象创建的逻辑进行了封装，在使用的对象的时候不需要了解创建的细节**\n2. **创建对象可以使用对应的参数来确定创建的具体对象，而不需要知道对象的类名**\n\n### 缺点\n\n1. **由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。**\n2. **使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。**\n3. **系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。**\n4. **简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。**\n\n> **引自  **[javascript实现简单工厂模式 - SegmentFault 思否](https://segmentfault.com/a/1190000004238309#:~:text=%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E6%8F%90%E4%BE%9B,%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%88%86%E7%A6%BB%E5%BC%80%E3%80%82)\n\n### 实例\n\n```\n function creatStudent (name, age) {\n     var student = new Object();\n     student.name = name;\n     student.age = age;\n     // 添加一个方法属性\n     student.showStudentInfo = function () {\n         alert(\"学生姓名：\" + this.name + \"\\n学生年龄：\" + this.age)\n     }\n     return student;\n }\n var student1 = creatStudent(\"张三\",18);\n student1.showStudentInfo();\n```\n\n**运行结果：**\n\n![img](https://a.ideaopen.cn/Mercury/91zxqWxN.png)\n\n---\n\n## 构造函数和原型对象\n\n### 构造函数\n\n**首先了解****普通函数**与**构造函数**的区别：\n\n**其一，实际上并不存在创建构造函数的特殊语法，其与普通函数唯一的区别在于调用方法。对于任意函数，使用new操作符调用，那么它就是构造函数；不使用 new 操作符调用，那么它就是普通函数。**\n\n**其二，按照惯例，我们约定构造函数名以大写字母开头，普通函数以小写字母开头，这样有利于显性区分二者。例如内置对象的 new Array()，自定义对象的 new Object()。**\n\n**其三，使用new操作符调用构造函数时，会经历4个阶段：**\n\n1. **创建一个新对象**\n2. **将构造函数作用域赋给新对象（使this指向该新对象）**\n3. **执行构造函数代码**\n4. **返回新对象**\n\n**再来看****构造函数与工厂简单模式的不同之处：**\n\n* **没有显示创建对象**\n* **直接将属性和方法赋给 this 对象**\n* **没有 return 语句**\n\n**了解了****构造函数和普通函数的区别**以及**构造函数与工厂简单模式的不同**之后，我们使用**构造函数**将**工厂模式**的函数重写，\n\n```\n function creatStudent (name, age) {\n     this.name = name;\n     this.age = age;\n     // 添加一个方法属性\n     student.showStudentInfo = function () {\n         alert(\"学生姓名：\" + this.name + \"\\n学生年龄：\" + this.age)\n     }\n }\n var student1 = creatStudent(\"张三\",18);\n student1.showStudentInfo();\n```\n\n**运行结果同上次实例一致：**\n\n![img](https://a.ideaopen.cn/Mercury/91zxqWxN.png)\n\n> **部分引自： **[JavaScript构造函数及原型对象_RockyHillsCSDN博客](https://blog.csdn.net/a153375250/article/details/51083245)\n\n---\n\n### 原型对象\n\n** JavaScript 中所创建的每个函数都有一个 prototype(原型) 属性，这个属性指向一个对象，即下文要讲到的原型对象。**\n\n#### 优点\n\n**使用原型对象的好处是可以让所有对象实例****共享**它所包含的属性和方法。语法格式如下：\n\n```\n 构造函数名.protptype.新属性或者新方法\n```\n\n#### 实例\n\n```\n function Cat() {}\n         \n Cat.prototype.name = \"小布丁\";\n Cat.prototype.age = 1;\n Cat.prototype.color = \"白色\";\n Cat.prototype.showCat = function () {\n alert(\"猫咪名字：\" + this.name + \"\\n猫咪年龄：\" + this.age + \"\\n猫咪颜色：\" + this.color);\n };\n         \n var cat1 = new Cat();\n cat1.showCat();\n```\n\n**在实例中，Cat 函数为一个空函数，所有的属性和方法都有 prototype 的方式进行添加。**\n\n### constructor 属性\n\n**在默认情况下，所有原型对象都会自动获得一个 constructor 属性，这个属性指向 prototype 属性所在的函数。如实例中的Cat.prototype.constructor 指向 Cat，通过这个构造函数，可以继续为原型对象添加其他属性和方法。**\n\n**所以实例中的 cat1 实例化对象时，虽然自身内部没有定义其他的属性和方法，但在使用时同样可以访问到。**\n\n**下面是 cat1 实例访问到其他属性和方法的流程：**\n\n* **当 cat1 实例化对象读取某个属性时，首先从对象实例本身开始搜索。如果找到指定名字的属性，则返回属性值**\n* **如果没有找到，则继续在原型对象中查找具有指定名字的属性**\n', 0, '2022-08-06 22:18:12', 2, 10, 4, 0, 0);
INSERT INTO `topic` VALUES (30, '测试', '## 测试\n\n![01.jpg](https://storehouse-1309416366.cos.ap-shanghai.myqcloud.com/01.jpg)\n', 0, '2022-08-07 20:53:49', 3, 10, 10, 0, 0);

-- ----------------------------
-- Table structure for userinfo
-- ----------------------------
DROP TABLE IF EXISTS `userinfo`;
CREATE TABLE `userinfo`  (
  `uid` int(10) NOT NULL AUTO_INCREMENT COMMENT '用户 id',
  `account` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '昵称',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '密码',
  `telephone_number` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '电话号码',
  `avatar_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'https://a.ideaopen.cn/JanYork/1qDzqRc1.png' COMMENT '头像地址',
  `eamil` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `introduce` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT '用户' COMMENT '介绍',
  `create_time` datetime NULL DEFAULT NULL COMMENT '注册时间',
  `topic_count` int(10) NOT NULL COMMENT '话题数目',
  `comment_count` int(10) NOT NULL COMMENT '评论数目',
  `nano_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'nanoId唯一身份标识',
  `url` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网址',
  `user_state` int(2) NOT NULL COMMENT '用户状态',
  PRIMARY KEY (`uid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of userinfo
-- ----------------------------
INSERT INTO `userinfo` VALUES (1, 'JanYork', '22b01330d2b7af1d', '16670880818', 'http://q1.qlogo.cn/g?b=qq&nk=747945307&s=640', '', '', '2022-08-06 05:16:28', 0, 0, 'orLuaotWgv34LGpk7s1pP', 'https://blog.ideaopen.cn', 0);
INSERT INTO `userinfo` VALUES (2, 'Mercury', 'aa241f2570d42f66', '17353517224', 'http://q1.qlogo.cn/g?b=qq&nk=2069935128&s=640', '2069935128@qq.com', '用户', '2022-08-06 06:06:40', 0, 0, '6XcSNsYT5biEJ9ERxrxvt', NULL, 0);
INSERT INTO `userinfo` VALUES (3, 'test', '2e3437fabb37a378', '15211168307', 'http://q1.qlogo.cn/g?b=qq&nk=398084348&s=640', '398084348@qq.com', '用户', '2022-08-06 16:49:08', 0, 0, '_A8ledhQrpVgETR9DfFmn', NULL, 0);

SET FOREIGN_KEY_CHECKS = 1;
